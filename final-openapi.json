{
	"components": {
		"schemas": {
			"Account": {
				"additionalProperties": false,
				"properties": {
					"address1": {
						"example": "Jodenbreestraat 4",
						"maxLength": 64,
						"type": "string"
					},
					"address2": {
						"maxLength": 64,
						"type": "string"
					},
					"address3": {
						"maxLength": 64,
						"type": "string"
					},
					"apartment": {
						"example": "2",
						"maxLength": 9,
						"type": "string"
					},
					"city": {
						"example": "Amsterdam",
						"maxLength": 50,
						"type": "string"
					},
					"coc_number": {
						"maxLength": 50,
						"type": "string"
					},
					"company_name": {
						"maxLength": 200,
						"type": "string"
					},
					"country": {
						"example": "NL",
						"format": "country-alpha2",
						"type": "string"
					},
					"email": {
						"example": "merchant@example.com",
						"format": "email",
						"maxLength": 100,
						"type": "string"
					},
					"phone": {
						"maxLength": 15,
						"type": "string"
					},
					"vat_number": {
						"maxLength": 50,
						"type": "string"
					},
					"zipcode": {
						"example": "1011 NK",
						"maxLength": 30,
						"type": "string"
					}
				},
				"required": [
					"company_name",
					"email",
					"country"
				],
				"type": "object"
			},
			"ApiUser": {
				"properties": {
					"merchant_id": {
						"type": "integer"
					},
					"role": {
						"type": "string"
					},
					"site_id": {
						"type": "integer"
					}
				},
				"required": [
					"merchant_id",
					"site_id"
				],
				"type": "object"
			},
			"Balance": {
				"properties": {
					"account_id": {
						"type": "integer"
					},
					"amount_available": {
						"type": "integer"
					},
					"amount_reserved": {
						"type": "integer"
					},
					"currency": {
						"example": "EUR",
						"maxLength": 3,
						"minLength": 3,
						"type": "string"
					},
					"id": {
						"example": "Jodenbreestraat 4",
						"maxLength": 64,
						"type": "string"
					},
					"modified": {
						"format": "date",
						"type": "string"
					}
				},
				"type": "object"
			},
			"BankAccount": {
				"additionalProperties": false,
				"properties": {
					"currency": {
						"maxLength": 3,
						"type": "string"
					},
					"holder_name": {
						"maxLength": 40,
						"type": "string"
					},
					"iban": {
						"format": "iban",
						"type": "string"
					}
				},
				"required": [
					"holder_name",
					"iban",
					"currency"
				],
				"type": "object"
			},
			"BankStatement": {
				"additionalProperties": false,
				"properties": {
					"encoded_content": {
						"format": "base64-encoded-content",
						"type": "string"
					},
					"filename": {
						"example": "bank-statement.pdf",
						"maxLength": 250,
						"type": "string"
					},
					"mime_type": {
						"enum": [
							"application/pdf",
							"image/jpeg",
							"image/png"
						],
						"type": "string"
					}
				},
				"required": [
					"filename",
					"mime_type",
					"encoded_content"
				],
				"type": "object"
			},
			"Cursor": {
				"additionalProperties": false,
				"properties": {
					"after": {
						"type": "string"
					},
					"before": {
						"type": "string"
					},
					"cursor": {
						"properties": {
							"after": {
								"type": "string"
							},
							"before": {
								"type": "string"
							}
						},
						"type": "object"
					},
					"limit": {
						"type": "integer"
					}
				},
				"type": "object"
			},
			"Customer": {
				"additionalProperties": false,
				"properties": {
					"address1": {
						"example": "Main ave.",
						"maxLength": 64,
						"type": "string"
					},
					"address2": {
						"maxLength": 64,
						"type": "string"
					},
					"address3": {
						"maxLength": 64,
						"type": "string"
					},
					"birthday": {
						"format": "date",
						"type": "string"
					},
					"brand": {
						"maxLength": 10,
						"type": "string"
					},
					"city": {
						"example": "Amsterdam",
						"maxLength": 50,
						"type": "string"
					},
					"country": {
						"example": "NL",
						"format": "country-alpha2",
						"type": "string"
					},
					"email": {
						"format": "email",
						"type": "string"
					},
					"first_name": {
						"example": "John",
						"maxLength": 25,
						"type": "string"
					},
					"forwarded_ip": {
						"format": "ipv4",
						"type": "string"
					},
					"gender": {
						"example": "M",
						"maxLength": 1,
						"type": "string"
					},
					"house_number": {
						"example": "1",
						"maxLength": 10,
						"type": "string"
					},
					"ip_address": {
						"format": "ipv4",
						"type": "string"
					},
					"last_name": {
						"example": "Doe",
						"maxLength": 25,
						"type": "string"
					},
					"locale": {
						"example": "NL",
						"maxLength": 2,
						"minLength": 2,
						"type": "string"
					},
					"mobile_phone": {
						"maxLength": 24,
						"type": "string"
					},
					"nickname": {
						"example": "johnny",
						"maxLength": 30,
						"type": "string"
					},
					"phone": {
						"maxLength": 24,
						"type": "string"
					},
					"prefix": {
						"maxLength": 10,
						"type": "string"
					},
					"state": {
						"maxLength": 6,
						"type": "string"
					},
					"title": {
						"example": "Mr",
						"maxLength": 10,
						"type": "string"
					},
					"zip_code": {
						"example": "AB1234",
						"maxLength": 10,
						"type": "string"
					}
				},
				"required": [
					"address1",
					"brand",
					"city",
					"country",
					"email",
					"first_name",
					"house_number",
					"last_name",
					"locale",
					"zip_code"
				],
				"type": "object"
			},
			"CustomerPaymentMethod": {
				"additionalProperties": false,
				"oneOf": [
					{
						"properties": {
							"type": {
								"enum": [
									"direct_debit"
								]
							}
						},
						"required": [
							"direct_debit"
						]
					}
				],
				"properties": {
					"direct_debit": {
						"additionalProperties": false,
						"properties": {
							"bic": {
								"type": "string"
							},
							"holder_name": {
								"type": "string"
							},
							"iban": {
								"type": "string"
							}
						},
						"required": [
							"holder_name",
							"iban",
							"bic"
						],
						"type": "object"
					},
					"status": {
						"enum": [
							"active"
						],
						"type": "string"
					},
					"type": {
						"enum": [
							"direct_debit"
						],
						"type": "string"
					}
				},
				"required": [
					"type",
					"status"
				],
				"type": "object"
			},
			"DeliveryDetails": {
				"additionalProperties": false,
				"properties": {
					"address1": {
						"maxLength": 64,
						"type": "string"
					},
					"address2": {
						"maxLength": 64,
						"type": "string"
					},
					"address3": {
						"maxLength": 64,
						"type": "string"
					},
					"city": {
						"maxLength": 50,
						"type": "string"
					},
					"company_name": {
						"maxLength": 50,
						"type": "string"
					},
					"company_registration_number": {
						"maxLength": 25,
						"type": "string"
					},
					"country": {
						"format": "country-alpha2",
						"type": "string"
					},
					"email": {
						"format": "email",
						"type": "string"
					},
					"favorite": {
						"type": "boolean"
					},
					"first_name": {
						"maxLength": 25,
						"type": "string"
					},
					"house_number": {
						"maxLength": 10,
						"type": "string"
					},
					"last_name": {
						"maxLength": 25,
						"type": "string"
					},
					"mobile_phone": {
						"maxLength": 25,
						"type": "string"
					},
					"phone": {
						"maxLength": 25,
						"type": "string"
					},
					"status": {
						"enum": [
							"active",
							"disabled"
						],
						"type": "string"
					},
					"title": {
						"maxLength": 15,
						"type": "string"
					},
					"zip_code": {
						"maxLength": 10,
						"type": "string"
					}
				},
				"required": [
					"address1",
					"city",
					"country",
					"first_name",
					"house_number",
					"last_name",
					"status",
					"zip_code"
				],
				"type": "object"
			},
			"GenericErrorResponse": {
				"properties": {
					"message": {
						"example": "Not found",
						"type": "string"
					},
					"success": {
						"example": false,
						"type": "boolean"
					}
				},
				"type": "object"
			},
			"IdentityDoc": {
				"additionalProperties": false,
				"properties": {
					"document_type": {
						"enum": [
							"id",
							"passport",
							"driverslicense",
							"proof_of_address"
						],
						"type": "string"
					},
					"encoded_content": {
						"format": "base64-encoded-content",
						"type": "string"
					},
					"filename": {
						"maxLength": 250,
						"type": "string"
					},
					"mime_type": {
						"enum": [
							"application/pdf",
							"image/jpeg",
							"image/png"
						],
						"type": "string"
					}
				},
				"required": [
					"filename",
					"mime_type",
					"encoded_content",
					"document_type"
				],
				"type": "object"
			},
			"Invoice": {
				"additionalProperties": false,
				"properties": {
					"due": {
						"format": "date",
						"type": "string"
					}
				},
				"required": [
					"due"
				],
				"type": "object"
			},
			"Page": {
				"additionalProperties": false,
				"properties": {
					"total": {
						"type": "integer"
					}
				},
				"type": "object"
			},
			"PaymentMethod": {
				"properties": {
					"allowed_amount": {
						"properties": {
							"max": {
								"example": 1000000,
								"type": "integer"
							},
							"min": {
								"example": 0,
								"type": "integer"
							}
						},
						"type": "object"
					},
					"allowed_apps": {
						"example": [
							"APIFCO"
						],
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"allowed_currencies": {
						"example": [
							"EUR",
							"USD",
							"GBP"
						],
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"brands": {
						"items": {
							"properties": {
								"icon_urls": {
									"properties": {
										"large": {
											"example": "https://media.multisafepay.com/img/methods/3x/postepay.png",
											"type": "string"
										},
										"medium": {
											"example": "https://media.multisafepay.com/img/methods/2x/postepay.png",
											"type": "string"
										},
										"vector": {
											"example": "https://media.multisafepay.com/img/methods/svg/postepay.svg",
											"type": "string"
										}
									},
									"type": "object"
								},
								"id": {
									"example": "POSTEPAY",
									"type": "string"
								},
								"name": {
									"example": "PostePay",
									"type": "string"
								}
							},
							"type": "object"
						},
						"type": "array"
					},
					"checkout_data_required": {
						"example": false,
						"type": "boolean"
					},
					"country_preferred": {
						"example": [
							"NL"
						],
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"extras": {
						"example": {
							"issuers": [
								{
									"bic": "ABNANL2A",
									"code": "0031",
									"name": "ABN Amro Bank"
								}
							]
						},
						"type": "object"
					},
					"icon_urls": {
						"properties": {
							"large": {
								"example": "https://media.multisafepay.com/img/methods/3x/visa.png",
								"type": "string"
							},
							"medium": {
								"example": "https://media.multisafepay.com/img/methods/2x/visa.png",
								"type": "string"
							},
							"vector": {
								"example": "https://media.multisafepay.com/img/methods/svg/visa.svg",
								"type": "string"
							}
						},
						"type": "object"
					},
					"id": {
						"example": "VISA",
						"type": "string"
					},
					"name": {
						"example": "Visa",
						"type": "string"
					},
					"required_fields": {
						"example": [],
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"type": "object"
			},
			"Plan": {
				"additionalProperties": false,
				"properties": {
					"amount": {
						"minimum": 0,
						"type": "integer"
					},
					"currency": {
						"example": "EUR",
						"maxLength": 3,
						"minLength": 3,
						"type": "string"
					},
					"description": {
						"maxLength": 256,
						"type": "string"
					},
					"interval": {
						"enum": [
							"1 day",
							"1 week",
							"1 mon",
							"1 year"
						],
						"example": "1 mon",
						"type": "string"
					},
					"interval_count": {
						"minimum": 0,
						"type": "integer"
					},
					"merchant_item_id": {
						"example": "item-1-2-3",
						"type": "string"
					},
					"name": {
						"maxLength": 64,
						"type": "string"
					},
					"status": {
						"enum": [
							"active",
							"hidden",
							"disabled"
						],
						"type": "string"
					}
				},
				"required": [
					"interval",
					"interval_count",
					"merchant_item_id",
					"name",
					"status",
					"amount",
					"currency"
				],
				"type": "object"
			},
			"Site": {
				"additionalProperties": false,
				"properties": {
					"name": {
						"maxLength": 120,
						"type": "string"
					},
					"notification_url": {
						"format": "url",
						"maxLength": 150,
						"type": "string"
					},
					"price_from": {
						"type": "integer"
					},
					"price_till": {
						"type": "integer"
					},
					"support_email": {
						"format": "email",
						"maxLength": 100,
						"type": "string"
					},
					"support_phone": {
						"maxLength": 100,
						"type": "string"
					},
					"url": {
						"format": "url",
						"maxLength": 150,
						"type": "string"
					}
				},
				"required": [
					"name",
					"url"
				],
				"type": "object"
			},
			"SubaccountCharge": {
				"additionalProperties": false,
				"properties": {
					"amount": {
						"minimum": 0,
						"type": "integer"
					},
					"checkoutdata": {
						"format": "checkout-data",
						"type": "object"
					},
					"currency": {
						"example": "EUR",
						"maxLength": 3,
						"minLength": 3,
						"type": "string"
					},
					"description": {
						"example": "monthly commission",
						"maxLength": 512,
						"minLength": 2,
						"type": "string"
					},
					"order_id": {
						"example": "fa423fabc31915acd97dew89",
						"maxLength": 128,
						"type": "string"
					},
					"var1": {
						"example": "custom variable 1",
						"maxLength": 128,
						"type": "string"
					},
					"var2": {
						"example": "custom variable 2",
						"maxLength": 128,
						"type": "string"
					},
					"var3": {
						"example": "custom variable 3",
						"maxLength": 128,
						"type": "string"
					}
				},
				"required": [
					"amount",
					"currency",
					"description",
					"order_id"
				],
				"type": "object"
			},
			"SubaccountPayout": {
				"additionalProperties": false,
				"properties": {
					"amount": {
						"minimum": 0,
						"type": "integer"
					},
					"checkoutdata": {
						"format": "checkout-data",
						"type": "object"
					},
					"currency": {
						"example": "EUR",
						"maxLength": 3,
						"minLength": 3,
						"type": "string"
					},
					"description": {
						"example": "monthly commission",
						"maxLength": 512,
						"minLength": 2,
						"type": "string"
					},
					"order_id": {
						"example": "fa423fabc31915acd97dew89",
						"maxLength": 128,
						"type": "string"
					},
					"var1": {
						"example": "custom variable 1",
						"maxLength": 128,
						"type": "string"
					},
					"var2": {
						"example": "custom variable 2",
						"maxLength": 128,
						"type": "string"
					},
					"var3": {
						"example": "custom variable 3",
						"maxLength": 128,
						"type": "string"
					}
				},
				"required": [
					"amount",
					"currency",
					"description",
					"order_id"
				],
				"type": "object"
			},
			"Subscription": {
				"additionalProperties": false,
				"properties": {
					"allow_cancel_before_days": {
						"minimum": 0,
						"type": "integer"
					},
					"collecting_flow_id": {
						"minimum": 0,
						"type": "integer"
					},
					"collecting_method": {
						"enum": [
							"charge_automatically",
							"send_invoice"
						],
						"type": "string"
					},
					"current_period_end": {
						"format": "date",
						"type": "string"
					},
					"current_period_start": {
						"format": "date",
						"type": "string"
					},
					"customer_id": {
						"type": "string"
					},
					"delivery_details_id": {
						"type": "string"
					},
					"discount": {
						"properties": {
							"cap": {
								"minimum": 0,
								"type": "number"
							},
							"percent_off": {
								"maximum": 100,
								"minimum": 0,
								"type": "number"
							}
						},
						"type": "object"
					},
					"end_date": {
						"format": "date",
						"type": "string"
					},
					"items": {
						"properties": {
							"amount": {
								"minimum": 0,
								"type": "integer"
							},
							"checkout_options": {
								"properties": {
									"tax_tables": {
										"properties": {
											"alternate": {
												"items": {
													"properties": {
														"name": {
															"type": "string"
														},
														"rules": {
															"items": {
																"properties": {
																	"rate": {
																		"minimum": 0,
																		"type": "number"
																	},
																	"shipping_taxed": {
																		"type": "boolean"
																	}
																},
																"type": "object"
															},
															"type": "array"
														}
													},
													"type": "object"
												},
												"type": "array"
											},
											"default": {
												"properties": {
													"rate": {
														"minimum": 0,
														"type": "number"
													},
													"shipping_taxed": {
														"type": "boolean"
													}
												},
												"type": "object"
											}
										},
										"type": "object"
									}
								},
								"type": "object"
							},
							"currency": {
								"example": "EUR",
								"maxLength": 3,
								"minLength": 3,
								"type": "string"
							},
							"items": {
								"items": {
									"properties": {
										"description": {
											"type": "string"
										},
										"merchant_item_id": {
											"type": "string"
										},
										"name": {
											"type": "string"
										},
										"plan_id": {
											"type": "string"
										},
										"quantity": {
											"minimum": 0,
											"type": "number"
										},
										"tax_table_selector": {
											"type": "string"
										},
										"unit_price": {
											"type": "number"
										},
										"weight": {
											"properties": {
												"unit": {
													"type": "string"
												},
												"value": {
													"minimum": 0,
													"type": "number"
												}
											},
											"type": "object"
										}
									},
									"required": [
										"name",
										"merchant_item_id",
										"quantity",
										"unit_price"
									],
									"type": "object"
								},
								"type": "array"
							}
						},
						"required": [
							"amount",
							"currency"
						],
						"type": "object"
					},
					"max_amount_outstanding": {
						"minimum": 0,
						"type": "number"
					},
					"max_amount_outstanding_currency": {
						"example": "EUR",
						"maxLength": 3,
						"minLength": 3,
						"type": "string"
					},
					"max_orders_outstanding": {
						"minimum": 0,
						"type": "integer"
					},
					"payment_method_id": {
						"type": "string"
					},
					"recurring_interval": {
						"enum": [
							"1 day",
							"1 week",
							"1 mon",
							"1 year"
						],
						"example": "1 mon",
						"type": "string"
					},
					"recurring_interval_count": {
						"minimum": 0,
						"type": "integer"
					},
					"start_date": {
						"format": "date",
						"type": "string"
					},
					"status": {
						"enum": [
							"active",
							"inactive"
						],
						"type": "string"
					}
				},
				"required": [
					"collecting_flow_id",
					"collecting_method",
					"customer_id",
					"delivery_details_id",
					"items",
					"payment_method_id",
					"start_date",
					"status"
				],
				"type": "object"
			},
			"Transaction": {
				"properties": {
					"amount": {
						"example": 100,
						"type": "integer"
					},
					"completed": {
						"format": "datetime",
						"type": "string"
					},
					"costs": {
						"items": {
							"properties": {
								"amount": {
									"type": "integer"
								},
								"description": {
									"type": "string"
								}
							},
							"type": "object"
						},
						"type": "array"
					},
					"created": {
						"format": "datetime",
						"type": "string"
					},
					"currency": {
						"example": "EUR",
						"type": "string"
					},
					"customer": {
						"properties": {
							"email": {
								"type": "string"
							},
							"first_name": {
								"type": "string"
							},
							"iban": {
								"type": "string"
							},
							"last_name": {
								"type": "string"
							}
						},
						"type": "object"
					},
					"debit_credit": {
						"enum": [
							"D",
							"C"
						],
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"financial_status": {
						"example": "completed",
						"type": "string"
					},
					"invoice_id": {
						"type": "string"
					},
					"order_id": {
						"type": "string"
					},
					"payment_method": {
						"example": "VISA",
						"type": "string"
					},
					"site_id": {
						"example": 123,
						"type": "integer"
					},
					"status": {
						"example": "completed",
						"type": "string"
					},
					"transaction_id": {
						"type": "integer"
					},
					"type": {
						"type": "string"
					},
					"updated": {
						"format": "datetime",
						"type": "string"
					},
					"var1": {
						"type": "string"
					},
					"var2": {
						"type": "string"
					},
					"var3": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"Ubo": {
				"additionalProperties": false,
				"properties": {
					"address": {
						"maxLength": 100,
						"type": "string"
					},
					"address_apartment": {
						"maxLength": 15,
						"type": "string"
					},
					"birthday": {
						"format": "yyyy-mm-dd",
						"type": "string"
					},
					"city": {
						"maxLength": 100,
						"type": "string"
					},
					"country": {
						"format": "country-alpha2",
						"type": "string"
					},
					"country_of_birth": {
						"format": "country-alpha2",
						"type": "string"
					},
					"email": {
						"format": "email",
						"maxLength": 100,
						"type": "string"
					},
					"job_title": {
						"maxLength": 100,
						"type": "string"
					},
					"mobile_phone": {
						"maxLength": 25,
						"type": "string"
					},
					"name": {
						"maxLength": 200,
						"type": "string"
					},
					"office_phone": {
						"maxLength": 25,
						"type": "string"
					},
					"percentage": {
						"type": "integer"
					},
					"state": {
						"maxLength": 100,
						"type": "string"
					},
					"title": {
						"enum": [
							"mr",
							"mrs"
						],
						"type": "string"
					},
					"type": {
						"enum": [
							"control_rights",
							"other",
							"shareholder",
							"voting_rights"
						],
						"type": "string"
					},
					"zipcode": {
						"maxLength": 20,
						"type": "string"
					}
				},
				"required": [
					"type",
					"percentage",
					"title",
					"name",
					"birthday",
					"country_of_birth",
					"job_title",
					"email",
					"country"
				],
				"type": "object"
			},
			"ValidationErrorResponse": {
				"properties": {
					"errors": {
						"items": {
							"properties": {
								"attribute": {
									"example": "email",
									"type": "string",
									"description": "Indicates which attributes in the request were invalid."
								},
								"details": {
									"example": "user@example.com",
									"items": {
										"type": "string"
									},
									"type": "array",
									"description": "Specifies the invalid values."
								},
								"message": {
									"example": "User with email already exists",
									"type": "string",
									"description": "Explains the validation error."
								},
								"uri": {
									"example": "#/email",
									"type": "string",
									"description": "Specifies the unique resource indicator of the error."
								}
							},
							"type": "object"
						},
						"type": "array",
						"description": "Identifies the validation errors."
					},
					"message": {
						"example": "Validation failure",
						"type": "string",
						"description": "Validation failure"
					},
					"success": {
						"example": false,
						"type": "boolean",
						"description": "False"
					}
				},
				"type": "object"
			}
		},
		"securitySchemes": {
			"BearerAuth": {
				"scheme": "bearer",
				"type": "http"
			},
			"ApiKeyQuery": {
				"type": "apiKey",
				"name": "api_key",
				"in": "query"
			},
			"ApiKeyHeader": {
				"type": "apiKey",
				"name": "api_key",
				"in": "header"
			}
		}
	},
	"info": {
		"title": "MultiSafepay API",
		"version": "1.0.0",
		"contact": {
			"name": "MultiSafepay Integration Team",
			"url": "https://www.multisafepay.com/contact",
			"email": "integration@multisafepay.com"
		}
	},
	"openapi": "3.0.0",
	"paths": {
		"/accounts": {
			"get": {
				"description": "List all accounts signed up by a partner",
				"operationId": "Partner::ListAccounts",
				"parameters": [],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"items": {
												"additionalProperties": false,
												"properties": {
													"address1": {
														"example": "Jodenbreestraat 4",
														"maxLength": 64,
														"type": "string"
													},
													"address2": {
														"maxLength": 64,
														"type": "string"
													},
													"address3": {
														"maxLength": 64,
														"type": "string"
													},
													"apartment": {
														"example": "2",
														"maxLength": 9,
														"type": "string"
													},
													"city": {
														"example": "Amsterdam",
														"maxLength": 50,
														"type": "string"
													},
													"coc_number": {
														"maxLength": 50,
														"type": "string"
													},
													"company_name": {
														"maxLength": 200,
														"type": "string"
													},
													"country": {
														"example": "NL",
														"format": "country-alpha2",
														"type": "string"
													},
													"email": {
														"example": "merchant@example.com",
														"format": "email",
														"maxLength": 100,
														"type": "string"
													},
													"phone": {
														"maxLength": 15,
														"type": "string"
													},
													"vat_number": {
														"maxLength": 50,
														"type": "string"
													},
													"zipcode": {
														"example": "1011 NK",
														"maxLength": 30,
														"type": "string"
													}
												},
												"required": [
													"company_name",
													"email",
													"country"
												],
												"type": "object"
											},
											"type": "array"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					}
				},
				"summary": "List Accounts (BETA)",
				"tags": [
					"Manage affiliates"
				]
			}
		},
		"/accounts/{account_id}": {
			"get": {
				"description": "Fetch information about an existing account",
				"operationId": "Partner::GetAccount",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "account_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"address1": {
													"example": "Jodenbreestraat 4",
													"maxLength": 64,
													"type": "string"
												},
												"address2": {
													"maxLength": 64,
													"type": "string"
												},
												"address3": {
													"maxLength": 64,
													"type": "string"
												},
												"apartment": {
													"example": "2",
													"maxLength": 9,
													"type": "string"
												},
												"city": {
													"example": "Amsterdam",
													"maxLength": 50,
													"type": "string"
												},
												"coc_number": {
													"maxLength": 50,
													"type": "string"
												},
												"company_name": {
													"maxLength": 200,
													"type": "string"
												},
												"country": {
													"example": "NL",
													"format": "country-alpha2",
													"type": "string"
												},
												"email": {
													"example": "merchant@example.com",
													"format": "email",
													"maxLength": 100,
													"type": "string"
												},
												"phone": {
													"maxLength": 15,
													"type": "string"
												},
												"vat_number": {
													"maxLength": 50,
													"type": "string"
												},
												"zipcode": {
													"example": "1011 NK",
													"maxLength": 30,
													"type": "string"
												}
											},
											"required": [
												"company_name",
												"email",
												"country"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"404": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GenericErrorResponse"
								}
							}
						},
						"description": "Account not found"
					}
				},
				"summary": "Get Account (BETA)",
				"tags": [
					"Manage affiliates"
				]
			},
			"patch": {
				"description": "Update information about an existing merchant account",
				"operationId": "Partner::UpdateAccount",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "account_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"additionalProperties": false,
								"properties": {
									"address1": {
										"example": "Jodenbreestraat 4",
										"maxLength": 64,
										"type": "string"
									},
									"address2": {
										"maxLength": 64,
										"type": "string"
									},
									"address3": {
										"maxLength": 64,
										"type": "string"
									},
									"apartment": {
										"example": "2",
										"maxLength": 9,
										"type": "string"
									},
									"city": {
										"example": "Amsterdam",
										"maxLength": 50,
										"type": "string"
									},
									"coc_number": {
										"maxLength": 50,
										"type": "string"
									},
									"company_name": {
										"maxLength": 200,
										"type": "string"
									},
									"country": {
										"example": "NL",
										"format": "country-alpha2",
										"type": "string"
									},
									"email": {
										"example": "merchant@example.com",
										"format": "email",
										"maxLength": 100,
										"type": "string"
									},
									"phone": {
										"maxLength": 15,
										"type": "string"
									},
									"vat_number": {
										"maxLength": 50,
										"type": "string"
									},
									"zipcode": {
										"example": "1011 NK",
										"maxLength": 30,
										"type": "string"
									}
								},
								"type": "object"
							}
						}
					},
					"description": "",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"address1": {
													"example": "Jodenbreestraat 4",
													"maxLength": 64,
													"type": "string"
												},
												"address2": {
													"maxLength": 64,
													"type": "string"
												},
												"address3": {
													"maxLength": 64,
													"type": "string"
												},
												"apartment": {
													"example": "2",
													"maxLength": 9,
													"type": "string"
												},
												"city": {
													"example": "Amsterdam",
													"maxLength": 50,
													"type": "string"
												},
												"coc_number": {
													"maxLength": 50,
													"type": "string"
												},
												"company_name": {
													"maxLength": 200,
													"type": "string"
												},
												"country": {
													"example": "NL",
													"format": "country-alpha2",
													"type": "string"
												},
												"email": {
													"example": "merchant@example.com",
													"format": "email",
													"maxLength": 100,
													"type": "string"
												},
												"phone": {
													"maxLength": 15,
													"type": "string"
												},
												"vat_number": {
													"maxLength": 50,
													"type": "string"
												},
												"zipcode": {
													"example": "1011 NK",
													"maxLength": 30,
													"type": "string"
												}
											},
											"required": [
												"company_name",
												"email",
												"country"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"404": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GenericErrorResponse"
								}
							}
						},
						"description": "Account not found"
					},
					"422": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						},
						"description": "Validation errors"
					}
				},
				"summary": "Update Account (BETA)",
				"tags": [
					"Manage affiliates"
				]
			}
		},
		"/accounts/{account_id}/balances": {
			"get": {
				"description": "",
				"operationId": "Partner::ListAccountBalances",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "account_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Return results starting from offset position",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"description": "Return results starting from offset position",
							"example": 5,
							"minimum": 0,
							"type": "integer"
						}
					},
					{
						"description": "Limit number of returned results",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"description": "Limit number of returned results",
							"example": 5,
							"maximum": 1000,
							"minimum": 1,
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"items": {
												"properties": {
													"account_id": {
														"type": "integer"
													},
													"amount_available": {
														"type": "integer"
													},
													"amount_reserved": {
														"type": "integer"
													},
													"currency": {
														"example": "EUR",
														"maxLength": 3,
														"minLength": 3,
														"type": "string"
													},
													"id": {
														"example": "Jodenbreestraat 4",
														"maxLength": 64,
														"type": "string"
													},
													"modified": {
														"format": "date",
														"type": "string"
													}
												},
												"type": "object"
											},
											"type": "array"
										},
										"page": {
											"additionalProperties": false,
											"properties": {
												"total": {
													"type": "integer"
												}
											},
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					}
				},
				"summary": "List Account Balances (BETA)",
				"tags": [
					"Manage affiliates"
				]
			}
		},
		"/accounts/{account_id}/bank-accounts": {
			"get": {
				"description": "List all bank accounts linked to a merchant account",
				"operationId": "Partner::ListAccountBankAccounts",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "account_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"items": {
												"additionalProperties": false,
												"properties": {
													"currency": {
														"maxLength": 3,
														"type": "string"
													},
													"holder_name": {
														"maxLength": 40,
														"type": "string"
													},
													"iban": {
														"format": "iban",
														"type": "string"
													}
												},
												"required": [
													"holder_name",
													"iban",
													"currency"
												],
												"type": "object"
											},
											"type": "array"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"404": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GenericErrorResponse"
								}
							}
						},
						"description": "Merchant not found"
					}
				},
				"summary": "List Bank Accounts (BETA)",
				"tags": [
					"Onboard affiliates"
				]
			},
			"post": {
				"description": "Create a bank account",
				"operationId": "Partner::CreateAccountBankAccount",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "account_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"additionalProperties": false,
								"properties": {
									"currency": {
										"maxLength": 3,
										"type": "string"
									},
									"holder_name": {
										"maxLength": 40,
										"type": "string"
									},
									"iban": {
										"format": "iban",
										"type": "string"
									}
								},
								"required": [
									"holder_name",
									"iban",
									"currency"
								],
								"type": "object"
							}
						}
					},
					"description": "",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"currency": {
													"maxLength": 3,
													"type": "string"
												},
												"holder_name": {
													"maxLength": 40,
													"type": "string"
												},
												"iban": {
													"format": "iban",
													"type": "string"
												}
											},
											"required": [
												"holder_name",
												"iban",
												"currency"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"404": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GenericErrorResponse"
								}
							}
						},
						"description": "Account not found"
					},
					"422": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						},
						"description": "Validation errors"
					}
				},
				"summary": "Create a Bank Account (BETA)",
				"tags": [
					"Onboard affiliates"
				]
			}
		},
		"/accounts/{account_id}/charges": {
			"post": {
				"description": "",
				"operationId": "Partner::CreateChargeForSubaccount",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "account_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"additionalProperties": false,
								"properties": {
									"amount": {
										"minimum": 0,
										"type": "integer"
									},
									"checkoutdata": {
										"format": "checkout-data",
										"type": "object"
									},
									"currency": {
										"example": "EUR",
										"maxLength": 3,
										"minLength": 3,
										"type": "string"
									},
									"description": {
										"example": "monthly commission",
										"maxLength": 512,
										"minLength": 2,
										"type": "string"
									},
									"order_id": {
										"example": "fa423fabc31915acd97dew89",
										"maxLength": 128,
										"type": "string"
									},
									"var1": {
										"example": "custom variable 1",
										"maxLength": 128,
										"type": "string"
									},
									"var2": {
										"example": "custom variable 2",
										"maxLength": 128,
										"type": "string"
									},
									"var3": {
										"example": "custom variable 3",
										"maxLength": 128,
										"type": "string"
									}
								},
								"required": [
									"amount",
									"currency",
									"description",
									"order_id"
								],
								"type": "object"
							}
						}
					},
					"description": "",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"amount": {
													"minimum": 0,
													"type": "integer"
												},
												"checkoutdata": {
													"format": "checkout-data",
													"type": "object"
												},
												"currency": {
													"example": "EUR",
													"maxLength": 3,
													"minLength": 3,
													"type": "string"
												},
												"description": {
													"example": "monthly commission",
													"maxLength": 512,
													"minLength": 2,
													"type": "string"
												},
												"order_id": {
													"example": "fa423fabc31915acd97dew89",
													"maxLength": 128,
													"type": "string"
												},
												"var1": {
													"example": "custom variable 1",
													"maxLength": 128,
													"type": "string"
												},
												"var2": {
													"example": "custom variable 2",
													"maxLength": 128,
													"type": "string"
												},
												"var3": {
													"example": "custom variable 3",
													"maxLength": 128,
													"type": "string"
												}
											},
											"required": [
												"amount",
												"currency",
												"description",
												"order_id"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"422": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						},
						"description": "Validation errors"
					}
				},
				"summary": "Charge subaccount (BETA)",
				"tags": [
					"Manage affiliates"
				]
			}
		},
		"/accounts/{account_id}/inquiries": {
			"get": {
				"description": "List inquiries sent out by the screening team (such as requests for documents or missing information)",
				"operationId": "Partner::ListAccountInquiries",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "account_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"items": {
												"additionalProperties": false,
												"properties": {
													"account_id": {
														"example": "1",
														"type": "integer"
													},
													"expected_reply": {
														"description": "Expected contents of the reply: free form text and/or a document",
														"items": {
															"enum": [
																"require_text",
																"allow_text",
																"require_document",
																"allow_document"
															],
															"type": "string"
														},
														"type": "array"
													},
													"id": {
														"example": "fa423fabc31915acd97dew89",
														"maxLength": 128,
														"type": "string"
													}
												},
												"type": "object"
											},
											"type": "array"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"404": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GenericErrorResponse"
								}
							}
						},
						"description": "Account not found"
					}
				},
				"summary": "List Inquiries (BETA)",
				"tags": [
					"Onboarding (BETA)"
				]
			}
		},
		"/accounts/{account_id}/inquiries/{inquiry_id}": {
			"get": {
				"description": "Get a specific inquiry sent out by the screening team (such as requests for documents or missing information); related message(s) - if any - will show up in the includes block",
				"operationId": "Partner::GetAccountInquiry",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "account_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "",
						"in": "path",
						"name": "inquiry_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"items": {
												"additionalProperties": false,
												"properties": {
													"account_id": {
														"example": "1",
														"type": "integer"
													},
													"expected_reply": {
														"description": "Expected contents of the reply: free form text and/or a document",
														"items": {
															"enum": [
																"require_text",
																"allow_text",
																"require_document",
																"allow_document"
															],
															"type": "string"
														},
														"type": "array"
													},
													"id": {
														"example": "fa423fabc31915acd97dew89",
														"maxLength": 128,
														"type": "string"
													}
												},
												"type": "object"
											},
											"type": "array"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"404": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GenericErrorResponse"
								}
							}
						},
						"description": "Inquiry not found"
					}
				},
				"summary": "Get an Inquiry (BETA)",
				"tags": [
					"Onboarding (BETA)"
				]
			}
		},
		"/accounts/{account_id}/messages": {
			"get": {
				"description": "List messages sent out by MSP to a given account",
				"operationId": "Partner::ListAccountMessages",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "account_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"items": {
												"additionalProperties": false,
												"properties": {
													"account_id": {
														"example": "1",
														"type": "integer"
													},
													"delivered": {
														"type": "boolean"
													},
													"email": {
														"type": "string"
													},
													"id": {
														"example": "fa423fabc31915acd97dew89",
														"maxLength": 128,
														"type": "string"
													},
													"mimetype": {
														"maxLength": 50,
														"type": "string"
													},
													"subject": {
														"maxLength": 250,
														"type": "string"
													}
												},
												"type": "object"
											},
											"type": "array"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"404": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GenericErrorResponse"
								}
							}
						},
						"description": "Account not found"
					}
				},
				"summary": "List Messages (BETA)",
				"tags": [
					"Onboarding (BETA)"
				]
			}
		},
		"/accounts/{account_id}/messages/{message_id}": {
			"get": {
				"description": "Get a message sent out by MSP",
				"operationId": "Partner::GetAccountMessage",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "account_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "",
						"in": "path",
						"name": "message_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"account_id": {
													"example": "1",
													"type": "integer"
												},
												"delivered": {
													"type": "boolean"
												},
												"email": {
													"type": "string"
												},
												"id": {
													"example": "fa423fabc31915acd97dew89",
													"maxLength": 128,
													"type": "string"
												},
												"mimetype": {
													"maxLength": 50,
													"type": "string"
												},
												"subject": {
													"maxLength": 250,
													"type": "string"
												}
											},
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"404": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GenericErrorResponse"
								}
							}
						},
						"description": "Message not found"
					}
				},
				"summary": "Get a message (BETA)",
				"tags": [
					"Onboarding (BETA)"
				]
			}
		},
		"/accounts/{account_id}/payouts": {
			"post": {
				"description": "",
				"operationId": "Partner::CreatePayoutForSubaccount",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "account_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"additionalProperties": false,
								"properties": {
									"amount": {
										"minimum": 0,
										"type": "integer"
									},
									"checkoutdata": {
										"format": "checkout-data",
										"type": "object"
									},
									"currency": {
										"example": "EUR",
										"maxLength": 3,
										"minLength": 3,
										"type": "string"
									},
									"description": {
										"example": "monthly commission",
										"maxLength": 512,
										"minLength": 2,
										"type": "string"
									},
									"order_id": {
										"example": "fa423fabc31915acd97dew89",
										"maxLength": 128,
										"type": "string"
									},
									"var1": {
										"example": "custom variable 1",
										"maxLength": 128,
										"type": "string"
									},
									"var2": {
										"example": "custom variable 2",
										"maxLength": 128,
										"type": "string"
									},
									"var3": {
										"example": "custom variable 3",
										"maxLength": 128,
										"type": "string"
									}
								},
								"required": [
									"amount",
									"currency",
									"description",
									"order_id"
								],
								"type": "object"
							}
						}
					},
					"description": "",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"amount": {
													"minimum": 0,
													"type": "integer"
												},
												"checkoutdata": {
													"format": "checkout-data",
													"type": "object"
												},
												"currency": {
													"example": "EUR",
													"maxLength": 3,
													"minLength": 3,
													"type": "string"
												},
												"description": {
													"example": "monthly commission",
													"maxLength": 512,
													"minLength": 2,
													"type": "string"
												},
												"order_id": {
													"example": "fa423fabc31915acd97dew89",
													"maxLength": 128,
													"type": "string"
												},
												"var1": {
													"example": "custom variable 1",
													"maxLength": 128,
													"type": "string"
												},
												"var2": {
													"example": "custom variable 2",
													"maxLength": 128,
													"type": "string"
												},
												"var3": {
													"example": "custom variable 3",
													"maxLength": 128,
													"type": "string"
												}
											},
											"required": [
												"amount",
												"currency",
												"description",
												"order_id"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"422": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						},
						"description": "Validation errors"
					}
				},
				"summary": "Do payout on behalf of a subaccount (BETA)",
				"tags": [
					"Manage affiliates"
				]
			}
		},
		"/accounts/{account_id}/sites": {
			"get": {
				"description": "List all sites belonging to a merchant account",
				"operationId": "Partner::ListAccountSites",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "account_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"items": {
												"additionalProperties": false,
												"properties": {
													"name": {
														"maxLength": 120,
														"type": "string"
													},
													"notification_url": {
														"format": "url",
														"maxLength": 150,
														"type": "string"
													},
													"price_from": {
														"type": "integer"
													},
													"price_till": {
														"type": "integer"
													},
													"support_email": {
														"format": "email",
														"maxLength": 100,
														"type": "string"
													},
													"support_phone": {
														"maxLength": 100,
														"type": "string"
													},
													"url": {
														"format": "url",
														"maxLength": 150,
														"type": "string"
													}
												},
												"required": [
													"name",
													"url"
												],
												"type": "object"
											},
											"type": "array"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					}
				},
				"summary": "List Merchant Account Sites (BETA)",
				"tags": [
					"Onboard affiliates"
				]
			},
			"post": {
				"description": "Create a new site for merchant account",
				"operationId": "Partner::CreateAccountSite",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "account_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"additionalProperties": false,
								"properties": {
									"name": {
										"maxLength": 120,
										"type": "string"
									},
									"notification_url": {
										"format": "url",
										"maxLength": 150,
										"type": "string"
									},
									"price_from": {
										"type": "integer"
									},
									"price_till": {
										"type": "integer"
									},
									"support_email": {
										"format": "email",
										"maxLength": 100,
										"type": "string"
									},
									"support_phone": {
										"maxLength": 100,
										"type": "string"
									},
									"url": {
										"format": "url",
										"maxLength": 150,
										"type": "string"
									}
								},
								"required": [
									"name",
									"url"
								],
								"type": "object"
							}
						}
					},
					"description": "",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"name": {
													"maxLength": 120,
													"type": "string"
												},
												"notification_url": {
													"format": "url",
													"maxLength": 150,
													"type": "string"
												},
												"price_from": {
													"type": "integer"
												},
												"price_till": {
													"type": "integer"
												},
												"support_email": {
													"format": "email",
													"maxLength": 100,
													"type": "string"
												},
												"support_phone": {
													"maxLength": 100,
													"type": "string"
												},
												"url": {
													"format": "url",
													"maxLength": 150,
													"type": "string"
												}
											},
											"required": [
												"name",
												"url"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"422": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						},
						"description": "Validation errors"
					}
				},
				"summary": "Create Account Site (BETA)",
				"tags": [
					"Onboard affiliates"
				]
			}
		},
		"/accounts/{account_id}/ubos": {
			"get": {
				"description": "List all ultimate beneficiary owners for a merchant account",
				"operationId": "Partner::ListAccountUbos",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "account_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"items": {
												"additionalProperties": false,
												"properties": {
													"address": {
														"maxLength": 100,
														"type": "string"
													},
													"address_apartment": {
														"maxLength": 15,
														"type": "string"
													},
													"birthday": {
														"format": "yyyy-mm-dd",
														"type": "string"
													},
													"city": {
														"maxLength": 100,
														"type": "string"
													},
													"country": {
														"format": "country-alpha2",
														"type": "string"
													},
													"country_of_birth": {
														"format": "country-alpha2",
														"type": "string"
													},
													"email": {
														"format": "email",
														"maxLength": 100,
														"type": "string"
													},
													"job_title": {
														"maxLength": 100,
														"type": "string"
													},
													"mobile_phone": {
														"maxLength": 25,
														"type": "string"
													},
													"name": {
														"maxLength": 200,
														"type": "string"
													},
													"office_phone": {
														"maxLength": 25,
														"type": "string"
													},
													"percentage": {
														"type": "integer"
													},
													"state": {
														"maxLength": 100,
														"type": "string"
													},
													"title": {
														"enum": [
															"mr",
															"mrs"
														],
														"type": "string"
													},
													"type": {
														"enum": [
															"control_rights",
															"other",
															"shareholder",
															"voting_rights"
														],
														"type": "string"
													},
													"zipcode": {
														"maxLength": 20,
														"type": "string"
													}
												},
												"required": [
													"type",
													"percentage",
													"title",
													"name",
													"birthday",
													"country_of_birth",
													"job_title",
													"email",
													"country"
												],
												"type": "object"
											},
											"type": "array"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					}
				},
				"summary": "List UBOs (BETA)",
				"tags": [
					"Onboard affiliates"
				]
			},
			"post": {
				"description": "Create an ultimate beneficiary owner",
				"operationId": "Partner::CreateAccountUbo",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "account_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"additionalProperties": false,
								"properties": {
									"address": {
										"maxLength": 100,
										"type": "string"
									},
									"address_apartment": {
										"maxLength": 15,
										"type": "string"
									},
									"birthday": {
										"format": "yyyy-mm-dd",
										"type": "string"
									},
									"city": {
										"maxLength": 100,
										"type": "string"
									},
									"country": {
										"format": "country-alpha2",
										"type": "string"
									},
									"country_of_birth": {
										"format": "country-alpha2",
										"type": "string"
									},
									"email": {
										"format": "email",
										"maxLength": 100,
										"type": "string"
									},
									"job_title": {
										"maxLength": 100,
										"type": "string"
									},
									"mobile_phone": {
										"maxLength": 25,
										"type": "string"
									},
									"name": {
										"maxLength": 200,
										"type": "string"
									},
									"office_phone": {
										"maxLength": 25,
										"type": "string"
									},
									"percentage": {
										"type": "integer"
									},
									"state": {
										"maxLength": 100,
										"type": "string"
									},
									"title": {
										"enum": [
											"mr",
											"mrs"
										],
										"type": "string"
									},
									"type": {
										"enum": [
											"control_rights",
											"other",
											"shareholder",
											"voting_rights"
										],
										"type": "string"
									},
									"zipcode": {
										"maxLength": 20,
										"type": "string"
									}
								},
								"required": [
									"type",
									"percentage",
									"title",
									"name",
									"birthday",
									"country_of_birth",
									"job_title",
									"email",
									"country"
								],
								"type": "object"
							}
						}
					},
					"description": "",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"address": {
													"maxLength": 100,
													"type": "string"
												},
												"address_apartment": {
													"maxLength": 15,
													"type": "string"
												},
												"birthday": {
													"format": "yyyy-mm-dd",
													"type": "string"
												},
												"city": {
													"maxLength": 100,
													"type": "string"
												},
												"country": {
													"format": "country-alpha2",
													"type": "string"
												},
												"country_of_birth": {
													"format": "country-alpha2",
													"type": "string"
												},
												"email": {
													"format": "email",
													"maxLength": 100,
													"type": "string"
												},
												"job_title": {
													"maxLength": 100,
													"type": "string"
												},
												"mobile_phone": {
													"maxLength": 25,
													"type": "string"
												},
												"name": {
													"maxLength": 200,
													"type": "string"
												},
												"office_phone": {
													"maxLength": 25,
													"type": "string"
												},
												"percentage": {
													"type": "integer"
												},
												"state": {
													"maxLength": 100,
													"type": "string"
												},
												"title": {
													"enum": [
														"mr",
														"mrs"
													],
													"type": "string"
												},
												"type": {
													"enum": [
														"control_rights",
														"other",
														"shareholder",
														"voting_rights"
													],
													"type": "string"
												},
												"zipcode": {
													"maxLength": 20,
													"type": "string"
												}
											},
											"required": [
												"type",
												"percentage",
												"title",
												"name",
												"birthday",
												"country_of_birth",
												"job_title",
												"email",
												"country"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"404": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GenericErrorResponse"
								}
							}
						},
						"description": "Account not found"
					},
					"422": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						},
						"description": "Validation errors"
					}
				},
				"summary": "Create a UBO (BETA)",
				"tags": [
					"Onboard affiliates"
				]
			}
		},
		"/bank-accounts/{bankaccount_id}": {
			"get": {
				"description": "Fetch information about an existing bank account",
				"operationId": "GetBankAccount",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "bankaccount_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"currency": {
													"maxLength": 3,
													"type": "string"
												},
												"holder_name": {
													"maxLength": 40,
													"type": "string"
												},
												"iban": {
													"format": "iban",
													"type": "string"
												}
											},
											"required": [
												"holder_name",
												"iban",
												"currency"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"404": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GenericErrorResponse"
								}
							}
						},
						"description": "Bank account not found"
					}
				},
				"summary": "Get Bank Account (BETA)",
				"tags": [
					"Onboard affiliates"
				]
			}
		},
		"/bank-accounts/{bankaccount_id}/bank-statements": {
			"get": {
				"description": "List all bank statements linked to a bank account",
				"operationId": "ListBankStatements",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "bankaccount_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"items": {
												"additionalProperties": false,
												"properties": {
													"encoded_content": {
														"format": "base64-encoded-content",
														"type": "string"
													},
													"filename": {
														"example": "bank-statement.pdf",
														"maxLength": 250,
														"type": "string"
													},
													"mime_type": {
														"enum": [
															"application/pdf",
															"image/jpeg",
															"image/png"
														],
														"type": "string"
													}
												},
												"required": [
													"filename",
													"mime_type",
													"encoded_content"
												],
												"type": "object"
											},
											"type": "array"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"404": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GenericErrorResponse"
								}
							}
						},
						"description": "Bank account not found"
					}
				},
				"summary": "List Bank Statements (BETA)",
				"tags": [
					"Onboard affiliates"
				]
			},
			"post": {
				"description": "Upload a bank statement for a previously created bank account",
				"operationId": "CreateBankStatement",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "bankaccount_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"additionalProperties": false,
								"properties": {
									"encoded_content": {
										"format": "base64-encoded-content",
										"type": "string"
									},
									"filename": {
										"example": "bank-statement.pdf",
										"maxLength": 250,
										"type": "string"
									},
									"mime_type": {
										"enum": [
											"application/pdf",
											"image/jpeg",
											"image/png"
										],
										"type": "string"
									}
								},
								"required": [
									"filename",
									"mime_type",
									"encoded_content"
								],
								"type": "object"
							}
						}
					},
					"description": "",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"encoded_content": {
													"format": "base64-encoded-content",
													"type": "string"
												},
												"filename": {
													"example": "bank-statement.pdf",
													"maxLength": 250,
													"type": "string"
												},
												"mime_type": {
													"enum": [
														"application/pdf",
														"image/jpeg",
														"image/png"
													],
													"type": "string"
												}
											},
											"required": [
												"filename",
												"mime_type",
												"encoded_content"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"404": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GenericErrorResponse"
								}
							}
						},
						"description": "Bank account not found"
					},
					"422": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						},
						"description": "Validation errors"
					}
				},
				"summary": "Create a Bank Statement (BETA)",
				"tags": [
					"Onboard affiliates"
				]
			}
		},
		"/bank-accounts/{bankaccount_id}/payment-links": {
			"post": {
				"description": "Create a payment link for a refundable 1 EUR transfer confirming bank account ownership",
				"operationId": "CreatePaymentLink",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "bankaccount_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"properties": {
												"paymentlink": {
													"properties": {
														"bankaccount_id": {
															"type": "string"
														},
														"payment_link": {
															"type": "string"
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"404": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GenericErrorResponse"
								}
							}
						},
						"description": "Bank account not found"
					},
					"422": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						},
						"description": "Validation errors"
					}
				},
				"summary": "Create a Payment Link (BETA)",
				"tags": [
					"Onboard affiliates"
				]
			}
		},
		"/bank-statements/{bankstatement_id}": {
			"get": {
				"description": "Fetch information about an uploaded bank statement",
				"operationId": "GetBankStatement",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "bankstatement_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"encoded_content": {
													"format": "base64-encoded-content",
													"type": "string"
												},
												"filename": {
													"example": "bank-statement.pdf",
													"maxLength": 250,
													"type": "string"
												},
												"mime_type": {
													"enum": [
														"application/pdf",
														"image/jpeg",
														"image/png"
													],
													"type": "string"
												}
											},
											"required": [
												"filename",
												"mime_type",
												"encoded_content"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"404": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GenericErrorResponse"
								}
							}
						},
						"description": "Bank statement not found"
					}
				},
				"summary": "Get Bank Statement (BETA)",
				"tags": [
					"Onboard affiliates"
				]
			}
		},
		"/creditcard/bin": {
			"get": {
				"description": "",
				"operationId": "CreditCard::Bin",
				"parameters": [
					{
						"description": "",
						"in": "query",
						"name": "bin",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"properties": {
												"card_brand": {
													"type": "string"
												},
												"card_number_length": {
													"properties": {
														"max": {
															"type": "integer"
														},
														"min": {
															"type": "integer"
														}
													},
													"type": "object"
												},
												"cvv_required": {
													"type": "boolean"
												},
												"payment_type": {
													"type": "string"
												}
											},
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					}
				},
				"summary": "Credit card info by BIN",
				"tags": [
					"Credit Cards"
				]
			}
		},
		"/customers": {
			"get": {
				"description": "",
				"operationId": "ListCustomers",
				"parameters": [
					{
						"description": "Return results starting from offset position",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"description": "Return results starting from offset position",
							"example": 5,
							"minimum": 0,
							"type": "integer"
						}
					},
					{
						"description": "Limit number of returned results",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"description": "Limit number of returned results",
							"example": 5,
							"maximum": 1000,
							"minimum": 1,
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"items": {
												"additionalProperties": false,
												"properties": {
													"address1": {
														"example": "Main ave.",
														"maxLength": 64,
														"type": "string"
													},
													"address2": {
														"maxLength": 64,
														"type": "string"
													},
													"address3": {
														"maxLength": 64,
														"type": "string"
													},
													"birthday": {
														"format": "date",
														"type": "string"
													},
													"brand": {
														"maxLength": 10,
														"type": "string"
													},
													"city": {
														"example": "Amsterdam",
														"maxLength": 50,
														"type": "string"
													},
													"country": {
														"example": "NL",
														"format": "country-alpha2",
														"type": "string"
													},
													"email": {
														"format": "email",
														"type": "string"
													},
													"first_name": {
														"example": "John",
														"maxLength": 25,
														"type": "string"
													},
													"forwarded_ip": {
														"format": "ipv4",
														"type": "string"
													},
													"gender": {
														"example": "M",
														"maxLength": 1,
														"type": "string"
													},
													"house_number": {
														"example": "1",
														"maxLength": 10,
														"type": "string"
													},
													"ip_address": {
														"format": "ipv4",
														"type": "string"
													},
													"last_name": {
														"example": "Doe",
														"maxLength": 25,
														"type": "string"
													},
													"locale": {
														"example": "NL",
														"maxLength": 2,
														"minLength": 2,
														"type": "string"
													},
													"mobile_phone": {
														"maxLength": 24,
														"type": "string"
													},
													"nickname": {
														"example": "johnny",
														"maxLength": 30,
														"type": "string"
													},
													"phone": {
														"maxLength": 24,
														"type": "string"
													},
													"prefix": {
														"maxLength": 10,
														"type": "string"
													},
													"state": {
														"maxLength": 6,
														"type": "string"
													},
													"title": {
														"example": "Mr",
														"maxLength": 10,
														"type": "string"
													},
													"zip_code": {
														"example": "AB1234",
														"maxLength": 10,
														"type": "string"
													}
												},
												"required": [
													"address1",
													"brand",
													"city",
													"country",
													"email",
													"first_name",
													"house_number",
													"last_name",
													"locale",
													"zip_code"
												],
												"type": "object"
											},
											"type": "array"
										},
										"page": {
											"additionalProperties": false,
											"properties": {
												"total": {
													"type": "integer"
												}
											},
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					}
				},
				"summary": "List Customers (BETA)",
				"tags": [
					"Customers"
				]
			},
			"post": {
				"description": "Create a new customer",
				"operationId": "CreateCustomer",
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"additionalProperties": false,
								"properties": {
									"address1": {
										"example": "Main ave.",
										"maxLength": 64,
										"type": "string"
									},
									"address2": {
										"maxLength": 64,
										"type": "string"
									},
									"address3": {
										"maxLength": 64,
										"type": "string"
									},
									"birthday": {
										"format": "date",
										"type": "string"
									},
									"brand": {
										"maxLength": 10,
										"type": "string"
									},
									"city": {
										"example": "Amsterdam",
										"maxLength": 50,
										"type": "string"
									},
									"country": {
										"example": "NL",
										"format": "country-alpha2",
										"type": "string"
									},
									"email": {
										"format": "email",
										"type": "string"
									},
									"first_name": {
										"example": "John",
										"maxLength": 25,
										"type": "string"
									},
									"forwarded_ip": {
										"format": "ipv4",
										"type": "string"
									},
									"gender": {
										"example": "M",
										"maxLength": 1,
										"type": "string"
									},
									"house_number": {
										"example": "1",
										"maxLength": 10,
										"type": "string"
									},
									"ip_address": {
										"format": "ipv4",
										"type": "string"
									},
									"last_name": {
										"example": "Doe",
										"maxLength": 25,
										"type": "string"
									},
									"locale": {
										"example": "NL",
										"maxLength": 2,
										"minLength": 2,
										"type": "string"
									},
									"mobile_phone": {
										"maxLength": 24,
										"type": "string"
									},
									"nickname": {
										"example": "johnny",
										"maxLength": 30,
										"type": "string"
									},
									"phone": {
										"maxLength": 24,
										"type": "string"
									},
									"prefix": {
										"maxLength": 10,
										"type": "string"
									},
									"state": {
										"maxLength": 6,
										"type": "string"
									},
									"title": {
										"example": "Mr",
										"maxLength": 10,
										"type": "string"
									},
									"zip_code": {
										"example": "AB1234",
										"maxLength": 10,
										"type": "string"
									}
								},
								"required": [
									"address1",
									"brand",
									"city",
									"country",
									"email",
									"first_name",
									"house_number",
									"last_name",
									"locale",
									"zip_code"
								],
								"type": "object"
							}
						}
					},
					"description": "",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"address1": {
													"example": "Main ave.",
													"maxLength": 64,
													"type": "string"
												},
												"address2": {
													"maxLength": 64,
													"type": "string"
												},
												"address3": {
													"maxLength": 64,
													"type": "string"
												},
												"birthday": {
													"format": "date",
													"type": "string"
												},
												"brand": {
													"maxLength": 10,
													"type": "string"
												},
												"city": {
													"example": "Amsterdam",
													"maxLength": 50,
													"type": "string"
												},
												"country": {
													"example": "NL",
													"format": "country-alpha2",
													"type": "string"
												},
												"email": {
													"format": "email",
													"type": "string"
												},
												"first_name": {
													"example": "John",
													"maxLength": 25,
													"type": "string"
												},
												"forwarded_ip": {
													"format": "ipv4",
													"type": "string"
												},
												"gender": {
													"example": "M",
													"maxLength": 1,
													"type": "string"
												},
												"house_number": {
													"example": "1",
													"maxLength": 10,
													"type": "string"
												},
												"ip_address": {
													"format": "ipv4",
													"type": "string"
												},
												"last_name": {
													"example": "Doe",
													"maxLength": 25,
													"type": "string"
												},
												"locale": {
													"example": "NL",
													"maxLength": 2,
													"minLength": 2,
													"type": "string"
												},
												"mobile_phone": {
													"maxLength": 24,
													"type": "string"
												},
												"nickname": {
													"example": "johnny",
													"maxLength": 30,
													"type": "string"
												},
												"phone": {
													"maxLength": 24,
													"type": "string"
												},
												"prefix": {
													"maxLength": 10,
													"type": "string"
												},
												"state": {
													"maxLength": 6,
													"type": "string"
												},
												"title": {
													"example": "Mr",
													"maxLength": 10,
													"type": "string"
												},
												"zip_code": {
													"example": "AB1234",
													"maxLength": 10,
													"type": "string"
												}
											},
											"required": [
												"address1",
												"brand",
												"city",
												"country",
												"email",
												"first_name",
												"house_number",
												"last_name",
												"locale",
												"zip_code"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"422": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						},
						"description": "Validation errors"
					}
				},
				"summary": "Create Customer (BETA)",
				"tags": [
					"Customers"
				]
			}
		},
		"/customers/{customer_id}": {
			"get": {
				"description": "Get customer by id",
				"operationId": "GetCustomer",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "customer_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"address1": {
													"example": "Main ave.",
													"maxLength": 64,
													"type": "string"
												},
												"address2": {
													"maxLength": 64,
													"type": "string"
												},
												"address3": {
													"maxLength": 64,
													"type": "string"
												},
												"birthday": {
													"format": "date",
													"type": "string"
												},
												"brand": {
													"maxLength": 10,
													"type": "string"
												},
												"city": {
													"example": "Amsterdam",
													"maxLength": 50,
													"type": "string"
												},
												"country": {
													"example": "NL",
													"format": "country-alpha2",
													"type": "string"
												},
												"email": {
													"format": "email",
													"type": "string"
												},
												"first_name": {
													"example": "John",
													"maxLength": 25,
													"type": "string"
												},
												"forwarded_ip": {
													"format": "ipv4",
													"type": "string"
												},
												"gender": {
													"example": "M",
													"maxLength": 1,
													"type": "string"
												},
												"house_number": {
													"example": "1",
													"maxLength": 10,
													"type": "string"
												},
												"ip_address": {
													"format": "ipv4",
													"type": "string"
												},
												"last_name": {
													"example": "Doe",
													"maxLength": 25,
													"type": "string"
												},
												"locale": {
													"example": "NL",
													"maxLength": 2,
													"minLength": 2,
													"type": "string"
												},
												"mobile_phone": {
													"maxLength": 24,
													"type": "string"
												},
												"nickname": {
													"example": "johnny",
													"maxLength": 30,
													"type": "string"
												},
												"phone": {
													"maxLength": 24,
													"type": "string"
												},
												"prefix": {
													"maxLength": 10,
													"type": "string"
												},
												"state": {
													"maxLength": 6,
													"type": "string"
												},
												"title": {
													"example": "Mr",
													"maxLength": 10,
													"type": "string"
												},
												"zip_code": {
													"example": "AB1234",
													"maxLength": 10,
													"type": "string"
												}
											},
											"required": [
												"address1",
												"brand",
												"city",
												"country",
												"email",
												"first_name",
												"house_number",
												"last_name",
												"locale",
												"zip_code"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"404": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GenericErrorResponse"
								}
							}
						},
						"description": "Customer not found"
					}
				},
				"summary": "Get Customer (BETA)",
				"tags": [
					"Customers"
				]
			},
			"patch": {
				"description": "",
				"operationId": "UpdateCustomer",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "customer_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"additionalProperties": false,
								"properties": {
									"address1": {
										"example": "Main ave.",
										"maxLength": 64,
										"type": "string"
									},
									"address2": {
										"maxLength": 64,
										"type": "string"
									},
									"address3": {
										"maxLength": 64,
										"type": "string"
									},
									"birthday": {
										"format": "date",
										"type": "string"
									},
									"brand": {
										"maxLength": 10,
										"type": "string"
									},
									"city": {
										"example": "Amsterdam",
										"maxLength": 50,
										"type": "string"
									},
									"country": {
										"example": "NL",
										"format": "country-alpha2",
										"type": "string"
									},
									"email": {
										"format": "email",
										"type": "string"
									},
									"first_name": {
										"example": "John",
										"maxLength": 25,
										"type": "string"
									},
									"forwarded_ip": {
										"format": "ipv4",
										"type": "string"
									},
									"gender": {
										"example": "M",
										"maxLength": 1,
										"type": "string"
									},
									"house_number": {
										"example": "1",
										"maxLength": 10,
										"type": "string"
									},
									"ip_address": {
										"format": "ipv4",
										"type": "string"
									},
									"last_name": {
										"example": "Doe",
										"maxLength": 25,
										"type": "string"
									},
									"locale": {
										"example": "NL",
										"maxLength": 2,
										"minLength": 2,
										"type": "string"
									},
									"mobile_phone": {
										"maxLength": 24,
										"type": "string"
									},
									"nickname": {
										"example": "johnny",
										"maxLength": 30,
										"type": "string"
									},
									"phone": {
										"maxLength": 24,
										"type": "string"
									},
									"prefix": {
										"maxLength": 10,
										"type": "string"
									},
									"state": {
										"maxLength": 6,
										"type": "string"
									},
									"title": {
										"example": "Mr",
										"maxLength": 10,
										"type": "string"
									},
									"zip_code": {
										"example": "AB1234",
										"maxLength": 10,
										"type": "string"
									}
								},
								"type": "object"
							}
						}
					},
					"description": "",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"address1": {
													"example": "Main ave.",
													"maxLength": 64,
													"type": "string"
												},
												"address2": {
													"maxLength": 64,
													"type": "string"
												},
												"address3": {
													"maxLength": 64,
													"type": "string"
												},
												"birthday": {
													"format": "date",
													"type": "string"
												},
												"brand": {
													"maxLength": 10,
													"type": "string"
												},
												"city": {
													"example": "Amsterdam",
													"maxLength": 50,
													"type": "string"
												},
												"country": {
													"example": "NL",
													"format": "country-alpha2",
													"type": "string"
												},
												"email": {
													"format": "email",
													"type": "string"
												},
												"first_name": {
													"example": "John",
													"maxLength": 25,
													"type": "string"
												},
												"forwarded_ip": {
													"format": "ipv4",
													"type": "string"
												},
												"gender": {
													"example": "M",
													"maxLength": 1,
													"type": "string"
												},
												"house_number": {
													"example": "1",
													"maxLength": 10,
													"type": "string"
												},
												"ip_address": {
													"format": "ipv4",
													"type": "string"
												},
												"last_name": {
													"example": "Doe",
													"maxLength": 25,
													"type": "string"
												},
												"locale": {
													"example": "NL",
													"maxLength": 2,
													"minLength": 2,
													"type": "string"
												},
												"mobile_phone": {
													"maxLength": 24,
													"type": "string"
												},
												"nickname": {
													"example": "johnny",
													"maxLength": 30,
													"type": "string"
												},
												"phone": {
													"maxLength": 24,
													"type": "string"
												},
												"prefix": {
													"maxLength": 10,
													"type": "string"
												},
												"state": {
													"maxLength": 6,
													"type": "string"
												},
												"title": {
													"example": "Mr",
													"maxLength": 10,
													"type": "string"
												},
												"zip_code": {
													"example": "AB1234",
													"maxLength": 10,
													"type": "string"
												}
											},
											"required": [
												"address1",
												"brand",
												"city",
												"country",
												"email",
												"first_name",
												"house_number",
												"last_name",
												"locale",
												"zip_code"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"422": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						},
						"description": "Validation errors"
					}
				},
				"summary": "Update Customer (BETA)",
				"tags": [
					"Customers"
				]
			}
		},
		"/customers/{customer_id}/delivery-details": {
			"get": {
				"description": "",
				"operationId": "ListDeliveryDetails",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "customer_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"items": {
												"additionalProperties": false,
												"properties": {
													"address1": {
														"maxLength": 64,
														"type": "string"
													},
													"address2": {
														"maxLength": 64,
														"type": "string"
													},
													"address3": {
														"maxLength": 64,
														"type": "string"
													},
													"city": {
														"maxLength": 50,
														"type": "string"
													},
													"company_name": {
														"maxLength": 50,
														"type": "string"
													},
													"company_registration_number": {
														"maxLength": 25,
														"type": "string"
													},
													"country": {
														"format": "country-alpha2",
														"type": "string"
													},
													"email": {
														"format": "email",
														"type": "string"
													},
													"favorite": {
														"type": "boolean"
													},
													"first_name": {
														"maxLength": 25,
														"type": "string"
													},
													"house_number": {
														"maxLength": 10,
														"type": "string"
													},
													"last_name": {
														"maxLength": 25,
														"type": "string"
													},
													"mobile_phone": {
														"maxLength": 25,
														"type": "string"
													},
													"phone": {
														"maxLength": 25,
														"type": "string"
													},
													"status": {
														"enum": [
															"active",
															"disabled"
														],
														"type": "string"
													},
													"title": {
														"maxLength": 15,
														"type": "string"
													},
													"zip_code": {
														"maxLength": 10,
														"type": "string"
													}
												},
												"required": [
													"address1",
													"city",
													"country",
													"first_name",
													"house_number",
													"last_name",
													"status",
													"zip_code"
												],
												"type": "object"
											},
											"type": "array"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					}
				},
				"summary": "List Delivery Details (BETA)",
				"tags": [
					"Customers"
				]
			},
			"post": {
				"description": "",
				"operationId": "CreateDeliveryDetails",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "customer_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"additionalProperties": false,
								"properties": {
									"address1": {
										"maxLength": 64,
										"type": "string"
									},
									"address2": {
										"maxLength": 64,
										"type": "string"
									},
									"address3": {
										"maxLength": 64,
										"type": "string"
									},
									"city": {
										"maxLength": 50,
										"type": "string"
									},
									"company_name": {
										"maxLength": 50,
										"type": "string"
									},
									"company_registration_number": {
										"maxLength": 25,
										"type": "string"
									},
									"country": {
										"format": "country-alpha2",
										"type": "string"
									},
									"email": {
										"format": "email",
										"type": "string"
									},
									"favorite": {
										"type": "boolean"
									},
									"first_name": {
										"maxLength": 25,
										"type": "string"
									},
									"house_number": {
										"maxLength": 10,
										"type": "string"
									},
									"last_name": {
										"maxLength": 25,
										"type": "string"
									},
									"mobile_phone": {
										"maxLength": 25,
										"type": "string"
									},
									"phone": {
										"maxLength": 25,
										"type": "string"
									},
									"status": {
										"enum": [
											"active",
											"disabled"
										],
										"type": "string"
									},
									"title": {
										"maxLength": 15,
										"type": "string"
									},
									"zip_code": {
										"maxLength": 10,
										"type": "string"
									}
								},
								"required": [
									"address1",
									"city",
									"country",
									"first_name",
									"house_number",
									"last_name",
									"status",
									"zip_code"
								],
								"type": "object"
							}
						}
					},
					"description": "",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"address1": {
													"maxLength": 64,
													"type": "string"
												},
												"address2": {
													"maxLength": 64,
													"type": "string"
												},
												"address3": {
													"maxLength": 64,
													"type": "string"
												},
												"city": {
													"maxLength": 50,
													"type": "string"
												},
												"company_name": {
													"maxLength": 50,
													"type": "string"
												},
												"company_registration_number": {
													"maxLength": 25,
													"type": "string"
												},
												"country": {
													"format": "country-alpha2",
													"type": "string"
												},
												"email": {
													"format": "email",
													"type": "string"
												},
												"favorite": {
													"type": "boolean"
												},
												"first_name": {
													"maxLength": 25,
													"type": "string"
												},
												"house_number": {
													"maxLength": 10,
													"type": "string"
												},
												"last_name": {
													"maxLength": 25,
													"type": "string"
												},
												"mobile_phone": {
													"maxLength": 25,
													"type": "string"
												},
												"phone": {
													"maxLength": 25,
													"type": "string"
												},
												"status": {
													"enum": [
														"active",
														"disabled"
													],
													"type": "string"
												},
												"title": {
													"maxLength": 15,
													"type": "string"
												},
												"zip_code": {
													"maxLength": 10,
													"type": "string"
												}
											},
											"required": [
												"address1",
												"city",
												"country",
												"first_name",
												"house_number",
												"last_name",
												"status",
												"zip_code"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"422": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						},
						"description": "Validation errors"
					}
				},
				"summary": "Create Delivery Details (BETA)",
				"tags": [
					"Customers"
				]
			}
		},
		"/customers/{customer_id}/payment-methods": {
			"get": {
				"description": "",
				"operationId": "ListCustomerPaymentMethods",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "customer_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"items": {
												"additionalProperties": false,
												"oneOf": [
													{
														"properties": {
															"type": {
																"enum": [
																	"direct_debit"
																]
															}
														},
														"required": [
															"direct_debit"
														]
													}
												],
												"properties": {
													"direct_debit": {
														"additionalProperties": false,
														"properties": {
															"bic": {
																"type": "string"
															},
															"holder_name": {
																"type": "string"
															},
															"iban": {
																"type": "string"
															}
														},
														"required": [
															"holder_name",
															"iban",
															"bic"
														],
														"type": "object"
													},
													"status": {
														"enum": [
															"active"
														],
														"type": "string"
													},
													"type": {
														"enum": [
															"direct_debit"
														],
														"type": "string"
													}
												},
												"required": [
													"type",
													"status"
												],
												"type": "object"
											},
											"type": "array"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					}
				},
				"summary": "List Payment Methods (BETA)",
				"tags": [
					"Customers"
				]
			},
			"post": {
				"description": "",
				"operationId": "CreateCustomerPaymentMethod",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "customer_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"additionalProperties": false,
								"oneOf": [
									{
										"properties": {
											"type": {
												"enum": [
													"direct_debit"
												]
											}
										},
										"required": [
											"direct_debit"
										]
									}
								],
								"properties": {
									"direct_debit": {
										"additionalProperties": false,
										"properties": {
											"bic": {
												"type": "string"
											},
											"holder_name": {
												"type": "string"
											},
											"iban": {
												"type": "string"
											}
										},
										"required": [
											"holder_name",
											"iban",
											"bic"
										],
										"type": "object"
									},
									"status": {
										"enum": [
											"active"
										],
										"type": "string"
									},
									"type": {
										"enum": [
											"direct_debit"
										],
										"type": "string"
									}
								},
								"required": [
									"type",
									"status"
								],
								"type": "object"
							}
						}
					},
					"description": "",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"oneOf": [
												{
													"properties": {
														"type": {
															"enum": [
																"direct_debit"
															]
														}
													},
													"required": [
														"direct_debit"
													]
												}
											],
											"properties": {
												"direct_debit": {
													"additionalProperties": false,
													"properties": {
														"bic": {
															"type": "string"
														},
														"holder_name": {
															"type": "string"
														},
														"iban": {
															"type": "string"
														}
													},
													"required": [
														"holder_name",
														"iban",
														"bic"
													],
													"type": "object"
												},
												"status": {
													"enum": [
														"active"
													],
													"type": "string"
												},
												"type": {
													"enum": [
														"direct_debit"
													],
													"type": "string"
												}
											},
											"required": [
												"type",
												"status"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"422": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						},
						"description": "Validation errors"
					}
				},
				"summary": "Create Payment Method (BETA)",
				"tags": [
					"Customers"
				]
			}
		},
		"/delivery-details/{delivery_details_id}": {
			"get": {
				"description": "",
				"operationId": "GetDeliveryDetails",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "delivery_details_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"address1": {
													"maxLength": 64,
													"type": "string"
												},
												"address2": {
													"maxLength": 64,
													"type": "string"
												},
												"address3": {
													"maxLength": 64,
													"type": "string"
												},
												"city": {
													"maxLength": 50,
													"type": "string"
												},
												"company_name": {
													"maxLength": 50,
													"type": "string"
												},
												"company_registration_number": {
													"maxLength": 25,
													"type": "string"
												},
												"country": {
													"format": "country-alpha2",
													"type": "string"
												},
												"email": {
													"format": "email",
													"type": "string"
												},
												"favorite": {
													"type": "boolean"
												},
												"first_name": {
													"maxLength": 25,
													"type": "string"
												},
												"house_number": {
													"maxLength": 10,
													"type": "string"
												},
												"last_name": {
													"maxLength": 25,
													"type": "string"
												},
												"mobile_phone": {
													"maxLength": 25,
													"type": "string"
												},
												"phone": {
													"maxLength": 25,
													"type": "string"
												},
												"status": {
													"enum": [
														"active",
														"disabled"
													],
													"type": "string"
												},
												"title": {
													"maxLength": 15,
													"type": "string"
												},
												"zip_code": {
													"maxLength": 10,
													"type": "string"
												}
											},
											"required": [
												"address1",
												"city",
												"country",
												"first_name",
												"house_number",
												"last_name",
												"status",
												"zip_code"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"404": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GenericErrorResponse"
								}
							}
						},
						"description": "Delivery details not found"
					}
				},
				"summary": "Get Delivery Details (BETA)",
				"tags": [
					"Customers"
				]
			},
			"patch": {
				"description": "",
				"operationId": "UpdateDeliveryDetails",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "delivery_details_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"additionalProperties": false,
								"properties": {
									"address1": {
										"maxLength": 64,
										"type": "string"
									},
									"address2": {
										"maxLength": 64,
										"type": "string"
									},
									"address3": {
										"maxLength": 64,
										"type": "string"
									},
									"city": {
										"maxLength": 50,
										"type": "string"
									},
									"company_name": {
										"maxLength": 50,
										"type": "string"
									},
									"company_registration_number": {
										"maxLength": 25,
										"type": "string"
									},
									"country": {
										"format": "country-alpha2",
										"type": "string"
									},
									"email": {
										"format": "email",
										"type": "string"
									},
									"favorite": {
										"type": "boolean"
									},
									"first_name": {
										"maxLength": 25,
										"type": "string"
									},
									"house_number": {
										"maxLength": 10,
										"type": "string"
									},
									"last_name": {
										"maxLength": 25,
										"type": "string"
									},
									"mobile_phone": {
										"maxLength": 25,
										"type": "string"
									},
									"phone": {
										"maxLength": 25,
										"type": "string"
									},
									"status": {
										"enum": [
											"active",
											"disabled"
										],
										"type": "string"
									},
									"title": {
										"maxLength": 15,
										"type": "string"
									},
									"zip_code": {
										"maxLength": 10,
										"type": "string"
									}
								},
								"type": "object"
							}
						}
					},
					"description": "",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"address1": {
													"maxLength": 64,
													"type": "string"
												},
												"address2": {
													"maxLength": 64,
													"type": "string"
												},
												"address3": {
													"maxLength": 64,
													"type": "string"
												},
												"city": {
													"maxLength": 50,
													"type": "string"
												},
												"company_name": {
													"maxLength": 50,
													"type": "string"
												},
												"company_registration_number": {
													"maxLength": 25,
													"type": "string"
												},
												"country": {
													"format": "country-alpha2",
													"type": "string"
												},
												"email": {
													"format": "email",
													"type": "string"
												},
												"favorite": {
													"type": "boolean"
												},
												"first_name": {
													"maxLength": 25,
													"type": "string"
												},
												"house_number": {
													"maxLength": 10,
													"type": "string"
												},
												"last_name": {
													"maxLength": 25,
													"type": "string"
												},
												"mobile_phone": {
													"maxLength": 25,
													"type": "string"
												},
												"phone": {
													"maxLength": 25,
													"type": "string"
												},
												"status": {
													"enum": [
														"active",
														"disabled"
													],
													"type": "string"
												},
												"title": {
													"maxLength": 15,
													"type": "string"
												},
												"zip_code": {
													"maxLength": 10,
													"type": "string"
												}
											},
											"required": [
												"address1",
												"city",
												"country",
												"first_name",
												"house_number",
												"last_name",
												"status",
												"zip_code"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"422": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						},
						"description": "Validation errors"
					}
				},
				"summary": "Update Delivery Details (BETA)",
				"tags": [
					"Customers"
				]
			}
		},
		"/identitydocs/{identitydoc_id}": {
			"get": {
				"description": "Fetch information about an ID or a passport uploaded for an ultimate beneficiary owner",
				"operationId": "GetIdentityDoc",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "identitydoc_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"document_type": {
													"enum": [
														"id",
														"passport",
														"driverslicense",
														"proof_of_address"
													],
													"type": "string"
												},
												"encoded_content": {
													"format": "base64-encoded-content",
													"type": "string"
												},
												"filename": {
													"maxLength": 250,
													"type": "string"
												},
												"mime_type": {
													"enum": [
														"application/pdf",
														"image/jpeg",
														"image/png"
													],
													"type": "string"
												}
											},
											"required": [
												"filename",
												"mime_type",
												"encoded_content",
												"document_type"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"404": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GenericErrorResponse"
								}
							}
						},
						"description": "Identity doc not found"
					}
				},
				"summary": "Get an ID or a passport (BETA)",
				"tags": [
					"Onboard affiliates"
				]
			}
		},
		"/me": {
			"get": {
				"description": "Provides currenty authenticated user details",
				"operationId": "Me",
				"parameters": [],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"properties": {
												"merchant_id": {
													"type": "integer"
												},
												"role": {
													"type": "string"
												},
												"site_id": {
													"type": "integer"
												}
											},
											"required": [
												"merchant_id",
												"site_id"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					}
				},
				"summary": "Currently authenticated user",
				"tags": [
					"Manage affiliates"
				]
			}
		},
		"/pad/ccs": {
			"post": {
				"description": "Calculate customer credibility score",
				"operationId": "PAD::CustomerCredibilityScore",
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"additionalProperties": false,
								"properties": {
									"billing_address": {
										"properties": {
											"apartment": {
												"type": "string"
											},
											"city": {
												"type": "string"
											},
											"country": {
												"type": "string"
											},
											"street": {
												"type": "string"
											},
											"zipcode": {
												"type": "string"
											}
										},
										"required": [
											"street",
											"apartment",
											"zipcode",
											"city",
											"country"
										],
										"type": "object"
									},
									"browser_info": {
										"properties": {
											"accept_header": {
												"type": "string"
											},
											"cookies_enabled": {
												"type": "boolean"
											},
											"ip_address": {
												"type": "string"
											},
											"java_enabled": {
												"type": "boolean"
											},
											"javascript_enabled": {
												"type": "boolean"
											},
											"language": {
												"type": "string"
											},
											"platform": {
												"type": "string"
											},
											"screen_color_depth": {
												"type": "integer"
											},
											"screen_height": {
												"type": "integer"
											},
											"screen_width": {
												"type": "integer"
											},
											"time_zone": {
												"type": "integer"
											},
											"user_agent": {
												"type": "string"
											}
										},
										"type": "object"
									},
									"customer_info": {
										"properties": {
											"birthdate": {
												"format": "date",
												"type": "string"
											},
											"email": {
												"format": "email",
												"type": "string"
											},
											"first_name": {
												"type": "string"
											},
											"last_name": {
												"type": "string"
											},
											"phone": {
												"type": "string"
											}
										},
										"required": [
											"first_name",
											"last_name",
											"email",
											"birthdate",
											"phone"
										],
										"type": "object"
									},
									"customer_reference": {
										"type": "string"
									},
									"gateway": {
										"type": "string"
									},
									"order": {
										"properties": {
											"amount": {
												"type": "integer"
											},
											"currency": {
												"type": "string"
											},
											"description": {
												"type": "string"
											}
										},
										"required": [
											"amount",
											"currency",
											"description"
										],
										"type": "object"
									},
									"reusable": {
										"type": "boolean"
									},
									"shipping_address": {
										"properties": {
											"apartment": {
												"type": "string"
											},
											"city": {
												"type": "string"
											},
											"country": {
												"type": "string"
											},
											"street": {
												"type": "string"
											},
											"zipcode": {
												"type": "string"
											}
										},
										"required": [
											"street",
											"apartment",
											"zipcode",
											"city",
											"country"
										],
										"type": "object"
									}
								},
								"required": [
									"customer_reference",
									"order"
								],
								"type": "object"
							}
						}
					},
					"description": "",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"422": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						},
						"description": "Validation errors"
					}
				},
				"summary": "Customer Credibility Score (BETA)",
				"tags": [
					"Pay After Delivery (BETA)"
				]
			}
		},
		"/pad/orders/{order_id}": {
			"get": {
				"description": "Get PAD order details",
				"operationId": "PAD::OrderDetails",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "order_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					}
				},
				"summary": "PAD Order Details (BETA)",
				"tags": [
					"Pay After Delivery (BETA)"
				]
			}
		},
		"/payment-methods": {
			"get": {
				"description": "",
				"operationId": "ListPaymentMethods",
				"parameters": [
					{
						"description": "",
						"in": "query",
						"name": "application",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "",
						"in": "query",
						"name": "currency",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "",
						"in": "query",
						"name": "amount",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "",
						"in": "query",
						"name": "country",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "",
						"in": "query",
						"name": "locale",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"items": {
												"properties": {
													"allowed_amount": {
														"properties": {
															"max": {
																"example": 1000000,
																"type": "integer"
															},
															"min": {
																"example": 0,
																"type": "integer"
															}
														},
														"type": "object"
													},
													"allowed_apps": {
														"example": [
															"APIFCO"
														],
														"items": {
															"type": "string"
														},
														"type": "array"
													},
													"allowed_currencies": {
														"example": [
															"EUR",
															"USD",
															"GBP"
														],
														"items": {
															"type": "string"
														},
														"type": "array"
													},
													"brands": {
														"items": {
															"properties": {
																"icon_urls": {
																	"properties": {
																		"large": {
																			"example": "https://media.multisafepay.com/img/methods/3x/postepay.png",
																			"type": "string"
																		},
																		"medium": {
																			"example": "https://media.multisafepay.com/img/methods/2x/postepay.png",
																			"type": "string"
																		},
																		"vector": {
																			"example": "https://media.multisafepay.com/img/methods/svg/postepay.svg",
																			"type": "string"
																		}
																	},
																	"type": "object"
																},
																"id": {
																	"example": "POSTEPAY",
																	"type": "string"
																},
																"name": {
																	"example": "PostePay",
																	"type": "string"
																}
															},
															"type": "object"
														},
														"type": "array"
													},
													"checkout_data_required": {
														"example": false,
														"type": "boolean"
													},
													"country_preferred": {
														"example": [
															"NL"
														],
														"items": {
															"type": "string"
														},
														"type": "array"
													},
													"extras": {
														"example": {
															"issuers": [
																{
																	"bic": "ABNANL2A",
																	"code": "0031",
																	"name": "ABN Amro Bank"
																}
															]
														},
														"type": "object"
													},
													"icon_urls": {
														"properties": {
															"large": {
																"example": "https://media.multisafepay.com/img/methods/3x/visa.png",
																"type": "string"
															},
															"medium": {
																"example": "https://media.multisafepay.com/img/methods/2x/visa.png",
																"type": "string"
															},
															"vector": {
																"example": "https://media.multisafepay.com/img/methods/svg/visa.svg",
																"type": "string"
															}
														},
														"type": "object"
													},
													"id": {
														"example": "VISA",
														"type": "string"
													},
													"name": {
														"example": "Visa",
														"type": "string"
													},
													"required_fields": {
														"example": [],
														"items": {
															"type": "string"
														},
														"type": "array"
													}
												},
												"type": "object"
											},
											"type": "array"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					}
				},
				"summary": "Payment Methods",
				"tags": [
					"Payments"
				]
			}
		},
		"/payment-methods/{payment_method_id}": {
			"get": {
				"description": "",
				"operationId": "GetCustomerPaymentMethod",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "payment_method_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"oneOf": [
												{
													"properties": {
														"type": {
															"enum": [
																"direct_debit"
															]
														}
													},
													"required": [
														"direct_debit"
													]
												}
											],
											"properties": {
												"direct_debit": {
													"additionalProperties": false,
													"properties": {
														"bic": {
															"type": "string"
														},
														"holder_name": {
															"type": "string"
														},
														"iban": {
															"type": "string"
														}
													},
													"required": [
														"holder_name",
														"iban",
														"bic"
													],
													"type": "object"
												},
												"status": {
													"enum": [
														"active"
													],
													"type": "string"
												},
												"type": {
													"enum": [
														"direct_debit"
													],
													"type": "string"
												}
											},
											"required": [
												"type",
												"status"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"404": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GenericErrorResponse"
								}
							}
						},
						"description": "Payment method not found"
					}
				},
				"summary": "Get Payment method (BETA)",
				"tags": [
					"Customers (BETA)"
				]
			}
		},
		"/plans": {
			"get": {
				"description": "",
				"operationId": "ListSubscriptionPlans",
				"parameters": [
					{
						"description": "",
						"in": "query",
						"name": "merchant_item_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Limit number of returned results",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"description": "Limit number of returned results",
							"example": 5,
							"maximum": 1000,
							"minimum": 1,
							"type": "integer"
						}
					},
					{
						"description": "Return results starting from offset position",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"description": "Return results starting from offset position",
							"example": 5,
							"minimum": 0,
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"items": {
												"additionalProperties": false,
												"properties": {
													"amount": {
														"minimum": 0,
														"type": "integer"
													},
													"currency": {
														"example": "EUR",
														"maxLength": 3,
														"minLength": 3,
														"type": "string"
													},
													"description": {
														"maxLength": 256,
														"type": "string"
													},
													"interval": {
														"enum": [
															"1 day",
															"1 week",
															"1 mon",
															"1 year"
														],
														"example": "1 mon",
														"type": "string"
													},
													"interval_count": {
														"minimum": 0,
														"type": "integer"
													},
													"merchant_item_id": {
														"example": "item-1-2-3",
														"type": "string"
													},
													"name": {
														"maxLength": 64,
														"type": "string"
													},
													"status": {
														"enum": [
															"active",
															"hidden",
															"disabled"
														],
														"type": "string"
													}
												},
												"required": [
													"interval",
													"interval_count",
													"merchant_item_id",
													"name",
													"status",
													"amount",
													"currency"
												],
												"type": "object"
											},
											"type": "array"
										},
										"page": {
											"additionalProperties": false,
											"properties": {
												"total": {
													"type": "integer"
												}
											},
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					}
				},
				"summary": "List Subscription Plans (BETA)",
				"tags": [
					"Subscriptions (BETA)"
				]
			},
			"post": {
				"description": "",
				"operationId": "CreateSubscriptionPlan",
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"additionalProperties": false,
								"properties": {
									"amount": {
										"minimum": 0,
										"type": "integer"
									},
									"currency": {
										"example": "EUR",
										"maxLength": 3,
										"minLength": 3,
										"type": "string"
									},
									"description": {
										"maxLength": 256,
										"type": "string"
									},
									"interval": {
										"enum": [
											"1 day",
											"1 week",
											"1 mon",
											"1 year"
										],
										"example": "1 mon",
										"type": "string"
									},
									"interval_count": {
										"minimum": 0,
										"type": "integer"
									},
									"merchant_item_id": {
										"example": "item-1-2-3",
										"type": "string"
									},
									"name": {
										"maxLength": 64,
										"type": "string"
									},
									"status": {
										"enum": [
											"active",
											"hidden",
											"disabled"
										],
										"type": "string"
									}
								},
								"required": [
									"interval",
									"interval_count",
									"merchant_item_id",
									"name",
									"status",
									"amount",
									"currency"
								],
								"type": "object"
							}
						}
					},
					"description": "",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"amount": {
													"minimum": 0,
													"type": "integer"
												},
												"currency": {
													"example": "EUR",
													"maxLength": 3,
													"minLength": 3,
													"type": "string"
												},
												"description": {
													"maxLength": 256,
													"type": "string"
												},
												"interval": {
													"enum": [
														"1 day",
														"1 week",
														"1 mon",
														"1 year"
													],
													"example": "1 mon",
													"type": "string"
												},
												"interval_count": {
													"minimum": 0,
													"type": "integer"
												},
												"merchant_item_id": {
													"example": "item-1-2-3",
													"type": "string"
												},
												"name": {
													"maxLength": 64,
													"type": "string"
												},
												"status": {
													"enum": [
														"active",
														"hidden",
														"disabled"
													],
													"type": "string"
												}
											},
											"required": [
												"interval",
												"interval_count",
												"merchant_item_id",
												"name",
												"status",
												"amount",
												"currency"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"422": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						},
						"description": "Validation errors"
					}
				},
				"summary": "Create Subscription Plan (BETA)",
				"tags": [
					"Subscriptions (BETA)"
				]
			}
		},
		"/plans/{plan_id}": {
			"get": {
				"description": "",
				"operationId": "GetSubscriptionPlan",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "plan_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"amount": {
													"minimum": 0,
													"type": "integer"
												},
												"currency": {
													"example": "EUR",
													"maxLength": 3,
													"minLength": 3,
													"type": "string"
												},
												"description": {
													"maxLength": 256,
													"type": "string"
												},
												"interval": {
													"enum": [
														"1 day",
														"1 week",
														"1 mon",
														"1 year"
													],
													"example": "1 mon",
													"type": "string"
												},
												"interval_count": {
													"minimum": 0,
													"type": "integer"
												},
												"merchant_item_id": {
													"example": "item-1-2-3",
													"type": "string"
												},
												"name": {
													"maxLength": 64,
													"type": "string"
												},
												"status": {
													"enum": [
														"active",
														"hidden",
														"disabled"
													],
													"type": "string"
												}
											},
											"required": [
												"interval",
												"interval_count",
												"merchant_item_id",
												"name",
												"status",
												"amount",
												"currency"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					}
				},
				"summary": "Get Subscription Plan (BETA)",
				"tags": [
					"Subscriptions (BETA)"
				]
			},
			"patch": {
				"description": "",
				"operationId": "UpdateSubscriptionPlan",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "plan_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"additionalProperties": false,
								"properties": {
									"amount": {
										"minimum": 0,
										"type": "integer"
									},
									"currency": {
										"example": "EUR",
										"maxLength": 3,
										"minLength": 3,
										"type": "string"
									},
									"description": {
										"maxLength": 256,
										"type": "string"
									},
									"interval": {
										"enum": [
											"1 day",
											"1 week",
											"1 mon",
											"1 year"
										],
										"example": "1 mon",
										"type": "string"
									},
									"interval_count": {
										"minimum": 0,
										"type": "integer"
									},
									"name": {
										"maxLength": 64,
										"type": "string"
									},
									"status": {
										"enum": [
											"active",
											"hidden",
											"disabled"
										],
										"type": "string"
									}
								},
								"type": "object"
							}
						}
					},
					"description": "",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"amount": {
													"minimum": 0,
													"type": "integer"
												},
												"currency": {
													"example": "EUR",
													"maxLength": 3,
													"minLength": 3,
													"type": "string"
												},
												"description": {
													"maxLength": 256,
													"type": "string"
												},
												"interval": {
													"enum": [
														"1 day",
														"1 week",
														"1 mon",
														"1 year"
													],
													"example": "1 mon",
													"type": "string"
												},
												"interval_count": {
													"minimum": 0,
													"type": "integer"
												},
												"merchant_item_id": {
													"example": "item-1-2-3",
													"type": "string"
												},
												"name": {
													"maxLength": 64,
													"type": "string"
												},
												"status": {
													"enum": [
														"active",
														"hidden",
														"disabled"
													],
													"type": "string"
												}
											},
											"required": [
												"interval",
												"interval_count",
												"merchant_item_id",
												"name",
												"status",
												"amount",
												"currency"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"422": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						},
						"description": "Validation errors"
					}
				},
				"summary": "Update Subscription Plan (BETA)",
				"tags": [
					"Subscriptions (BETA)"
				]
			}
		},
		"/signup-account": {
			"post": {
				"description": "Create a new merchant account",
				"operationId": "Partner::SignupAccount",
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"additionalProperties": false,
								"properties": {
									"account": {
										"additionalProperties": false,
										"properties": {
											"address1": {
												"example": "Jodenbreestraat 4",
												"maxLength": 64,
												"type": "string"
											},
											"address2": {
												"maxLength": 64,
												"type": "string"
											},
											"address3": {
												"maxLength": 64,
												"type": "string"
											},
											"apartment": {
												"example": "2",
												"maxLength": 9,
												"type": "string"
											},
											"city": {
												"example": "Amsterdam",
												"maxLength": 50,
												"type": "string"
											},
											"coc_number": {
												"maxLength": 50,
												"type": "string"
											},
											"company_name": {
												"maxLength": 200,
												"type": "string"
											},
											"country": {
												"example": "NL",
												"format": "country-alpha2",
												"type": "string"
											},
											"email": {
												"example": "merchant@example.com",
												"format": "email",
												"maxLength": 100,
												"type": "string"
											},
											"phone": {
												"maxLength": 15,
												"type": "string"
											},
											"vat_number": {
												"maxLength": 50,
												"type": "string"
											},
											"zipcode": {
												"example": "1011 NK",
												"maxLength": 30,
												"type": "string"
											}
										},
										"required": [
											"company_name",
											"email",
											"country"
										],
										"type": "object"
									},
									"currencies": {
										"example": [
											"EUR"
										],
										"items": {
											"type": "string"
										},
										"type": "array"
									},
									"user": {
										"properties": {
											"email": {
												"format": "email",
												"type": "string"
											},
											"name": {
												"type": "string"
											},
											"password": {
												"type": "string"
											}
										},
										"required": [
											"name",
											"email",
											"password"
										],
										"type": "object"
									}
								},
								"required": [
									"account",
									"user",
									"currencies"
								],
								"type": "object"
							}
						}
					},
					"description": "",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"properties": {
												"account": {
													"additionalProperties": false,
													"properties": {
														"address1": {
															"example": "Jodenbreestraat 4",
															"maxLength": 64,
															"type": "string"
														},
														"address2": {
															"maxLength": 64,
															"type": "string"
														},
														"address3": {
															"maxLength": 64,
															"type": "string"
														},
														"apartment": {
															"example": "2",
															"maxLength": 9,
															"type": "string"
														},
														"city": {
															"example": "Amsterdam",
															"maxLength": 50,
															"type": "string"
														},
														"coc_number": {
															"maxLength": 50,
															"type": "string"
														},
														"company_name": {
															"maxLength": 200,
															"type": "string"
														},
														"country": {
															"example": "NL",
															"format": "country-alpha2",
															"type": "string"
														},
														"email": {
															"example": "merchant@example.com",
															"format": "email",
															"maxLength": 100,
															"type": "string"
														},
														"phone": {
															"maxLength": 15,
															"type": "string"
														},
														"vat_number": {
															"maxLength": 50,
															"type": "string"
														},
														"zipcode": {
															"example": "1011 NK",
															"maxLength": 30,
															"type": "string"
														}
													},
													"required": [
														"company_name",
														"email",
														"country"
													],
													"type": "object"
												},
												"currencies": {
													"items": {
														"type": "string"
													},
													"type": "array"
												},
												"user": {
													"properties": {
														"email": {
															"format": "email",
															"type": "string"
														},
														"name": {
															"type": "string"
														},
														"password": {
															"type": "string"
														}
													},
													"required": [
														"name",
														"email",
														"password"
													],
													"type": "object"
												}
											},
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"422": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						},
						"description": "Validation errors"
					}
				},
				"summary": "Signup Account (BETA)",
				"tags": [
					"Onboard affiliates"
				]
			}
		},
		"/sites/{site_id}": {
			"get": {
				"description": "Fetch information about an existing site",
				"operationId": "GetSite",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "site_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"name": {
													"maxLength": 120,
													"type": "string"
												},
												"notification_url": {
													"format": "url",
													"maxLength": 150,
													"type": "string"
												},
												"price_from": {
													"type": "integer"
												},
												"price_till": {
													"type": "integer"
												},
												"support_email": {
													"format": "email",
													"maxLength": 100,
													"type": "string"
												},
												"support_phone": {
													"maxLength": 100,
													"type": "string"
												},
												"url": {
													"format": "url",
													"maxLength": 150,
													"type": "string"
												}
											},
											"required": [
												"name",
												"url"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"404": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GenericErrorResponse"
								}
							}
						},
						"description": "Site not found"
					}
				},
				"summary": "Get Site (BETA)",
				"tags": [
					"Manage affiliates"
				]
			},
			"patch": {
				"description": "Update information about an existing site",
				"operationId": "UpdateSite",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "site_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"additionalProperties": false,
								"properties": {
									"name": {
										"maxLength": 120,
										"type": "string"
									},
									"notification_url": {
										"format": "url",
										"maxLength": 150,
										"type": "string"
									},
									"price_from": {
										"type": "integer"
									},
									"price_till": {
										"type": "integer"
									},
									"support_email": {
										"format": "email",
										"maxLength": 100,
										"type": "string"
									},
									"support_phone": {
										"maxLength": 100,
										"type": "string"
									},
									"url": {
										"format": "url",
										"maxLength": 150,
										"type": "string"
									}
								},
								"type": "object"
							}
						}
					},
					"description": "",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"name": {
													"maxLength": 120,
													"type": "string"
												},
												"notification_url": {
													"format": "url",
													"maxLength": 150,
													"type": "string"
												},
												"price_from": {
													"type": "integer"
												},
												"price_till": {
													"type": "integer"
												},
												"support_email": {
													"format": "email",
													"maxLength": 100,
													"type": "string"
												},
												"support_phone": {
													"maxLength": 100,
													"type": "string"
												},
												"url": {
													"format": "url",
													"maxLength": 150,
													"type": "string"
												}
											},
											"required": [
												"name",
												"url"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"404": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GenericErrorResponse"
								}
							}
						},
						"description": "Site not found"
					},
					"422": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						},
						"description": "Validation errors"
					}
				},
				"summary": "Update Site (BETA)",
				"tags": [
					"Manage affiliates"
				]
			}
		},
		"/subscriptions": {
			"post": {
				"description": "",
				"operationId": "CreateSubscription",
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"additionalProperties": false,
								"properties": {
									"allow_cancel_before_days": {
										"minimum": 0,
										"type": "integer"
									},
									"collecting_flow_id": {
										"minimum": 0,
										"type": "integer"
									},
									"collecting_method": {
										"enum": [
											"charge_automatically",
											"send_invoice"
										],
										"type": "string"
									},
									"current_period_end": {
										"format": "date",
										"type": "string"
									},
									"current_period_start": {
										"format": "date",
										"type": "string"
									},
									"customer_id": {
										"type": "string"
									},
									"delivery_details_id": {
										"type": "string"
									},
									"discount": {
										"properties": {
											"cap": {
												"minimum": 0,
												"type": "number"
											},
											"percent_off": {
												"maximum": 100,
												"minimum": 0,
												"type": "number"
											}
										},
										"type": "object"
									},
									"end_date": {
										"format": "date",
										"type": "string"
									},
									"items": {
										"properties": {
											"amount": {
												"minimum": 0,
												"type": "integer"
											},
											"checkout_options": {
												"properties": {
													"tax_tables": {
														"properties": {
															"alternate": {
																"items": {
																	"properties": {
																		"name": {
																			"type": "string"
																		},
																		"rules": {
																			"items": {
																				"properties": {
																					"rate": {
																						"minimum": 0,
																						"type": "number"
																					},
																					"shipping_taxed": {
																						"type": "boolean"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		}
																	},
																	"type": "object"
																},
																"type": "array"
															},
															"default": {
																"properties": {
																	"rate": {
																		"minimum": 0,
																		"type": "number"
																	},
																	"shipping_taxed": {
																		"type": "boolean"
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"currency": {
												"example": "EUR",
												"maxLength": 3,
												"minLength": 3,
												"type": "string"
											},
											"items": {
												"items": {
													"properties": {
														"description": {
															"type": "string"
														},
														"merchant_item_id": {
															"type": "string"
														},
														"name": {
															"type": "string"
														},
														"plan_id": {
															"type": "string"
														},
														"quantity": {
															"minimum": 0,
															"type": "number"
														},
														"tax_table_selector": {
															"type": "string"
														},
														"unit_price": {
															"type": "number"
														},
														"weight": {
															"properties": {
																"unit": {
																	"type": "string"
																},
																"value": {
																	"minimum": 0,
																	"type": "number"
																}
															},
															"type": "object"
														}
													},
													"required": [
														"name",
														"merchant_item_id",
														"quantity",
														"unit_price"
													],
													"type": "object"
												},
												"type": "array"
											}
										},
										"required": [
											"amount",
											"currency"
										],
										"type": "object"
									},
									"max_amount_outstanding": {
										"minimum": 0,
										"type": "number"
									},
									"max_amount_outstanding_currency": {
										"example": "EUR",
										"maxLength": 3,
										"minLength": 3,
										"type": "string"
									},
									"max_orders_outstanding": {
										"minimum": 0,
										"type": "integer"
									},
									"payment_method_id": {
										"type": "string"
									},
									"recurring_interval": {
										"enum": [
											"1 day",
											"1 week",
											"1 mon",
											"1 year"
										],
										"example": "1 mon",
										"type": "string"
									},
									"recurring_interval_count": {
										"minimum": 0,
										"type": "integer"
									},
									"start_date": {
										"format": "date",
										"type": "string"
									},
									"status": {
										"enum": [
											"active",
											"inactive"
										],
										"type": "string"
									}
								},
								"required": [
									"collecting_flow_id",
									"collecting_method",
									"customer_id",
									"delivery_details_id",
									"items",
									"payment_method_id",
									"start_date",
									"status"
								],
								"type": "object"
							}
						}
					},
					"description": "",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"allow_cancel_before_days": {
													"minimum": 0,
													"type": "integer"
												},
												"collecting_flow_id": {
													"minimum": 0,
													"type": "integer"
												},
												"collecting_method": {
													"enum": [
														"charge_automatically",
														"send_invoice"
													],
													"type": "string"
												},
												"current_period_end": {
													"format": "date",
													"type": "string"
												},
												"current_period_start": {
													"format": "date",
													"type": "string"
												},
												"customer_id": {
													"type": "string"
												},
												"delivery_details_id": {
													"type": "string"
												},
												"discount": {
													"properties": {
														"cap": {
															"minimum": 0,
															"type": "number"
														},
														"percent_off": {
															"maximum": 100,
															"minimum": 0,
															"type": "number"
														}
													},
													"type": "object"
												},
												"end_date": {
													"format": "date",
													"type": "string"
												},
												"items": {
													"properties": {
														"amount": {
															"minimum": 0,
															"type": "integer"
														},
														"checkout_options": {
															"properties": {
																"tax_tables": {
																	"properties": {
																		"alternate": {
																			"items": {
																				"properties": {
																					"name": {
																						"type": "string"
																					},
																					"rules": {
																						"items": {
																							"properties": {
																								"rate": {
																									"minimum": 0,
																									"type": "number"
																								},
																								"shipping_taxed": {
																									"type": "boolean"
																								}
																							},
																							"type": "object"
																						},
																						"type": "array"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		},
																		"default": {
																			"properties": {
																				"rate": {
																					"minimum": 0,
																					"type": "number"
																				},
																				"shipping_taxed": {
																					"type": "boolean"
																				}
																			},
																			"type": "object"
																		}
																	},
																	"type": "object"
																}
															},
															"type": "object"
														},
														"currency": {
															"example": "EUR",
															"maxLength": 3,
															"minLength": 3,
															"type": "string"
														},
														"items": {
															"items": {
																"properties": {
																	"description": {
																		"type": "string"
																	},
																	"merchant_item_id": {
																		"type": "string"
																	},
																	"name": {
																		"type": "string"
																	},
																	"plan_id": {
																		"type": "string"
																	},
																	"quantity": {
																		"minimum": 0,
																		"type": "number"
																	},
																	"tax_table_selector": {
																		"type": "string"
																	},
																	"unit_price": {
																		"type": "number"
																	},
																	"weight": {
																		"properties": {
																			"unit": {
																				"type": "string"
																			},
																			"value": {
																				"minimum": 0,
																				"type": "number"
																			}
																		},
																		"type": "object"
																	}
																},
																"required": [
																	"name",
																	"merchant_item_id",
																	"quantity",
																	"unit_price"
																],
																"type": "object"
															},
															"type": "array"
														}
													},
													"required": [
														"amount",
														"currency"
													],
													"type": "object"
												},
												"max_amount_outstanding": {
													"minimum": 0,
													"type": "number"
												},
												"max_amount_outstanding_currency": {
													"example": "EUR",
													"maxLength": 3,
													"minLength": 3,
													"type": "string"
												},
												"max_orders_outstanding": {
													"minimum": 0,
													"type": "integer"
												},
												"payment_method_id": {
													"type": "string"
												},
												"recurring_interval": {
													"enum": [
														"1 day",
														"1 week",
														"1 mon",
														"1 year"
													],
													"example": "1 mon",
													"type": "string"
												},
												"recurring_interval_count": {
													"minimum": 0,
													"type": "integer"
												},
												"start_date": {
													"format": "date",
													"type": "string"
												},
												"status": {
													"enum": [
														"active",
														"inactive"
													],
													"type": "string"
												}
											},
											"required": [
												"collecting_flow_id",
												"collecting_method",
												"customer_id",
												"delivery_details_id",
												"items",
												"payment_method_id",
												"start_date",
												"status"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"422": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						},
						"description": "Validation errors"
					}
				},
				"summary": "Create Subscription (BETA)",
				"tags": [
					"Subscriptions (BETA)"
				]
			}
		},
		"/subscriptions/{subscription_id}": {
			"get": {
				"description": "",
				"operationId": "GetSubscription",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "subscription_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"allow_cancel_before_days": {
													"minimum": 0,
													"type": "integer"
												},
												"collecting_flow_id": {
													"minimum": 0,
													"type": "integer"
												},
												"collecting_method": {
													"enum": [
														"charge_automatically",
														"send_invoice"
													],
													"type": "string"
												},
												"current_period_end": {
													"format": "date",
													"type": "string"
												},
												"current_period_start": {
													"format": "date",
													"type": "string"
												},
												"customer_id": {
													"type": "string"
												},
												"delivery_details_id": {
													"type": "string"
												},
												"discount": {
													"properties": {
														"cap": {
															"minimum": 0,
															"type": "number"
														},
														"percent_off": {
															"maximum": 100,
															"minimum": 0,
															"type": "number"
														}
													},
													"type": "object"
												},
												"end_date": {
													"format": "date",
													"type": "string"
												},
												"items": {
													"properties": {
														"amount": {
															"minimum": 0,
															"type": "integer"
														},
														"checkout_options": {
															"properties": {
																"tax_tables": {
																	"properties": {
																		"alternate": {
																			"items": {
																				"properties": {
																					"name": {
																						"type": "string"
																					},
																					"rules": {
																						"items": {
																							"properties": {
																								"rate": {
																									"minimum": 0,
																									"type": "number"
																								},
																								"shipping_taxed": {
																									"type": "boolean"
																								}
																							},
																							"type": "object"
																						},
																						"type": "array"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		},
																		"default": {
																			"properties": {
																				"rate": {
																					"minimum": 0,
																					"type": "number"
																				},
																				"shipping_taxed": {
																					"type": "boolean"
																				}
																			},
																			"type": "object"
																		}
																	},
																	"type": "object"
																}
															},
															"type": "object"
														},
														"currency": {
															"example": "EUR",
															"maxLength": 3,
															"minLength": 3,
															"type": "string"
														},
														"items": {
															"items": {
																"properties": {
																	"description": {
																		"type": "string"
																	},
																	"merchant_item_id": {
																		"type": "string"
																	},
																	"name": {
																		"type": "string"
																	},
																	"plan_id": {
																		"type": "string"
																	},
																	"quantity": {
																		"minimum": 0,
																		"type": "number"
																	},
																	"tax_table_selector": {
																		"type": "string"
																	},
																	"unit_price": {
																		"type": "number"
																	},
																	"weight": {
																		"properties": {
																			"unit": {
																				"type": "string"
																			},
																			"value": {
																				"minimum": 0,
																				"type": "number"
																			}
																		},
																		"type": "object"
																	}
																},
																"required": [
																	"name",
																	"merchant_item_id",
																	"quantity",
																	"unit_price"
																],
																"type": "object"
															},
															"type": "array"
														}
													},
													"required": [
														"amount",
														"currency"
													],
													"type": "object"
												},
												"max_amount_outstanding": {
													"minimum": 0,
													"type": "number"
												},
												"max_amount_outstanding_currency": {
													"example": "EUR",
													"maxLength": 3,
													"minLength": 3,
													"type": "string"
												},
												"max_orders_outstanding": {
													"minimum": 0,
													"type": "integer"
												},
												"payment_method_id": {
													"type": "string"
												},
												"recurring_interval": {
													"enum": [
														"1 day",
														"1 week",
														"1 mon",
														"1 year"
													],
													"example": "1 mon",
													"type": "string"
												},
												"recurring_interval_count": {
													"minimum": 0,
													"type": "integer"
												},
												"start_date": {
													"format": "date",
													"type": "string"
												},
												"status": {
													"enum": [
														"active",
														"inactive"
													],
													"type": "string"
												}
											},
											"required": [
												"collecting_flow_id",
												"collecting_method",
												"customer_id",
												"delivery_details_id",
												"items",
												"payment_method_id",
												"start_date",
												"status"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					}
				},
				"summary": "Get Subscription (BETA)",
				"tags": [
					"Subscriptions (BETA)"
				]
			},
			"patch": {
				"description": "",
				"operationId": "UpdateSubscription",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "subscription_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"additionalProperties": false,
								"properties": {
									"allow_cancel_before_days": {
										"minimum": 0,
										"type": "integer"
									},
									"collecting_flow_id": {
										"minimum": 0,
										"type": "integer"
									},
									"collecting_method": {
										"enum": [
											"charge_automatically",
											"send_invoice"
										],
										"type": "string"
									},
									"current_period_end": {
										"format": "date",
										"type": "string"
									},
									"current_period_start": {
										"format": "date",
										"type": "string"
									},
									"customer_id": {
										"type": "string"
									},
									"delivery_details_id": {
										"type": "string"
									},
									"discount": {
										"properties": {
											"cap": {
												"minimum": 0,
												"type": "number"
											},
											"percent_off": {
												"maximum": 100,
												"minimum": 0,
												"type": "number"
											}
										},
										"type": "object"
									},
									"end_date": {
										"format": "date",
										"type": "string"
									},
									"items": {
										"properties": {
											"amount": {
												"minimum": 0,
												"type": "integer"
											},
											"checkout_options": {
												"properties": {
													"tax_tables": {
														"properties": {
															"alternate": {
																"items": {
																	"properties": {
																		"name": {
																			"type": "string"
																		},
																		"rules": {
																			"items": {
																				"properties": {
																					"rate": {
																						"minimum": 0,
																						"type": "number"
																					},
																					"shipping_taxed": {
																						"type": "boolean"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		}
																	},
																	"type": "object"
																},
																"type": "array"
															},
															"default": {
																"properties": {
																	"rate": {
																		"minimum": 0,
																		"type": "number"
																	},
																	"shipping_taxed": {
																		"type": "boolean"
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"currency": {
												"example": "EUR",
												"maxLength": 3,
												"minLength": 3,
												"type": "string"
											},
											"items": {
												"items": {
													"properties": {
														"description": {
															"type": "string"
														},
														"merchant_item_id": {
															"type": "string"
														},
														"name": {
															"type": "string"
														},
														"plan_id": {
															"type": "string"
														},
														"quantity": {
															"minimum": 0,
															"type": "number"
														},
														"tax_table_selector": {
															"type": "string"
														},
														"unit_price": {
															"type": "number"
														},
														"weight": {
															"properties": {
																"unit": {
																	"type": "string"
																},
																"value": {
																	"minimum": 0,
																	"type": "number"
																}
															},
															"type": "object"
														}
													},
													"required": [
														"name",
														"merchant_item_id",
														"quantity",
														"unit_price"
													],
													"type": "object"
												},
												"type": "array"
											}
										},
										"required": [
											"amount",
											"currency"
										],
										"type": "object"
									},
									"max_amount_outstanding": {
										"minimum": 0,
										"type": "number"
									},
									"max_amount_outstanding_currency": {
										"example": "EUR",
										"maxLength": 3,
										"minLength": 3,
										"type": "string"
									},
									"max_orders_outstanding": {
										"minimum": 0,
										"type": "integer"
									},
									"payment_method_id": {
										"type": "string"
									},
									"recurring_interval": {
										"enum": [
											"1 day",
											"1 week",
											"1 mon",
											"1 year"
										],
										"example": "1 mon",
										"type": "string"
									},
									"recurring_interval_count": {
										"minimum": 0,
										"type": "integer"
									},
									"start_date": {
										"format": "date",
										"type": "string"
									},
									"status": {
										"enum": [
											"active",
											"inactive"
										],
										"type": "string"
									}
								},
								"type": "object"
							}
						}
					},
					"description": "",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"allow_cancel_before_days": {
													"minimum": 0,
													"type": "integer"
												},
												"collecting_flow_id": {
													"minimum": 0,
													"type": "integer"
												},
												"collecting_method": {
													"enum": [
														"charge_automatically",
														"send_invoice"
													],
													"type": "string"
												},
												"current_period_end": {
													"format": "date",
													"type": "string"
												},
												"current_period_start": {
													"format": "date",
													"type": "string"
												},
												"customer_id": {
													"type": "string"
												},
												"delivery_details_id": {
													"type": "string"
												},
												"discount": {
													"properties": {
														"cap": {
															"minimum": 0,
															"type": "number"
														},
														"percent_off": {
															"maximum": 100,
															"minimum": 0,
															"type": "number"
														}
													},
													"type": "object"
												},
												"end_date": {
													"format": "date",
													"type": "string"
												},
												"items": {
													"properties": {
														"amount": {
															"minimum": 0,
															"type": "integer"
														},
														"checkout_options": {
															"properties": {
																"tax_tables": {
																	"properties": {
																		"alternate": {
																			"items": {
																				"properties": {
																					"name": {
																						"type": "string"
																					},
																					"rules": {
																						"items": {
																							"properties": {
																								"rate": {
																									"minimum": 0,
																									"type": "number"
																								},
																								"shipping_taxed": {
																									"type": "boolean"
																								}
																							},
																							"type": "object"
																						},
																						"type": "array"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		},
																		"default": {
																			"properties": {
																				"rate": {
																					"minimum": 0,
																					"type": "number"
																				},
																				"shipping_taxed": {
																					"type": "boolean"
																				}
																			},
																			"type": "object"
																		}
																	},
																	"type": "object"
																}
															},
															"type": "object"
														},
														"currency": {
															"example": "EUR",
															"maxLength": 3,
															"minLength": 3,
															"type": "string"
														},
														"items": {
															"items": {
																"properties": {
																	"description": {
																		"type": "string"
																	},
																	"merchant_item_id": {
																		"type": "string"
																	},
																	"name": {
																		"type": "string"
																	},
																	"plan_id": {
																		"type": "string"
																	},
																	"quantity": {
																		"minimum": 0,
																		"type": "number"
																	},
																	"tax_table_selector": {
																		"type": "string"
																	},
																	"unit_price": {
																		"type": "number"
																	},
																	"weight": {
																		"properties": {
																			"unit": {
																				"type": "string"
																			},
																			"value": {
																				"minimum": 0,
																				"type": "number"
																			}
																		},
																		"type": "object"
																	}
																},
																"required": [
																	"name",
																	"merchant_item_id",
																	"quantity",
																	"unit_price"
																],
																"type": "object"
															},
															"type": "array"
														}
													},
													"required": [
														"amount",
														"currency"
													],
													"type": "object"
												},
												"max_amount_outstanding": {
													"minimum": 0,
													"type": "number"
												},
												"max_amount_outstanding_currency": {
													"example": "EUR",
													"maxLength": 3,
													"minLength": 3,
													"type": "string"
												},
												"max_orders_outstanding": {
													"minimum": 0,
													"type": "integer"
												},
												"payment_method_id": {
													"type": "string"
												},
												"recurring_interval": {
													"enum": [
														"1 day",
														"1 week",
														"1 mon",
														"1 year"
													],
													"example": "1 mon",
													"type": "string"
												},
												"recurring_interval_count": {
													"minimum": 0,
													"type": "integer"
												},
												"start_date": {
													"format": "date",
													"type": "string"
												},
												"status": {
													"enum": [
														"active",
														"inactive"
													],
													"type": "string"
												}
											},
											"required": [
												"collecting_flow_id",
												"collecting_method",
												"customer_id",
												"delivery_details_id",
												"items",
												"payment_method_id",
												"start_date",
												"status"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"422": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						},
						"description": "Validation errors"
					}
				},
				"summary": "Update Subscription (BETA)",
				"tags": [
					"Subscriptions (BETA)"
				]
			}
		},
		"/subscriptions/{subscription_id}/invoices": {
			"post": {
				"description": "",
				"operationId": "CreateInvoice",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "subscription_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"additionalProperties": false,
								"properties": {
									"due": {
										"format": "date",
										"type": "string"
									}
								},
								"required": [
									"due"
								],
								"type": "object"
							}
						}
					},
					"description": "",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"due": {
													"format": "date",
													"type": "string"
												}
											},
											"required": [
												"due"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"422": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						},
						"description": "Validation errors"
					}
				},
				"summary": "Create Invoice (BETA)",
				"tags": [
					"Subscriptions (BETA)"
				]
			}
		},
		"/test/bank-transfers": {
			"post": {
				"description": "Create bank transfer",
				"operationId": "Test::CreateBankTransfer",
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"additionalProperties": false,
								"properties": {
									"amount": {
										"minimum": 0,
										"type": "integer"
									},
									"currency": {
										"maxLength": 3,
										"type": "string"
									},
									"dst": {
										"properties": {
											"bic": {
												"type": "string"
											},
											"holder_name": {
												"type": "string"
											},
											"iban": {
												"type": "string"
											}
										},
										"required": [
											"iban",
											"bic"
										],
										"type": "object"
									},
									"reference": {
										"type": "string"
									},
									"src": {
										"properties": {
											"bic": {
												"type": "string"
											},
											"holder_name": {
												"type": "string"
											},
											"iban": {
												"type": "string"
											}
										},
										"required": [
											"iban",
											"bic"
										],
										"type": "object"
									}
								},
								"required": [
									"currency",
									"amount",
									"src",
									"dst",
									"reference"
								],
								"type": "object"
							}
						}
					},
					"description": "",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"422": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						},
						"description": "Validation errors"
					}
				},
				"summary": "Create Bank Transfer (BETA)",
				"tags": [
					"TEST (BETA)"
				]
			}
		},
		"/transactions": {
			"get": {
				"description": "",
				"operationId": "ListTransactions",
				"parameters": [
					{
						"description": "",
						"in": "query",
						"name": "created_from",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "",
						"in": "query",
						"name": "payment_method",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "",
						"in": "query",
						"name": "type",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "",
						"in": "query",
						"name": "site_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "",
						"in": "query",
						"name": "debit_credit",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "",
						"in": "query",
						"name": "completed_until",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "",
						"in": "query",
						"name": "status",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "",
						"in": "query",
						"name": "completed_from",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "",
						"in": "query",
						"name": "created_until",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "",
						"in": "query",
						"name": "financial_status",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Limit number of returned results",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"description": "Limit number of returned results",
							"example": 5,
							"maximum": 1000,
							"minimum": 1,
							"type": "integer"
						}
					},
					{
						"description": "Next results after the cursor",
						"in": "query",
						"name": "after",
						"required": false,
						"schema": {
							"description": "Next results after the cursor",
							"type": "string"
						}
					},
					{
						"description": "Next results before the cursor",
						"in": "query",
						"name": "before",
						"required": false,
						"schema": {
							"description": "Next results before the cursor",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"items": {
												"properties": {
													"amount": {
														"example": 100,
														"type": "integer"
													},
													"completed": {
														"format": "datetime",
														"type": "string"
													},
													"costs": {
														"items": {
															"properties": {
																"amount": {
																	"type": "integer"
																},
																"description": {
																	"type": "string"
																}
															},
															"type": "object"
														},
														"type": "array"
													},
													"created": {
														"format": "datetime",
														"type": "string"
													},
													"currency": {
														"example": "EUR",
														"type": "string"
													},
													"customer": {
														"properties": {
															"email": {
																"type": "string"
															},
															"first_name": {
																"type": "string"
															},
															"iban": {
																"type": "string"
															},
															"last_name": {
																"type": "string"
															}
														},
														"type": "object"
													},
													"debit_credit": {
														"enum": [
															"D",
															"C"
														],
														"type": "string"
													},
													"description": {
														"type": "string"
													},
													"financial_status": {
														"example": "completed",
														"type": "string"
													},
													"invoice_id": {
														"type": "string"
													},
													"order_id": {
														"type": "string"
													},
													"payment_method": {
														"example": "VISA",
														"type": "string"
													},
													"site_id": {
														"example": 123,
														"type": "integer"
													},
													"status": {
														"example": "completed",
														"type": "string"
													},
													"transaction_id": {
														"type": "integer"
													},
													"type": {
														"type": "string"
													},
													"updated": {
														"format": "datetime",
														"type": "string"
													},
													"var1": {
														"type": "string"
													},
													"var2": {
														"type": "string"
													},
													"var3": {
														"type": "string"
													}
												},
												"type": "object"
											},
											"type": "array"
										},
										"pager": {
											"additionalProperties": false,
											"properties": {
												"after": {
													"type": "string"
												},
												"before": {
													"type": "string"
												},
												"cursor": {
													"properties": {
														"after": {
															"type": "string"
														},
														"before": {
															"type": "string"
														}
													},
													"type": "object"
												},
												"limit": {
													"type": "integer"
												}
											},
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					}
				},
				"summary": "List Transactions (BETA)",
				"tags": [
					"Reconciliation"
				]
			}
		},
		"/transactions/{transaction_id}": {
			"get": {
				"description": "Get a single transaction",
				"operationId": "GetTransaction",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "transaction_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"properties": {
												"amount": {
													"example": 100,
													"type": "integer"
												},
												"completed": {
													"format": "datetime",
													"type": "string"
												},
												"costs": {
													"items": {
														"properties": {
															"amount": {
																"type": "integer"
															},
															"description": {
																"type": "string"
															}
														},
														"type": "object"
													},
													"type": "array"
												},
												"created": {
													"format": "datetime",
													"type": "string"
												},
												"currency": {
													"example": "EUR",
													"type": "string"
												},
												"customer": {
													"properties": {
														"email": {
															"type": "string"
														},
														"first_name": {
															"type": "string"
														},
														"iban": {
															"type": "string"
														},
														"last_name": {
															"type": "string"
														}
													},
													"type": "object"
												},
												"debit_credit": {
													"enum": [
														"D",
														"C"
													],
													"type": "string"
												},
												"description": {
													"type": "string"
												},
												"financial_status": {
													"example": "completed",
													"type": "string"
												},
												"invoice_id": {
													"type": "string"
												},
												"order_id": {
													"type": "string"
												},
												"payment_method": {
													"example": "VISA",
													"type": "string"
												},
												"site_id": {
													"example": 123,
													"type": "integer"
												},
												"status": {
													"example": "completed",
													"type": "string"
												},
												"transaction_id": {
													"type": "integer"
												},
												"type": {
													"type": "string"
												},
												"updated": {
													"format": "datetime",
													"type": "string"
												},
												"var1": {
													"type": "string"
												},
												"var2": {
													"type": "string"
												},
												"var3": {
													"type": "string"
												}
											},
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"404": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GenericErrorResponse"
								}
							}
						},
						"description": "Transaction not found"
					}
				},
				"summary": "Get Transaction",
				"tags": [
					"Reconciliation"
				]
			}
		},
		"/ubos/{ubo_id}": {
			"get": {
				"description": "Fetch information about an existing ultimate beneficiary owner",
				"operationId": "GetUbo",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "ubo_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"address": {
													"maxLength": 100,
													"type": "string"
												},
												"address_apartment": {
													"maxLength": 15,
													"type": "string"
												},
												"birthday": {
													"format": "yyyy-mm-dd",
													"type": "string"
												},
												"city": {
													"maxLength": 100,
													"type": "string"
												},
												"country": {
													"format": "country-alpha2",
													"type": "string"
												},
												"country_of_birth": {
													"format": "country-alpha2",
													"type": "string"
												},
												"email": {
													"format": "email",
													"maxLength": 100,
													"type": "string"
												},
												"job_title": {
													"maxLength": 100,
													"type": "string"
												},
												"mobile_phone": {
													"maxLength": 25,
													"type": "string"
												},
												"name": {
													"maxLength": 200,
													"type": "string"
												},
												"office_phone": {
													"maxLength": 25,
													"type": "string"
												},
												"percentage": {
													"type": "integer"
												},
												"state": {
													"maxLength": 100,
													"type": "string"
												},
												"title": {
													"enum": [
														"mr",
														"mrs"
													],
													"type": "string"
												},
												"type": {
													"enum": [
														"control_rights",
														"other",
														"shareholder",
														"voting_rights"
													],
													"type": "string"
												},
												"zipcode": {
													"maxLength": 20,
													"type": "string"
												}
											},
											"required": [
												"type",
												"percentage",
												"title",
												"name",
												"birthday",
												"country_of_birth",
												"job_title",
												"email",
												"country"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"404": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GenericErrorResponse"
								}
							}
						},
						"description": "UBO not found"
					}
				},
				"summary": "Get UBO (BETA)",
				"tags": [
					"Onboard affiliate's"
				]
			},
			"patch": {
				"description": "Update information about an existing ultimate beneficiary owner",
				"operationId": "UpdateUbo",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "ubo_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"additionalProperties": false,
								"properties": {
									"address": {
										"maxLength": 100,
										"type": "string"
									},
									"address_apartment": {
										"maxLength": 15,
										"type": "string"
									},
									"birthday": {
										"format": "yyyy-mm-dd",
										"type": "string"
									},
									"city": {
										"maxLength": 100,
										"type": "string"
									},
									"country": {
										"format": "country-alpha2",
										"type": "string"
									},
									"country_of_birth": {
										"format": "country-alpha2",
										"type": "string"
									},
									"email": {
										"format": "email",
										"maxLength": 100,
										"type": "string"
									},
									"job_title": {
										"maxLength": 100,
										"type": "string"
									},
									"mobile_phone": {
										"maxLength": 25,
										"type": "string"
									},
									"name": {
										"maxLength": 200,
										"type": "string"
									},
									"office_phone": {
										"maxLength": 25,
										"type": "string"
									},
									"percentage": {
										"type": "integer"
									},
									"state": {
										"maxLength": 100,
										"type": "string"
									},
									"title": {
										"enum": [
											"mr",
											"mrs"
										],
										"type": "string"
									},
									"type": {
										"enum": [
											"control_rights",
											"other",
											"shareholder",
											"voting_rights"
										],
										"type": "string"
									},
									"zipcode": {
										"maxLength": 20,
										"type": "string"
									}
								},
								"type": "object"
							}
						}
					},
					"description": "",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"address": {
													"maxLength": 100,
													"type": "string"
												},
												"address_apartment": {
													"maxLength": 15,
													"type": "string"
												},
												"birthday": {
													"format": "yyyy-mm-dd",
													"type": "string"
												},
												"city": {
													"maxLength": 100,
													"type": "string"
												},
												"country": {
													"format": "country-alpha2",
													"type": "string"
												},
												"country_of_birth": {
													"format": "country-alpha2",
													"type": "string"
												},
												"email": {
													"format": "email",
													"maxLength": 100,
													"type": "string"
												},
												"job_title": {
													"maxLength": 100,
													"type": "string"
												},
												"mobile_phone": {
													"maxLength": 25,
													"type": "string"
												},
												"name": {
													"maxLength": 200,
													"type": "string"
												},
												"office_phone": {
													"maxLength": 25,
													"type": "string"
												},
												"percentage": {
													"type": "integer"
												},
												"state": {
													"maxLength": 100,
													"type": "string"
												},
												"title": {
													"enum": [
														"mr",
														"mrs"
													],
													"type": "string"
												},
												"type": {
													"enum": [
														"control_rights",
														"other",
														"shareholder",
														"voting_rights"
													],
													"type": "string"
												},
												"zipcode": {
													"maxLength": 20,
													"type": "string"
												}
											},
											"required": [
												"type",
												"percentage",
												"title",
												"name",
												"birthday",
												"country_of_birth",
												"job_title",
												"email",
												"country"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"404": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GenericErrorResponse"
								}
							}
						},
						"description": "UBO not found"
					},
					"422": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						},
						"description": "Validation errors"
					}
				},
				"summary": "Update UBO (BETA)",
				"tags": [
					"Onboard affiliates"
				]
			}
		},
		"/ubos/{ubo_id}/identitydocs": {
			"get": {
				"description": "List IDs's and/or passports uploaded for an ultimate beneficiary owner",
				"operationId": "ListIdentityDocs",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "ubo_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"items": {
												"additionalProperties": false,
												"properties": {
													"document_type": {
														"enum": [
															"id",
															"passport",
															"driverslicense",
															"proof_of_address"
														],
														"type": "string"
													},
													"encoded_content": {
														"format": "base64-encoded-content",
														"type": "string"
													},
													"filename": {
														"maxLength": 250,
														"type": "string"
													},
													"mime_type": {
														"enum": [
															"application/pdf",
															"image/jpeg",
															"image/png"
														],
														"type": "string"
													}
												},
												"required": [
													"filename",
													"mime_type",
													"encoded_content",
													"document_type"
												],
												"type": "object"
											},
											"type": "array"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					}
				},
				"summary": "List uploaded ID's or passports (BETA)",
				"tags": [
					"Onboard affiliates"
				]
			},
			"post": {
				"description": "Upload an ID or a passport for an ultimate beneficiary owner",
				"operationId": "CreateIdentityDoc",
				"parameters": [
					{
						"description": "",
						"in": "path",
						"name": "ubo_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"additionalProperties": false,
								"properties": {
									"document_type": {
										"enum": [
											"id",
											"passport",
											"driverslicense",
											"proof_of_address"
										],
										"type": "string"
									},
									"encoded_content": {
										"format": "base64-encoded-content",
										"type": "string"
									},
									"filename": {
										"maxLength": 250,
										"type": "string"
									},
									"mime_type": {
										"enum": [
											"application/pdf",
											"image/jpeg",
											"image/png"
										],
										"type": "string"
									}
								},
								"required": [
									"filename",
									"mime_type",
									"encoded_content",
									"document_type"
								],
								"type": "object"
							}
						}
					},
					"description": "",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"additionalProperties": false,
											"properties": {
												"document_type": {
													"enum": [
														"id",
														"passport",
														"driverslicense",
														"proof_of_address"
													],
													"type": "string"
												},
												"encoded_content": {
													"format": "base64-encoded-content",
													"type": "string"
												},
												"filename": {
													"maxLength": 250,
													"type": "string"
												},
												"mime_type": {
													"enum": [
														"application/pdf",
														"image/jpeg",
														"image/png"
													],
													"type": "string"
												}
											},
											"required": [
												"filename",
												"mime_type",
												"encoded_content",
												"document_type"
											],
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"404": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GenericErrorResponse"
								}
							}
						},
						"description": "UBO not found"
					},
					"422": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						},
						"description": "Validation errors"
					}
				},
				"summary": "Upload an ID or a passport (BETA)",
				"tags": [
					"Onboard affiliates"
				]
			}
		},
		"/wallets/sessions/applepay": {
			"post": {
				"description": "",
				"operationId": "Wallet::CreateApplePaySession",
				"parameters": [],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"additionalProperties": false,
								"properties": {
									"origin_domain": {
										"type": "string"
									},
									"validation_url": {
										"format": "url",
										"type": "string"
									}
								},
								"required": [
									"origin_domain",
									"validation_url"
								],
								"type": "object"
							}
						}
					},
					"description": "",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"properties": {
												"session": {
													"type": "string"
												}
											},
											"type": "object"
										},
										"success": {
											"type": "boolean"
										}
									},
									"type": "object"
								}
							}
						},
						"description": ""
					},
					"422": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						},
						"description": "Validation errors"
					}
				},
				"summary": "Create ApplePay session",
				"tags": [
					"Wallets"
				]
			}
		},
		"/orders": {
			"post": {
				"description": "Create an order to collect payment from a customer.\n\n- [Payment links](https://docs.multisafepay.com/payment-links/): Under **Request body schema**, see Payment page.\n- [Recurring payments](https://docs.multisafepay.com/features/recurring-payments/): See `customer.reference`.\n- [Second Chance](https://docs.multisafepay.com/features/second-chance/): See `second_chance`.\n- [Split payments](https://docs.multisafepay.com/features/split-payments/): See `affiliate.split_payments` and `var3`.\n",
				"operationId": "CreateOrder",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"anyOf": [
									{
										"title": "Payment page",
										"description": "Payment page",
										"type": "object",
										"properties": {
											"type": {
												"description": "- `redirect`: Redirects the customer to a [MultiSafepay payment page](https://docs.multisafepay.com/payment-pages/), where they can select a payment method and complete payment. \n- `paymentlink`: Creates a [payment link](https://docs.multisafepay.com/payment-links/).\n",
												"type": "string",
												"enum": [
													"paymentlink",
													"redirect"
												],
												"example": "redirect"
											},
											"gateway": {
												"allOf": [
													{
														"description": "The unique identifier for the payment method (gateway).\n\nIf unset, the payment page displays **all** available payment methods.\n"
													},
													{
														"type": "string"
													},
													{
														"example": "IDEAL"
													},
													{
														"enum": [
															"AFTERPAY",
															"ALIPAY",
															"AMEX",
															"APPLEPAY",
															"BANKTRANS",
															"BELFIUS",
															"CBC",
															"CREDITCARD",
															"DBRTP",
															"DIREB",
															"DIRECTBANK",
															"DOTPAY",
															"EINVOICE",
															"EPS",
															"GIROPAY",
															"GOOGLEPAY",
															"IDEAL",
															"IDEALQR",
															"IN3",
															"KBC",
															"KLARNA",
															"MAESTRO",
															"MASTERCARD",
															"MISTERCASH",
															"PAYAFTER",
															"PAYPAL",
															"SANTANDER",
															"TRUSTLY",
															"TRUSTPAY",
															"VISA",
															"WECHAT",
															"BABYCAD",
															"BEAUTYCAD",
															"BEAUTYWELL",
															"BIERCHEQUE",
															"BLOEMENCAD",
															"BOEKENBON",
															"BOEKENVOOR",
															"EDENCOM",
															"EDENECO",
															"EDENRES",
															"EDENSPORTS",
															"FASHIONCHQ",
															"FASHIONGFT",
															"GEZONDHEID",
															"GOOD4FUN",
															"HUISTUIN",
															"KIDSCADEAU",
															"KLUSCADEAU",
															"NATNLBIOSC",
															"NATENCRD",
															"NATNLETUIN",
															"OHMYGOOD",
															"SPORTENFIT",
															"SPORTSGIFT",
															"VVVGIFTCARD",
															"WIJNCADEAU",
															"YOURGIFT"
														]
													}
												]
											},
											"order_id": {
												"description": "Your unique (client-defined) identifier for the order.",
												"type": "string",
												"maxLength": 50,
												"example": "test-order-0001"
											},
											"currency": {
												"description": "The currency of the payment.",
												"type": "string",
												"maxLength": 3,
												"minLength": 3,
												"format": "ISO-4217 currency code",
												"example": "EUR"
											},
											"amount": {
												"description": "The payment amount in the currency's smallest unit:\n\n- Decimal currencies: Value for 10 EUR = 1000 (1000 cents)\n- Zero-decimal currencies: Value for 10 YEN = 10\n",
												"type": "integer",
												"minimum": 0,
												"example": 1000
											},
											"description": {
												"description": "A description of the customer's order. Appears on MultiSafepay payment pages and customer bank statements (if supported by the bank)",
												"type": "string",
												"maxLength": 200,
												"example": "Test order description"
											},
											"payment_options": {
												"description": "Contains: \n\n- URLs to your success page and cancel page\n- Your [webhook endpoint](https://docs.multisafepay.com/developer/webhooks/)\n- Templates for styling [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/)\n- Settings for displaying available [gift cards](https://docs.multisafepay.com/payment-methods/gift-cards/)\n",
												"type": "object",
												"properties": {
													"notification_url": {
														"description": "The [webhook endpoint](https://docs.multisafepay.com/developer/webhooks/) for MultiSafepay to send status updates and other notifications for this website.",
														"type": "string",
														"format": "url",
														"maxLength": 150,
														"example": "https://www.examplewebsite.com/payment-updates/"
													},
													"notification_method": {
														"description": "Sets the webhook [notification method](https://docs.multisafepay.com/developer/webhooks/).\n\nWe recommend setting this to `POST` to reduce network load and increase security.\n",
														"type": "string",
														"enum": [
															"POST",
															"GET"
														],
														"default": "GET",
														"example": "POST"
													},
													"redirect_url": {
														"description": "The page customers are redirected to:\n\n- After **successful** payment, i.e. your success page, or thank you page\n- If the transaction status is [Uncleared](https://docs.multisafepay.com/about-payments/uncleared-transactions/) \n",
														"type": "string",
														"example": "https://www.example.com/test-order-0001/successful/"
													},
													"cancel_url": {
														"description": "The page customers are redirected to after **unsuccessful** payments.",
														"type": "string",
														"example": "https://www.example.com/test-order-0001/unsuccessful/"
													},
													"close_window": {
														"description": "Whether to display the MultiSafepay payment page in a new window that automatically closes after the customer completes payment.",
														"type": "boolean",
														"default": false,
														"example": false
													},
													"settings": {
														"description": "For [gift card](https://docs.multisafepay.com/payment-methods/gift-cards/) payments.",
														"type": "object",
														"properties": {
															"coupons": {
																"description": "Optional settings for gift cards.",
																"properties": {
																	"allow": {
																		"description": "Specifies which gift cards the customer can pay with.",
																		"type": "array",
																		"example": "EDENCO",
																		"items": {
																			"type": "string",
																			"enum": [
																				"BABYCAD",
																				"BEAUTYWELL",
																				"BLOEMENCAD",
																				"BOEKENBON",
																				"DEGROTESPL",
																				"EDENCOM",
																				"EDENCO",
																				"EDENRES",
																				"EDENSPORTS",
																				"FASHIONCHQ",
																				"FASHIONGFT",
																				"FIETSENBON",
																				"GOOD4FUN",
																				"GEZONDHEID",
																				"NATNLBIOSC",
																				"NATNLETUIN",
																				"PARFUMCADE",
																				"SPORTENFIT",
																				"VRGIFTCARD",
																				"VVVGIFTCRD",
																				"WEBSHOPGFT",
																				"WIJNCADEAU",
																				"YOURGIFT"
																			]
																		}
																	}
																}
															}
														}
													},
													"template_id": {
														"description": "Apply a template for styling [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/styling/).\n\nIf `payment_options.template` is also set, `payment_options.template` is used.\n",
														"type": "string"
													},
													"template": {
														"description": "Applies a template object structure for styling [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/styling/).\n\nOverrides the `payment_options.template_id`.\n",
														"properties": {
															"version": {
																"description": "The version of the template.",
																"type": "string"
															},
															"settings": {
																"description": "Sets whether to display or hide email elements, e.g. buttons, logos.",
																"type": "object",
																"properties": {
																	"hide_logo": {
																		"description": "Whether to hide the email header logo.",
																		"type": "boolean"
																	},
																	"iframe_mode": {
																		"description": "Whether to hide iframe elements.",
																		"type": "boolean"
																	},
																	"hide_flags": {
																		"description": "Whether to hide the flags container.",
																		"type": "boolean"
																	},
																	"hide_powered": {
																		"description": "Whether to hide the powered link.",
																		"type": "boolean"
																	},
																	"hide_cart": {
																		"description": "Whether to hide the shopping cart container.",
																		"type": "boolean"
																	},
																	"hide_btn_cancel": {
																		"description": "Whether to hide the **Cancel** button.",
																		"type": "boolean"
																	},
																	"hide_cc_logos": {
																		"description": "Whether to hide credit card logos.",
																		"type": "boolean"
																	},
																	"hide_btn_all_methods": {
																		"description": "Whether to hide the **All methods** button.",
																		"type": "boolean"
																	}
																}
															},
															"header": {
																"description": "Settings for the header logo, cover image, background, and font.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"logo": {
																			"description": "Your logo to display in the email header.",
																			"type": "object",
																			"properties": {
																				"image": {
																					"description": "The filename of the logo to display.",
																					"type": "string"
																				}
																			}
																		},
																		"cover": {
																			"description": "Resize the background image to cover the entire header container.",
																			"type": "object",
																			"properties": {
																				"image": {
																					"description": "The cover image.",
																					"type": "string"
																				}
																			}
																		},
																		"background": {
																			"description": "The header background.",
																			"type": "string"
																		},
																		"text": {
																			"description": "The header font color.",
																			"type": "string"
																		}
																	}
																}
															},
															"body": {
																"description": "Settings for the email body.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"text": {
																			"description": "The body font color.",
																			"type": "string"
																		},
																		"background": {
																			"description": "The body background color.",
																			"type": "string"
																		},
																		"link": {
																			"description": "Settings for links in the email body.",
																			"type": "object",
																			"properties": {
																				"text": {
																					"description": "The link text color in the email body.",
																					"type": "string"
																				},
																				"hover": {
																					"description": "Settings for hovering over links in the email body.",
																					"type": "object",
																					"properties": {
																						"text": {
																							"description": "The link text color on hover in the body.",
																							"type": "string"
																						},
																						"border": {
																							"description": "The link border color on hover in the body.",
																							"type": "string"
																						}
																					}
																				}
																			}
																		}
																	}
																}
															},
															"container": {
																"description": "Settings for the container element.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"text": {
																			"description": "The color of text in the container.",
																			"type": "string"
																		},
																		"background": {
																			"description": "The color of the container background.",
																			"type": "string"
																		},
																		"link": {
																			"description": "Settings for links in the container.",
																			"type": "object",
																			"properties": {
																				"text": {
																					"description": "The link text color in the container.",
																					"type": "string"
																				}
																			}
																		}
																	}
																}
															},
															"cart": {
																"description": "Settings for the cart element.",
																"type": "object",
																"properties": {
																	"text": {
																		"description": "The text color in the cart.",
																		"type": "string"
																	},
																	"label": {
																		"description": "The color of labels in the cart.",
																		"type": "string"
																	},
																	"background": {
																		"description": "The background color of the cart.",
																		"type": "string"
																	},
																	"border": {
																		"description": "The border color of the cart.",
																		"type": "string"
																	}
																}
															},
															"payment_form": {
																"description": "Settings for the payment form in the email.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"text": {
																			"description": "The text color in the payment form.",
																			"type": "string"
																		},
																		"background": {
																			"description": "The background color of the payment form.",
																			"type": "string"
																		},
																		"border": {
																			"description": "The border color of the payment form.",
																			"type": "string"
																		},
																		"inputs": {
																			"description": "Settings for the payment form button.",
																			"type": "object",
																			"properties": {
																				"border": {
																					"description": "The color of the payment form button border.",
																					"type": "string"
																				},
																				"label": {
																					"description": "The call to action in the payment form button.",
																					"type": "string"
																				}
																			}
																		}
																	}
																}
															},
															"buttons": {
																"description": "Settings for buttons in the email.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"payment_method": {
																			"description": "Settings for the payment method button.",
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"background": {
																						"description": "The payment method button background color.",
																						"type": "string"
																					},
																					"text": {
																						"description": "The payment method button text color.",
																						"type": "string"
																					},
																					"border": {
																						"description": "The payment method button border color.",
																						"type": "string"
																					},
																					"hover": {
																						"description": "Settings when hovering over the payment method button.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The payment method button background color on hover.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The payment method button text color on hover.",
																								"type": "string"
																							},
																							"border": {
																								"description": "The payment method button border color on hover.",
																								"type": "string"
																							}
																						}
																					},
																					"active": {
																						"description": "Settings for when the payment method button is active.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The payment method button background color when active.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The payment method button text color when active.",
																								"type": "string"
																							},
																							"border": {
																								"description": "The payment method button border color when active.",
																								"type": "string"
																							}
																						}
																					}
																				}
																			}
																		},
																		"secondary": {
																			"description": "Settings for the secondary button.",
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"background": {
																						"description": "The secondary button background color.",
																						"type": "string"
																					},
																					"text": {
																						"description": "The secondary button text color.",
																						"type": "string"
																					},
																					"hover": {
																						"description": "Settings for the secondary button on hover.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The secondary button background color on hover.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The secondary button text color on hover.",
																								"type": "string"
																							}
																						}
																					}
																				}
																			}
																		},
																		"primary": {
																			"description": "Settings for the primary button.",
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"background": {
																						"description": "The primary button background color.",
																						"type": "string"
																					},
																					"text": {
																						"description": "The primary button text color.",
																						"type": "string"
																					},
																					"hover": {
																						"description": "Settings for the primary button on hover.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The primary button background color on hover.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The primary button text color on hover.",
																								"type": "string"
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											},
											"customer": {
												"allOf": [
													{
														"type": "object",
														"description": "The customer’s personal information.\n\n**Required for**: All orders **except** Apple Pay and Google Pay, and Belfius, iDEAL, and WeChat Pay `direct` orders.\n",
														"properties": {
															"locale": {
																"type": "string",
																"description": "- Localizes [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/) for the customer’s language, region, available payment methods, and any UI preferences.\n- Sends [email templates](https://docs.multisafepay.com/features/email-templates/) in the customer's preferred language. If set, `locale` overrides the language set in an email template.\n- Displays local variants of payment methods, e.g. to display:\n  - [Cartes Bancaires](https://docs.multisafepay.com/payment-methods/cartes-bancaires), set to `fr_FR`.\n  - [Dankort](https://docs.multisafepay.com/payment-methods/dankort), set to `da_DK`.\n  - [Postepay](https://docs.multisafepay.com/payment-methods/postepay), set to `it_IT`.\n\n**Required for:** Bancontact\n\n|Locale|Language & country|\n|--------|--------|\n|`de_AT`|German Austria|\n|`de_DE`|German Germany|\n|`en_US`|American English|\n|`fi_FI`|Finnish|\n|`fr_BE`|French Belgium|\n|`it_IT`|Italian|\n|`nl_BE`|Dutch Belgium|\n|`nl_NL`|Dutch Netherlands|\n|`pl_PL`|Polish|\n|`es_ES`|Spanish|\n|`sv_SE`|Swedish|\n|`zh_CN`|Chinese|\n",
																"format": "ab_CD with ISO 639 language codes and ISO 3166 country codes",
																"enum": [
																	"de_AT",
																	"de_DE",
																	"en_US",
																	"fi_FI",
																	"fr_BE",
																	"it_IT",
																	"nl_BE",
																	"nl_NL",
																	"pl_PL",
																	"es_ES",
																	"sv_SE",
																	"zh_CN"
																],
																"example": "nl_NL",
																"default": "en_US"
															},
															"ip_address": {
																"description": "The customer’s IP address.\n\n**Required for:** Pay later, credit card, and Payment Component orders for our fraud check. If empty or incorrect (e.g. your IP address instead of the customer’s), the transaction status may be **Uncleared**, or even **Declined**.\n\n\n**Recommended** but not required for other payment methods.\n\nTo retrieve the customer's IP address if there is:\n- A proxy, use `forwarded_ip`.\n- No proxy, use `ip_address`.\n",
																"type": "string",
																"format": "IP address",
																"example": "123.123.123.123"
															},
															"forwarded_ip": {
																"description": "The [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For) header of the customer object when using a proxy.\n\nTo retrieve the customer's IP address if there is:\n- A proxy, use `forwarded_ip`.\n- No proxy, use `ip_address`.\n",
																"type": "string",
																"format": "IPv4"
															},
															"first_name": {
																"description": "The customer’s first name.\n\nWe recommend always requiring the customer to provide their full name, instead of initials or abbreviations.\n",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Simon"
															},
															"last_name": {
																"description": "The customer’s last name.",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Smit"
															},
															"gender": {
																"description": "The customer's gender.",
																"type": "string",
																"maxLength": 1,
																"enum": [
																	"M",
																	"F"
																],
																"example": "M"
															},
															"birthday": {
																"description": "The customer's date of birth.",
																"type": "string",
																"format": "yyyy-MM-dd",
																"example": "1980-12-31"
															},
															"address1": {
																"description": "The first line of the address.",
																"type": "string",
																"maxLength": 64,
																"example": "Kraanspoor"
															},
															"address2": {
																"description": "The second line of the address.",
																"type": "string",
																"maxLength": 64,
																"example": "39"
															},
															"house_number": {
																"description": "The house number of the address.",
																"type": "string",
																"maxLength": 10,
																"example": "39C"
															},
															"zip_code": {
																"description": "The ZIP code of the address.",
																"type": "string",
																"maxLength": 10,
																"example": "1033 SC"
															},
															"city": {
																"description": "The city of the address.",
																"type": "string",
																"maxLength": 50,
																"example": "Amsterdam"
															},
															"state": {
																"description": "The state of the address. \n\n**Required for:** PayPal Seller Protection\n",
																"type": "string",
																"maxLength": 6
															},
															"country": {
																"description": "The country of the address.\n\n**Required for:** Bank Transfer and PayPal Seller Protection\n",
																"type": "string",
																"format": "country alpha-2",
																"example": "NL"
															},
															"phone": {
																"description": "The customer’s phone number.",
																"type": "string",
																"maxLength": 24,
																"example": "0208500500"
															},
															"email": {
																"description": "The customer’s email address.\n\nUsed for [Second Chance](https://docs.multisafepay.com/features/second-chance/) emails and fraud checks.\n\n**Required for:** Bank Transfer\n",
																"type": "string",
																"example": "customer@emailprovider.com"
															},
															"user_agent": {
																"description": "The characteristic string that identifies the customer's browser.",
																"type": "string",
																"example": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
															},
															"referrer": {
																"description": "The unique identifier for where the customer/browser originates from.",
																"type": "string"
															},
															"reference": {
																"description": "Your unique client-defined identifier for your customer.\n\n**Required for:** [Recurring payments](https://docs.multisafepay.com/api/#recurring-payments-orders) orders, both initial and subsequent payments.\n",
																"type": "string",
																"example": "customer-0001"
															}
														}
													}
												]
											},
											"gateway_info": {
												"allOf": [
													{
														"description": "Information specific to the payment method (gateway). \n\n**Required for:**\n\n- Credit and debit card orders\n- Apple Pay, Google Pay, and SEPA Direct Debit direct orders\n- Bancontact QR and iDEAL QR orders\n- AfterPay, E-Invoicing, in3, Klarna, and Pay After Delivery orders for credit checks in the Netherlands and Belgium\n- [Flexible 3D orders](https://docs.multisafepay.com/features/3d-secure/flexible/)\n- [MOTO orders](https://docs.multisafepay.com/features/moto/) \n",
														"type": "object",
														"properties": {
															"card_number": {
																"description": "The credit or debit card number.",
																"type": "string",
																"example": "4111111111111111"
															},
															"card_holder_name": {
																"description": "The cardholder's name.",
																"type": "string",
																"example": "John Doe"
															},
															"card_expiry_date": {
																"description": "The card expiry date.",
																"type": "integer",
																"format": "MMYY",
																"example": 1225
															},
															"card_cvc": {
																"description": "The card verification code (CVC) – a 3 or 4 digit number used as an additional security feature for card-not-present transactions.  \n\n**Required for:** All credit and debit card payments, **except** for Maestro and [Recurring payments](https://docs.multisafepay.com/features/recurring-payments/)\n",
																"type": "string",
																"example": "123"
															},
															"flexible_3d": {
																"description": "For Flexible 3D orders (**required**), whether or not 3D Secure authentication is required.",
																"type": "boolean",
																"example": true
															},
															"moto": {
																"description": "For MOTO orders (**required**), whether to create a MOTO order.",
																"type": "boolean",
																"example": false
															},
															"term_url": {
																"description": "For Flexible 3D orders (**required**), the URL that tells the card issuer where to redirect the authentication query.",
																"type": "string",
																"format": "URL",
																"example": "https://example.com/?type=term&api_key=<api_key>"
															},
															"issuer_id": {
																"description": "The unique identifier of the gateway issuer.\n\n**Required for:** `direct` orders\n",
																"type": "string",
																"example": "0021"
															},
															"payment_token": {
																"description": "**Required for:** Apple Pay `direct` orders, the JSON-encoded `payment.token` with the customer’s encrypted payment details, generated by the Apple Pay JS API.\n\n\nSee:\n\n- Apple Pay direct integration – [Create an order](https://docs.multisafepay.com/payments/methods/wallet/applepay/direct-integration/#client-side-integration-1) \n- Apple Developer – [ApplePayPaymentToken](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymenttoken)\n\n**Required for:** Google Pay `direct` orders, the payment token returned from the client-side Google Pay API request.\n\n\nAccess the token at `PaymentData.PaymentMethodData.PaymentMethodTokenizationData.token`.\n\n\nSee [Google Pay direct integration](https://docs.multisafepay.com/payments/methods/wallet/googlepay/direct-integration/).\n",
																"type": "string"
															},
															"qr_enabled": {
																"description": "Whether to generate a [Bancontact QR](https://docs.multisafepay.com/payment-methods/bancontact/) code.",
																"type": "boolean",
																"example": false
															},
															"qr_size": {
																"description": "For iDEAL QR orders, sets the width and height of the QR image in pixels. \n\n\nSizes are between 100 and 2000 pixels. If the value does not meet this rule, the default is used.\n\n\nDefault: 250 (250 by 250 pixels).\n",
																"type": "integer"
															},
															"allow_multiple": {
																"description": "For iDEAL QR orders, sets whether the QR code can be used more than once.",
																"type": "boolean",
																"example": false
															},
															"allow_change_amount": {
																"description": "For iDEAL QR orders, sets whether the customer can change the amount to pay. \n\nYou must then also set `min_amount` and `max_amount`.\n",
																"type": "boolean"
															},
															"min_amount": {
																"description": "For iDEAL QR orders, sets a minimum amount that the customer must pay.\n\n\nThe `min_amount` must be lower than the `amount`.\n\n\nIf `min_amount` is not set, but `max_amount` is set, then the `amount` value is used as the `min_amount`.\n\n\n**Required if:** `allow_change_amount` is set to true.\n",
																"type": "string"
															},
															"max_amount": {
																"description": "For iDEAL QR orders, sets a maximum amount that the customer can pay.\n\n\nThe `max_amount` must be higher than the `amount`.\n\n\nIf `max_amount` is not set, but `min_amount` is set, then the `amount` value is used as the `max_amount`.\n\n\n**Required if:** `allow_change_amount` is set to true.\n",
																"type": "string"
															},
															"account_id": {
																"description": "For SEPA Direct Debit `direct` orders (**required**), the international bank account number (IBAN).",
																"type": "string"
															},
															"account_holder_name": {
																"description": "For SEPA Direct Debit `direct` orders (**required**), the name of the account holder.",
																"type": "string"
															},
															"account_holder_iban": {
																"description": "For SEPA Direct Debit `direct` orders (**required**), the international bank account number (IBAN).",
																"type": "string"
															},
															"emandate": {
																"description": "For SEPA Direct Debit `direct` orders (**required**), the unique emandate identifier (for your own administration).",
																"type": "string"
															},
															"birthday": {
																"description": "For pay later orders (**required**), the customer’s date of birth.",
																"type": "string",
																"format": "yyyy-mm-dd"
															},
															"bank_account": {
																"description": "For pay later orders (**required**), the customer’s international bank account number (IBAN).",
																"type": "string"
															},
															"phone": {
																"description": "For pay later orders (**required**), the customer's phone number.",
																"type": "string"
															},
															"email": {
																"description": "For pay later orders (**required**), the customer's email address to send payment instructions to.",
																"type": "string"
															}
														}
													},
													{
														"required": [
															"card_holder_name",
															"card_number",
															"card_expiry_date"
														]
													}
												]
											},
											"delivery": {
												"allOf": [
													{
														"description": "The customer's shipping address.",
														"type": "object",
														"properties": {
															"first_name": {
																"description": "The customer’s first name.\n\nWe recommend always requiring the customer to provide their full name, instead of initials or abbreviations.\n",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Simon"
															},
															"last_name": {
																"description": "The customer’s last name.",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Smit"
															},
															"address1": {
																"description": "The first line of the address.",
																"type": "string",
																"maxLength": 64,
																"example": "Kraanspoor"
															},
															"house_number": {
																"description": "The apartment number of the address.",
																"type": "string",
																"maxLength": 9,
																"example": "B"
															},
															"zip_code": {
																"description": "The ZIP code of the address.",
																"type": "string",
																"maxLength": 10,
																"example": "1033 SC"
															},
															"city": {
																"description": "The city of the address.",
																"type": "string",
																"maxLength": 50,
																"example": "Amsterdam"
															},
															"country": {
																"description": "The country of the address.",
																"type": "string",
																"format": "country alpha-2",
																"example": "NL"
															}
														}
													},
													{
														"required": [
															"address1",
															"city",
															"country",
															"first_name",
															"house_number",
															"last_name",
															"zip_code"
														]
													}
												]
											},
											"checkout_options": {
												"allOf": [
													{
														"description": "Settings for the shopping cart, including taxes and validation.",
														"type": "object",
														"properties": {
															"validate_cart": {
																"description": "If set to `true`, the value of `amount` is compared to the calculated total value of the shopping cart (returned as `order_total`).\n\nIf the values:\n\n- Match, the request is successful.\n- Don’t match, the request is unsuccessful and error_code 1027 is returned.\n",
																"type": "boolean",
																"default": false
															},
															"tax_tables": {
																"description": "Sets default VAT settings and creates VAT classes in the alternate array, which you can apply to individual shopping cart items.",
																"type": "object",
																"properties": {
																	"default": {
																		"description": "The default VAT setting. Used when no value is set for `shopping_cart.items.tax_table_selector`.",
																		"type": "object",
																		"properties": {
																			"shipping_taxed": {
																				"description": "Sets whether or not the shipping costs are taxed.",
																				"type": "boolean"
																			},
																			"rate": {
																				"description": "The tax rate percentage as a fraction, e.g. 15% is expressed as `0.15`.",
																				"type": "number",
																				"format": "float",
																				"minimum": 0,
																				"example": 0.15
																			}
																		}
																	},
																	"alternate": {
																		"description": "An array of client-defined VAT classes that you can apply to items in the shopping cart.",
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"name": {
																					"description": "The client-defined ID. Applies tax settings to items in the shopping cart through the `shopping_cart.items.tax_table_selector` attribute.",
																					"type": "string"
																				},
																				"standalone": {
																					"description": "Sets whether or not the shipping costs are taxed.",
																					"type": "boolean"
																				},
																				"rules": {
																					"type": "array",
																					"items": {
																						"type": "object",
																						"properties": {
																							"rate": {
																								"description": "The tax rate percentage expressed as a fraction.",
																								"type": "number",
																								"format": "float",
																								"example": 0.0825,
																								"minimum": 0
																							},
																							"country": {
																								"description": "The country where the tax rate applies.",
																								"type": "string",
																								"format": "country alpha-2",
																								"example": "US"
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												]
											},
											"shopping_cart": {
												"description": "The array of items in the customer's shopping cart, including the tax class as defined in `checkout_options`.\n\nIf you have a self-made integration, include the complete specification of the `shopping_cart`.\n",
												"type": "object",
												"properties": {
													"items": {
														"description": "The items in the customer's shopping cart. Specify the relevant tax ruling per item.",
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"name": {
																	"description": "The name of the product or service.",
																	"type": "string",
																	"example": "Backpack"
																},
																"description": {
																	"description": "A description of the product or service.",
																	"type": "string",
																	"example": "Black cotton backpack with logo."
																},
																"unit_price": {
																	"description": "The unit price (in decimals) of the item, excluding VAT.\n\nThe currency of the shopping cart is set at order level using `currency`. \n\n**Example:** The value for a €90 backpack is `90`.\n",
																	"type": "number",
																	"format": "float",
																	"example": 90
																},
																"quantity": {
																	"description": "The number of units of the item.",
																	"type": "integer",
																	"example": 1
																},
																"merchant_item_id": {
																	"description": "Your unique (client-defined) identifier for the product or service.\n\nIf this item specifies the shipping costs, set to `msp-shipping`.\n",
																	"type": "string",
																	"example": "12345678"
																},
																"tax_table_selector": {
																	"description": "Your client-defined identifier for a tax table, specified as `checkout_options.tax_tables.alternate.name`.",
																	"type": "string",
																	"example": "VAT-21"
																},
																"weight": {
																	"description": "The weight per product.",
																	"type": "object",
																	"properties": {
																		"unit": {
																			"description": "The unit of weight.",
																			"type": "string",
																			"enum": [
																				"KG"
																			],
																			"example": "KG"
																		},
																		"value": {
																			"description": "The weight of the item corresponding to the unit.\n\nFor a 2 kilogram product:\n- Set `value` to `2`.\n- Set `unit` to `KG`.\n",
																			"type": "number",
																			"example": 2
																		}
																	}
																}
															}
														}
													}
												}
											},
											"items": {
												"description": "An HTML string to display the order items on the MultiSafepay payment page, instead of including a `shopping_cart`.",
												"type": "string",
												"example": "<ol><li>Article 1: € 1,95</li><li>Article 2: € 2,95</li><li>Article 3: € 3,95</li></ol>"
											},
											"affiliate": {
												"description": "For [Split Payments](https://docs.multisafepay.com/features/split-payments/) (**required**).",
												"type": "object",
												"properties": {
													"split_payments": {
														"description": "Split the amount of a transaction between partner/primary and affiliated accounts by a percentage, a fixed amount, or both.\n\nFor every split payment rule, add an object to the array.\n",
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"merchant": {
																	"description": "The account ID of the affiliated account.",
																	"type": "string",
																	"example": 1001001
																},
																"fixed": {
																	"description": "The amount to split in cents.",
																	"type": "integer",
																	"minimum": 1
																},
																"percentage": {
																	"description": "A percentage of the amount to split.",
																	"type": "number",
																	"format": "float",
																	"minimum": 1
																},
																"description": {
																	"description": "A description of the split payment.",
																	"type": "string"
																}
															}
														}
													}
												}
											},
											"second_chance": {
												"description": "For [Second Chance](https://docs.multisafepay.com/features/second-chance/).",
												"type": "object",
												"properties": {
													"send_mail": {
														"description": "Whether to send reminder emails if the customer doesn't complete payment.\n\n\n **Suppressing Second Chance emails after cancellation**\n\n\n When a customer places an order, goes to your checkout, doesn’t complete payment, but later returns and tries to pay again, some webshops create a second order. \n \n \n If Second Chance emails are enabled, the customer still receives emails for the first order, even after they complete payment for the second order.\n\n Cancelling the first order does **not** suppress Second Chance emails. To suppress emails, make an Update order details: CancelOrder request.\n",
														"type": "boolean"
													}
												}
											},
											"custom_info": {
												"description": "Additional information about the order.",
												"type": "object",
												"properties": {
													"custom_1": {
														"description": "Information about the order.",
														"type": "string"
													},
													"custom_2": {
														"description": "Information about the order.",
														"type": "string"
													},
													"custom_3": {
														"description": "Information about the order.",
														"type": "string"
													}
												}
											},
											"days_active": {
												"description": "For `redirect` and `paymentlink` orders, sets the number of days the link to the MultiSafepay payment page is valid.\n\nThe link lifetime begins when the order is created, or the link is generated. A `session_id` is returned in the payment page URL.\n\nIf [Second Chance](https://docs.multisafepay.com/features/second-chance/) is enabled, we recommend a minimum lifetime of **48 hours**. Second Chance emails the customer 2 payment reminders: 1 hour and 24 hours after the order is created. If the lifetime is less than 24 hours, the link in the second email is no longer active when the customer receives it. \n\nSee `seconds_active` below. If `seconds_active` is also set, `seconds_active` is used. If neither is set, the default is used.\n",
												"type": "integer",
												"minimum": 1,
												"default": 30,
												"example": 30
											},
											"seconds_active": {
												"description": "For `redirect` and `paymentlink` orders, sets the number of seconds the link to the MultiSafepay payment page is valid.\n\nSee `days_active` above. If `days_active` is also set, `seconds_active` is used. If neither is set, the default is used.\n",
												"type": "integer",
												"minimum": 1,
												"default": 2592000
											},
											"var1": {
												"type": "string",
												"description": "Variable for storing additional data.",
												"maxLength": 500
											},
											"var2": {
												"type": "string",
												"description": "Variable for storing additional data.",
												"maxLength": 500
											},
											"var3": {
												"type": "string",
												"description": "Variable for storing additional data, including [Split Payments](https://docs.multisafepay.com/features/split-payments/) metadata.",
												"maxLength": 500
											},
											"plugin": {
												"description": "Information about your integration (useful for debugging).",
												"properties": {
													"shop": {
														"description": "The name of your ecommerce application.",
														"type": "string",
														"example": "My self-made integration"
													},
													"shop_version": {
														"description": "The version of your ecommerce application.",
														"type": "string"
													},
													"plugin_version": {
														"description": "The version of your integration.",
														"type": "string",
														"example": "1.0.0"
													},
													"partner": {
														"description": "The name of the third party that developed the ecommerce application (if relevant).",
														"type": "string"
													},
													"shop_root_url": {
														"description": "The root/base URL of the ecommerce application.",
														"type": "string",
														"example": "https://www.my-ecommerce.com"
													}
												}
											}
										},
										"required": [
											"amount",
											"currency",
											"description",
											"order_id",
											"type"
										]
									},
									{
										"title": "Banking order",
										"description": "Banking order",
										"type": "object",
										"properties": {
											"type": {
												"description": "- `redirect`: Redirects the customer to a [MultiSafepay payment page](https://docs.multisafepay.com/payment-pages/), where they can select a payment method and complete payment. \n- `direct`: Redirects the customer to an authentication or success page, depending on the payment method. \n\nFor more information, see [Direct vs redirect API requests](https://docs.multisafepay.com/developer/direct-vs-redirect).\n",
												"type": "string",
												"enum": [
													"direct",
													"redirect"
												],
												"example": "redirect"
											},
											"gateway": {
												"allOf": [
													{
														"description": "The unique gateway identifier for the payment method.<br><br>If unset for `redirect` orders, the payment page displays **all** available payment methods."
													},
													{
														"type": "string"
													},
													{
														"example": "IDEAL"
													},
													{
														"enum": [
															"BANKTRANS",
															"BELFIUS",
															"CBC",
															"DBRTP",
															"DIREB",
															"DIRECTBANK",
															"DOTPAY",
															"EPS",
															"GIROPAY",
															"IDEAL",
															"IDEALQR",
															"KBC",
															"TRUSTLY",
															"TRUSTPAY"
														]
													}
												]
											},
											"order_id": {
												"description": "Your unique (client-defined) identifier for the order.",
												"type": "string",
												"maxLength": 50,
												"example": "test-order-0001"
											},
											"currency": {
												"description": "The currency of the payment.",
												"type": "string",
												"maxLength": 3,
												"minLength": 3,
												"format": "ISO-4217 currency code",
												"example": "EUR"
											},
											"amount": {
												"description": "The payment amount in the currency's smallest unit:\n\n- Decimal currencies: Value for 10 EUR = 1000 (1000 cents)\n- Zero-decimal currencies: Value for 10 YEN = 10\n",
												"type": "integer",
												"minimum": 0,
												"example": 1000
											},
											"description": {
												"description": "A description of the customer's order. Appears on MultiSafepay payment pages and customer bank statements (if supported by the bank)",
												"type": "string",
												"maxLength": 200,
												"example": "Test order description"
											},
											"payment_options": {
												"description": "Contains: \n\n- URLs to your success page and cancel page\n- Your [webhook endpoint](https://docs.multisafepay.com/developer/webhooks/)\n- Templates for styling [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/)\n- Settings for displaying available [gift cards](https://docs.multisafepay.com/payment-methods/gift-cards/)\n",
												"type": "object",
												"properties": {
													"notification_url": {
														"description": "The [webhook endpoint](https://docs.multisafepay.com/developer/webhooks/) for MultiSafepay to send status updates and other notifications for this website.",
														"type": "string",
														"format": "url",
														"maxLength": 150,
														"example": "https://www.examplewebsite.com/payment-updates/"
													},
													"notification_method": {
														"description": "Sets the webhook [notification method](https://docs.multisafepay.com/developer/webhooks/).\n\nWe recommend setting this to `POST` to reduce network load and increase security.\n",
														"type": "string",
														"enum": [
															"POST",
															"GET"
														],
														"default": "GET",
														"example": "POST"
													},
													"redirect_url": {
														"description": "The page customers are redirected to:\n\n- After **successful** payment, i.e. your success page, or thank you page\n- If the transaction status is [Uncleared](https://docs.multisafepay.com/about-payments/uncleared-transactions/) \n",
														"type": "string",
														"example": "https://www.example.com/test-order-0001/successful/"
													},
													"cancel_url": {
														"description": "The page customers are redirected to after **unsuccessful** payments.",
														"type": "string",
														"example": "https://www.example.com/test-order-0001/unsuccessful/"
													},
													"close_window": {
														"description": "Whether to display the MultiSafepay payment page in a new window that automatically closes after the customer completes payment.",
														"type": "boolean",
														"default": false,
														"example": false
													},
													"settings": {
														"description": "For [gift card](https://docs.multisafepay.com/payment-methods/gift-cards/) payments.",
														"type": "object",
														"properties": {
															"coupons": {
																"description": "Optional settings for gift cards.",
																"properties": {
																	"allow": {
																		"description": "Specifies which gift cards the customer can pay with.",
																		"type": "array",
																		"example": "EDENCO",
																		"items": {
																			"type": "string",
																			"enum": [
																				"BABYCAD",
																				"BEAUTYWELL",
																				"BLOEMENCAD",
																				"BOEKENBON",
																				"DEGROTESPL",
																				"EDENCOM",
																				"EDENCO",
																				"EDENRES",
																				"EDENSPORTS",
																				"FASHIONCHQ",
																				"FASHIONGFT",
																				"FIETSENBON",
																				"GOOD4FUN",
																				"GEZONDHEID",
																				"NATNLBIOSC",
																				"NATNLETUIN",
																				"PARFUMCADE",
																				"SPORTENFIT",
																				"VRGIFTCARD",
																				"VVVGIFTCRD",
																				"WEBSHOPGFT",
																				"WIJNCADEAU",
																				"YOURGIFT"
																			]
																		}
																	}
																}
															}
														}
													},
													"template_id": {
														"description": "Apply a template for styling [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/styling/).\n\nIf `payment_options.template` is also set, `payment_options.template` is used.\n",
														"type": "string"
													},
													"template": {
														"description": "Applies a template object structure for styling [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/styling/).\n\nOverrides the `payment_options.template_id`.\n",
														"properties": {
															"version": {
																"description": "The version of the template.",
																"type": "string"
															},
															"settings": {
																"description": "Sets whether to display or hide email elements, e.g. buttons, logos.",
																"type": "object",
																"properties": {
																	"hide_logo": {
																		"description": "Whether to hide the email header logo.",
																		"type": "boolean"
																	},
																	"iframe_mode": {
																		"description": "Whether to hide iframe elements.",
																		"type": "boolean"
																	},
																	"hide_flags": {
																		"description": "Whether to hide the flags container.",
																		"type": "boolean"
																	},
																	"hide_powered": {
																		"description": "Whether to hide the powered link.",
																		"type": "boolean"
																	},
																	"hide_cart": {
																		"description": "Whether to hide the shopping cart container.",
																		"type": "boolean"
																	},
																	"hide_btn_cancel": {
																		"description": "Whether to hide the **Cancel** button.",
																		"type": "boolean"
																	},
																	"hide_cc_logos": {
																		"description": "Whether to hide credit card logos.",
																		"type": "boolean"
																	},
																	"hide_btn_all_methods": {
																		"description": "Whether to hide the **All methods** button.",
																		"type": "boolean"
																	}
																}
															},
															"header": {
																"description": "Settings for the header logo, cover image, background, and font.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"logo": {
																			"description": "Your logo to display in the email header.",
																			"type": "object",
																			"properties": {
																				"image": {
																					"description": "The filename of the logo to display.",
																					"type": "string"
																				}
																			}
																		},
																		"cover": {
																			"description": "Resize the background image to cover the entire header container.",
																			"type": "object",
																			"properties": {
																				"image": {
																					"description": "The cover image.",
																					"type": "string"
																				}
																			}
																		},
																		"background": {
																			"description": "The header background.",
																			"type": "string"
																		},
																		"text": {
																			"description": "The header font color.",
																			"type": "string"
																		}
																	}
																}
															},
															"body": {
																"description": "Settings for the email body.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"text": {
																			"description": "The body font color.",
																			"type": "string"
																		},
																		"background": {
																			"description": "The body background color.",
																			"type": "string"
																		},
																		"link": {
																			"description": "Settings for links in the email body.",
																			"type": "object",
																			"properties": {
																				"text": {
																					"description": "The link text color in the email body.",
																					"type": "string"
																				},
																				"hover": {
																					"description": "Settings for hovering over links in the email body.",
																					"type": "object",
																					"properties": {
																						"text": {
																							"description": "The link text color on hover in the body.",
																							"type": "string"
																						},
																						"border": {
																							"description": "The link border color on hover in the body.",
																							"type": "string"
																						}
																					}
																				}
																			}
																		}
																	}
																}
															},
															"container": {
																"description": "Settings for the container element.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"text": {
																			"description": "The color of text in the container.",
																			"type": "string"
																		},
																		"background": {
																			"description": "The color of the container background.",
																			"type": "string"
																		},
																		"link": {
																			"description": "Settings for links in the container.",
																			"type": "object",
																			"properties": {
																				"text": {
																					"description": "The link text color in the container.",
																					"type": "string"
																				}
																			}
																		}
																	}
																}
															},
															"cart": {
																"description": "Settings for the cart element.",
																"type": "object",
																"properties": {
																	"text": {
																		"description": "The text color in the cart.",
																		"type": "string"
																	},
																	"label": {
																		"description": "The color of labels in the cart.",
																		"type": "string"
																	},
																	"background": {
																		"description": "The background color of the cart.",
																		"type": "string"
																	},
																	"border": {
																		"description": "The border color of the cart.",
																		"type": "string"
																	}
																}
															},
															"payment_form": {
																"description": "Settings for the payment form in the email.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"text": {
																			"description": "The text color in the payment form.",
																			"type": "string"
																		},
																		"background": {
																			"description": "The background color of the payment form.",
																			"type": "string"
																		},
																		"border": {
																			"description": "The border color of the payment form.",
																			"type": "string"
																		},
																		"inputs": {
																			"description": "Settings for the payment form button.",
																			"type": "object",
																			"properties": {
																				"border": {
																					"description": "The color of the payment form button border.",
																					"type": "string"
																				},
																				"label": {
																					"description": "The call to action in the payment form button.",
																					"type": "string"
																				}
																			}
																		}
																	}
																}
															},
															"buttons": {
																"description": "Settings for buttons in the email.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"payment_method": {
																			"description": "Settings for the payment method button.",
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"background": {
																						"description": "The payment method button background color.",
																						"type": "string"
																					},
																					"text": {
																						"description": "The payment method button text color.",
																						"type": "string"
																					},
																					"border": {
																						"description": "The payment method button border color.",
																						"type": "string"
																					},
																					"hover": {
																						"description": "Settings when hovering over the payment method button.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The payment method button background color on hover.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The payment method button text color on hover.",
																								"type": "string"
																							},
																							"border": {
																								"description": "The payment method button border color on hover.",
																								"type": "string"
																							}
																						}
																					},
																					"active": {
																						"description": "Settings for when the payment method button is active.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The payment method button background color when active.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The payment method button text color when active.",
																								"type": "string"
																							},
																							"border": {
																								"description": "The payment method button border color when active.",
																								"type": "string"
																							}
																						}
																					}
																				}
																			}
																		},
																		"secondary": {
																			"description": "Settings for the secondary button.",
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"background": {
																						"description": "The secondary button background color.",
																						"type": "string"
																					},
																					"text": {
																						"description": "The secondary button text color.",
																						"type": "string"
																					},
																					"hover": {
																						"description": "Settings for the secondary button on hover.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The secondary button background color on hover.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The secondary button text color on hover.",
																								"type": "string"
																							}
																						}
																					}
																				}
																			}
																		},
																		"primary": {
																			"description": "Settings for the primary button.",
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"background": {
																						"description": "The primary button background color.",
																						"type": "string"
																					},
																					"text": {
																						"description": "The primary button text color.",
																						"type": "string"
																					},
																					"hover": {
																						"description": "Settings for the primary button on hover.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The primary button background color on hover.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The primary button text color on hover.",
																								"type": "string"
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											},
											"customer": {
												"allOf": [
													{
														"type": "object",
														"description": "The customer’s personal information.\n\n**Required for**: All orders **except** Apple Pay and Google Pay, and Belfius, iDEAL, and WeChat Pay `direct` orders.\n",
														"properties": {
															"locale": {
																"type": "string",
																"description": "- Localizes [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/) for the customer’s language, region, available payment methods, and any UI preferences.\n- Sends [email templates](https://docs.multisafepay.com/features/email-templates/) in the customer's preferred language. If set, `locale` overrides the language set in an email template.\n- Displays local variants of payment methods, e.g. to display:\n  - [Cartes Bancaires](https://docs.multisafepay.com/payment-methods/cartes-bancaires), set to `fr_FR`.\n  - [Dankort](https://docs.multisafepay.com/payment-methods/dankort), set to `da_DK`.\n  - [Postepay](https://docs.multisafepay.com/payment-methods/postepay), set to `it_IT`.\n\n**Required for:** Bancontact\n\n|Locale|Language & country|\n|--------|--------|\n|`de_AT`|German Austria|\n|`de_DE`|German Germany|\n|`en_US`|American English|\n|`fi_FI`|Finnish|\n|`fr_BE`|French Belgium|\n|`it_IT`|Italian|\n|`nl_BE`|Dutch Belgium|\n|`nl_NL`|Dutch Netherlands|\n|`pl_PL`|Polish|\n|`es_ES`|Spanish|\n|`sv_SE`|Swedish|\n|`zh_CN`|Chinese|\n",
																"format": "ab_CD with ISO 639 language codes and ISO 3166 country codes",
																"enum": [
																	"de_AT",
																	"de_DE",
																	"en_US",
																	"fi_FI",
																	"fr_BE",
																	"it_IT",
																	"nl_BE",
																	"nl_NL",
																	"pl_PL",
																	"es_ES",
																	"sv_SE",
																	"zh_CN"
																],
																"example": "nl_NL",
																"default": "en_US"
															},
															"ip_address": {
																"description": "The customer’s IP address.\n\n**Required for:** Pay later, credit card, and Payment Component orders for our fraud check. If empty or incorrect (e.g. your IP address instead of the customer’s), the transaction status may be **Uncleared**, or even **Declined**.\n\n\n**Recommended** but not required for other payment methods.\n\nTo retrieve the customer's IP address if there is:\n- A proxy, use `forwarded_ip`.\n- No proxy, use `ip_address`.\n",
																"type": "string",
																"format": "IP address",
																"example": "123.123.123.123"
															},
															"forwarded_ip": {
																"description": "The [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For) header of the customer object when using a proxy.\n\nTo retrieve the customer's IP address if there is:\n- A proxy, use `forwarded_ip`.\n- No proxy, use `ip_address`.\n",
																"type": "string",
																"format": "IPv4"
															},
															"first_name": {
																"description": "The customer’s first name.\n\nWe recommend always requiring the customer to provide their full name, instead of initials or abbreviations.\n",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Simon"
															},
															"last_name": {
																"description": "The customer’s last name.",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Smit"
															},
															"gender": {
																"description": "The customer's gender.",
																"type": "string",
																"maxLength": 1,
																"enum": [
																	"M",
																	"F"
																],
																"example": "M"
															},
															"birthday": {
																"description": "The customer's date of birth.",
																"type": "string",
																"format": "yyyy-MM-dd",
																"example": "1980-12-31"
															},
															"address1": {
																"description": "The first line of the address.",
																"type": "string",
																"maxLength": 64,
																"example": "Kraanspoor"
															},
															"address2": {
																"description": "The second line of the address.",
																"type": "string",
																"maxLength": 64,
																"example": "39"
															},
															"house_number": {
																"description": "The house number of the address.",
																"type": "string",
																"maxLength": 10,
																"example": "39C"
															},
															"zip_code": {
																"description": "The ZIP code of the address.",
																"type": "string",
																"maxLength": 10,
																"example": "1033 SC"
															},
															"city": {
																"description": "The city of the address.",
																"type": "string",
																"maxLength": 50,
																"example": "Amsterdam"
															},
															"state": {
																"description": "The state of the address. \n\n**Required for:** PayPal Seller Protection\n",
																"type": "string",
																"maxLength": 6
															},
															"country": {
																"description": "The country of the address.\n\n**Required for:** Bank Transfer and PayPal Seller Protection\n",
																"type": "string",
																"format": "country alpha-2",
																"example": "NL"
															},
															"phone": {
																"description": "The customer’s phone number.",
																"type": "string",
																"maxLength": 24,
																"example": "0208500500"
															},
															"email": {
																"description": "The customer’s email address.\n\nUsed for [Second Chance](https://docs.multisafepay.com/features/second-chance/) emails and fraud checks.\n\n**Required for:** Bank Transfer\n",
																"type": "string",
																"example": "customer@emailprovider.com"
															},
															"user_agent": {
																"description": "The characteristic string that identifies the customer's browser.",
																"type": "string",
																"example": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
															},
															"referrer": {
																"description": "The unique identifier for where the customer/browser originates from.",
																"type": "string"
															},
															"reference": {
																"description": "Your unique client-defined identifier for your customer.\n\n**Required for:** [Recurring payments](https://docs.multisafepay.com/api/#recurring-payments-orders) orders, both initial and subsequent payments.\n",
																"type": "string",
																"example": "customer-0001"
															}
														}
													}
												]
											},
											"gateway_info": {
												"description": "Information specific to the payment method (gateway). \n\n**Required for:**\n\n- iDEAL `direct` orders\n- SEPA Direct Debit `direct` orders\n- Bancontact QR and iDEAL QR orders\n",
												"type": "object",
												"properties": {
													"issuer_id": {
														"description": "For iDEAL `direct` orders, the unique identifier of the gateway issuer.",
														"type": "string",
														"example": "0021"
													},
													"qr_enabled": {
														"description": "Creates a [Bancontact QR](https://docs.multisafepay.com/payment-methods/bancontact/) order.",
														"type": "boolean"
													},
													"qr_size": {
														"description": "For iDEAL QR orders, sets the width and height of the QR image in pixels. \n\nSizes are between 100 and 2000 pixels. If the value does not meet this rule, the default is used.\n\nDefaults to (250 by 250 pixels).\n",
														"type": "integer",
														"default": 250
													},
													"allow_multiple": {
														"description": "For iDEAL QR orders, sets whether the QR code can be used more than once.",
														"type": "boolean"
													},
													"allow_change_amount": {
														"description": "For iDEAL QR orders, sets whether the customer can change the amount to pay. \n\nYou must then also set `min_amount` and `max_amount`.\n",
														"type": "boolean"
													},
													"min_amount": {
														"description": "For iDEAL QR orders, sets a minimum amount that the customer must pay.\n\nThe `min_amount` must be lower than the `amount`.\n\nIf `min_amount` is not set, but `max_amount` is set, then the `amount` value is used as the `min_amount`.\n\nRequired if `allow_change_amount` is set to true.\n",
														"type": "string"
													},
													"max_amount": {
														"description": "For iDEAL QR orders, sets a maximum amount that the customer can pay.\n\nThe `max_amount` must be higher than the `amount`.\n\nIf `max_amount` is not set, but `min_amount` is set, then the `amount` value is used as the `max_amount`.\n\nRequired if `allow_change_amount` is set to true.\n",
														"type": "string"
													},
													"account_id": {
														"description": "For SEPA Direct Debit `direct` orders (**required**), the international bank account number (IBAN).",
														"type": "string"
													},
													"account_holder_name": {
														"description": "For SEPA Direct Debit `direct` orders (**required**), the name of the account holder.",
														"type": "string"
													},
													"account_holder_iban": {
														"description": "For SEPA Direct Debit `direct` orders (**required**), the international bank account number (IBAN).",
														"type": "string"
													},
													"emandate": {
														"description": "For SEPA Direct Debit `direct` orders (**required**), the unique emandate identifier (for your own administration).",
														"type": "string"
													}
												}
											},
											"delivery": {
												"allOf": [
													{
														"description": "The customer's shipping address.",
														"type": "object",
														"properties": {
															"first_name": {
																"description": "The customer’s first name.\n\nWe recommend always requiring the customer to provide their full name, instead of initials or abbreviations.\n",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Simon"
															},
															"last_name": {
																"description": "The customer’s last name.",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Smit"
															},
															"address1": {
																"description": "The first line of the address.",
																"type": "string",
																"maxLength": 64,
																"example": "Kraanspoor"
															},
															"house_number": {
																"description": "The apartment number of the address.",
																"type": "string",
																"maxLength": 9,
																"example": "B"
															},
															"zip_code": {
																"description": "The ZIP code of the address.",
																"type": "string",
																"maxLength": 10,
																"example": "1033 SC"
															},
															"city": {
																"description": "The city of the address.",
																"type": "string",
																"maxLength": 50,
																"example": "Amsterdam"
															},
															"country": {
																"description": "The country of the address.",
																"type": "string",
																"format": "country alpha-2",
																"example": "NL"
															}
														}
													}
												]
											},
											"checkout_options": {
												"allOf": [
													{
														"description": "Settings for the shopping cart, including taxes and validation.",
														"type": "object",
														"properties": {
															"validate_cart": {
																"description": "If set to `true`, the value of `amount` is compared to the calculated total value of the shopping cart (returned as `order_total`).\n\nIf the values:\n\n- Match, the request is successful.\n- Don’t match, the request is unsuccessful and error_code 1027 is returned.\n",
																"type": "boolean",
																"default": false
															},
															"tax_tables": {
																"description": "Sets default VAT settings and creates VAT classes in the alternate array, which you can apply to individual shopping cart items.",
																"type": "object",
																"properties": {
																	"default": {
																		"description": "The default VAT setting. Used when no value is set for `shopping_cart.items.tax_table_selector`.",
																		"type": "object",
																		"properties": {
																			"shipping_taxed": {
																				"description": "Sets whether or not the shipping costs are taxed.",
																				"type": "boolean"
																			},
																			"rate": {
																				"description": "The tax rate percentage as a fraction, e.g. 15% is expressed as `0.15`.",
																				"type": "number",
																				"format": "float",
																				"minimum": 0,
																				"example": 0.15
																			}
																		}
																	},
																	"alternate": {
																		"description": "An array of client-defined VAT classes that you can apply to items in the shopping cart.",
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"name": {
																					"description": "The client-defined ID. Applies tax settings to items in the shopping cart through the `shopping_cart.items.tax_table_selector` attribute.",
																					"type": "string"
																				},
																				"standalone": {
																					"description": "Sets whether or not the shipping costs are taxed.",
																					"type": "boolean"
																				},
																				"rules": {
																					"type": "array",
																					"items": {
																						"type": "object",
																						"properties": {
																							"rate": {
																								"description": "The tax rate percentage expressed as a fraction.",
																								"type": "number",
																								"format": "float",
																								"example": 0.0825,
																								"minimum": 0
																							},
																							"country": {
																								"description": "The country where the tax rate applies.",
																								"type": "string",
																								"format": "country alpha-2",
																								"example": "US"
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												]
											},
											"shopping_cart": {
												"description": "The array of items in the customer's shopping cart, including the tax class as defined in `checkout_options`.\n\nIf you have a self-made integration, include the complete specification of the `shopping_cart`.\n",
												"type": "object",
												"properties": {
													"items": {
														"description": "The items in the customer's shopping cart. Specify the relevant tax ruling per item.",
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"name": {
																	"description": "The name of the product or service.",
																	"type": "string",
																	"example": "Backpack"
																},
																"description": {
																	"description": "A description of the product or service.",
																	"type": "string",
																	"example": "Black cotton backpack with logo."
																},
																"unit_price": {
																	"description": "The unit price (in decimals) of the item, excluding VAT.\n\nThe currency of the shopping cart is set at order level using `currency`. \n\n**Example:** The value for a €90 backpack is `90`.\n",
																	"type": "number",
																	"format": "float",
																	"example": 90
																},
																"quantity": {
																	"description": "The number of units of the item.",
																	"type": "integer",
																	"example": 1
																},
																"merchant_item_id": {
																	"description": "Your unique (client-defined) identifier for the product or service.\n\nIf this item specifies the shipping costs, set to `msp-shipping`.\n",
																	"type": "string",
																	"example": "12345678"
																},
																"tax_table_selector": {
																	"description": "Your client-defined identifier for a tax table, specified as `checkout_options.tax_tables.alternate.name`.",
																	"type": "string",
																	"example": "VAT-21"
																},
																"weight": {
																	"description": "The weight per product.",
																	"type": "object",
																	"properties": {
																		"unit": {
																			"description": "The unit of weight.",
																			"type": "string",
																			"enum": [
																				"KG"
																			],
																			"example": "KG"
																		},
																		"value": {
																			"description": "The weight of the item corresponding to the unit.\n\nFor a 2 kilogram product:\n- Set `value` to `2`.\n- Set `unit` to `KG`.\n",
																			"type": "number",
																			"example": 2
																		}
																	}
																}
															}
														}
													}
												}
											},
											"items": {
												"description": "An HTML string to display the order items on the MultiSafepay payment page, instead of including a `shopping_cart`.",
												"type": "string",
												"example": "<ol><li>Article 1: € 1,95</li><li>Article 2: € 2,95</li><li>Article 3: € 3,95</li></ol>"
											},
											"recurring_model": {
												"description": "For initial and subsequent [Recurring payments](https://docs.multisafepay.com/features/recurring-payments/) (**required**), sets the recurring model:\n\n- Card on file (COF): The cardholder has authorized you to store their card details.\n- Subscription: An agreement or services that are billed at the end of your billing cycle, e.g. weekly, monthly.\n- Unscheduled: Event-triggered, e.g. mobile top-up when no credit left on the phone.\n",
												"type": "string",
												"enum": [
													"cardonfile",
													"subscription",
													"unscheduled"
												],
												"example": "cardonfile"
											},
											"recurring_id": {
												"description": "For subsequent [Recurring payments](https://docs.multisafepay.com/features/recurring-payments/) (**required**), the unique identifier of the recurring payment.",
												"type": "string",
												"example": "133761993_gTp2"
											},
											"affiliate": {
												"description": "For [Split Payments](https://docs.multisafepay.com/features/split-payments/) (**required**).",
												"type": "object",
												"properties": {
													"split_payments": {
														"description": "Split the amount of a transaction between partner/primary and affiliated accounts by a percentage, a fixed amount, or both.\n\nFor every split payment rule, add an object to the array.\n",
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"merchant": {
																	"description": "The account ID of the affiliated account.",
																	"type": "string",
																	"example": 1001001
																},
																"fixed": {
																	"description": "The amount to split in cents.",
																	"type": "integer",
																	"minimum": 1
																},
																"percentage": {
																	"description": "A percentage of the amount to split.",
																	"type": "number",
																	"format": "float",
																	"minimum": 1
																},
																"description": {
																	"description": "A description of the split payment.",
																	"type": "string"
																}
															}
														}
													}
												}
											},
											"second_chance": {
												"description": "For [Second Chance](https://docs.multisafepay.com/features/second-chance/).",
												"type": "object",
												"properties": {
													"send_mail": {
														"description": "Whether to send reminder emails if the customer doesn't complete payment.\n\n\n **Suppressing Second Chance emails after cancellation**\n\n\n When a customer places an order, goes to your checkout, doesn’t complete payment, but later returns and tries to pay again, some webshops create a second order. \n \n \n If Second Chance emails are enabled, the customer still receives emails for the first order, even after they complete payment for the second order.\n\n Cancelling the first order does **not** suppress Second Chance emails. To suppress emails, make an Update order details: CancelOrder request.\n",
														"type": "boolean"
													}
												}
											},
											"custom_info": {
												"description": "Additional information about the order.",
												"type": "object",
												"properties": {
													"custom_1": {
														"description": "Information about the order.",
														"type": "string"
													},
													"custom_2": {
														"description": "Information about the order.",
														"type": "string"
													},
													"custom_3": {
														"description": "Information about the order.",
														"type": "string"
													}
												}
											},
											"days_active": {
												"description": "For `redirect` and `paymentlink` orders, sets the number of days the link to the MultiSafepay payment page is valid.\n\nThe link lifetime begins when the order is created, or the link is generated. A `session_id` is returned in the payment page URL.\n\nIf [Second Chance](https://docs.multisafepay.com/features/second-chance/) is enabled, we recommend a minimum lifetime of **48 hours**. Second Chance emails the customer 2 payment reminders: 1 hour and 24 hours after the order is created. If the lifetime is less than 24 hours, the link in the second email is no longer active when the customer receives it. \n\nSee `seconds_active` below. If `seconds_active` is also set, `seconds_active` is used. If neither is set, the default is used.\n",
												"type": "integer",
												"minimum": 1,
												"default": 30,
												"example": 30
											},
											"seconds_active": {
												"description": "For `redirect` and `paymentlink` orders, sets the number of seconds the link to the MultiSafepay payment page is valid.\n\nSee `days_active` above. If `days_active` is also set, `seconds_active` is used. If neither is set, the default is used.\n",
												"type": "integer",
												"minimum": 1,
												"default": 2592000
											},
											"var1": {
												"type": "string",
												"description": "Variable for storing additional data.",
												"maxLength": 500
											},
											"var2": {
												"type": "string",
												"description": "Variable for storing additional data.",
												"maxLength": 500
											},
											"var3": {
												"type": "string",
												"description": "Variable for storing additional data, including [Split Payments](https://docs.multisafepay.com/features/split-payments/) metadata.",
												"maxLength": 500
											},
											"plugin": {
												"description": "Information about your integration (useful for debugging).",
												"properties": {
													"shop": {
														"description": "The name of your ecommerce application.",
														"type": "string",
														"example": "My self-made integration"
													},
													"shop_version": {
														"description": "The version of your ecommerce application.",
														"type": "string"
													},
													"plugin_version": {
														"description": "The version of your integration.",
														"type": "string",
														"example": "1.0.0"
													},
													"partner": {
														"description": "The name of the third party that developed the ecommerce application (if relevant).",
														"type": "string"
													},
													"shop_root_url": {
														"description": "The root/base URL of the ecommerce application.",
														"type": "string",
														"example": "https://www.my-ecommerce.com"
													}
												}
											}
										},
										"required": [
											"amount",
											"currency",
											"description",
											"gateway",
											"type",
											"order_id"
										]
									},
									{
										"title": "Credit or debit card order",
										"description": "Credit or debit card order",
										"properties": {
											"type": {
												"description": "- `redirect`: Customers are redirected to a [MultiSafepay payment page](https://docs.multisafepay.com/payment-pages/) where they enter their cardholder data. \n- `direct`: The API request contains the cardholder data, so customers are redirected to an authentication or success page.\n\nFor more information, see [Direct vs redirect API requests](https://docs.multisafepay.com/developer/direct-vs-redirect).\n\n**Note:** To process `direct` credit card payments, you must have PCI DSS certification, see [Handling cardholder data](https://docs.multisafepay.com/features/handling-cardholder-data/).\n",
												"type": "string",
												"enum": [
													"direct",
													"redirect"
												],
												"example": "redirect"
											},
											"gateway": {
												"allOf": [
													{
														"description": "The unique identifier for the payment method (gateway).\n\n\nFor `redirect` requests using the generic `CREDITCARD` gateway, the payment page automatically detects the card scheme.\n"
													},
													{
														"type": "string"
													},
													{
														"example": "CREDITCARD"
													},
													{
														"enum": [
															"AMEX",
															"CREDITCARD",
															"MAESTRO",
															"MASTERCARD",
															"VISA"
														]
													}
												]
											},
											"order_id": {
												"description": "Your unique (client-defined) identifier for the order.",
												"type": "string",
												"maxLength": 50,
												"example": "test-order-0001"
											},
											"currency": {
												"description": "The currency of the payment.",
												"type": "string",
												"maxLength": 3,
												"minLength": 3,
												"format": "ISO-4217 currency code",
												"example": "EUR"
											},
											"amount": {
												"type": "integer",
												"description": "The payment amount in the currency's smallest unit:\n\n- Decimal currencies: Value for 10 EUR = 1000 (1000 cents)\n- Zero-decimal currencies: Value for 10 YEN = 10\n\nFor [Zero Authorization](https://docs.multisafepay.com/features/zero-authorization/) orders, set to 0.\n",
												"minimum": 0,
												"example": 1000
											},
											"description": {
												"description": "A description of the customer's order. Appears on MultiSafepay payment pages and customer bank statements (if supported by the bank)",
												"type": "string",
												"maxLength": 200,
												"example": "Test order description"
											},
											"payment_options": {
												"description": "Contains: \n\n- URLs to your success page and cancel page\n- Your [webhook endpoint](https://docs.multisafepay.com/developer/webhooks/)\n- Templates for styling [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/)\n- Settings for displaying available [gift cards](https://docs.multisafepay.com/payment-methods/gift-cards/)\n",
												"type": "object",
												"properties": {
													"notification_url": {
														"description": "The [webhook endpoint](https://docs.multisafepay.com/developer/webhooks/) for MultiSafepay to send status updates and other notifications for this website.",
														"type": "string",
														"format": "url",
														"maxLength": 150,
														"example": "https://www.examplewebsite.com/payment-updates/"
													},
													"notification_method": {
														"description": "Sets the webhook [notification method](https://docs.multisafepay.com/developer/webhooks/).\n\nWe recommend setting this to `POST` to reduce network load and increase security.\n",
														"type": "string",
														"enum": [
															"POST",
															"GET"
														],
														"default": "GET",
														"example": "POST"
													},
													"redirect_url": {
														"description": "The page customers are redirected to:\n\n- After **successful** payment, i.e. your success page, or thank you page\n- If the transaction status is [Uncleared](https://docs.multisafepay.com/about-payments/uncleared-transactions/) \n",
														"type": "string",
														"example": "https://www.example.com/test-order-0001/successful/"
													},
													"cancel_url": {
														"description": "The page customers are redirected to after **unsuccessful** payments.",
														"type": "string",
														"example": "https://www.example.com/test-order-0001/unsuccessful/"
													},
													"close_window": {
														"description": "Whether to display the MultiSafepay payment page in a new window that automatically closes after the customer completes payment.",
														"type": "boolean",
														"default": false,
														"example": false
													},
													"settings": {
														"description": "For [gift card](https://docs.multisafepay.com/payment-methods/gift-cards/) payments.",
														"type": "object",
														"properties": {
															"coupons": {
																"description": "Optional settings for gift cards.",
																"properties": {
																	"allow": {
																		"description": "Specifies which gift cards the customer can pay with.",
																		"type": "array",
																		"example": "EDENCO",
																		"items": {
																			"type": "string",
																			"enum": [
																				"BABYCAD",
																				"BEAUTYWELL",
																				"BLOEMENCAD",
																				"BOEKENBON",
																				"DEGROTESPL",
																				"EDENCOM",
																				"EDENCO",
																				"EDENRES",
																				"EDENSPORTS",
																				"FASHIONCHQ",
																				"FASHIONGFT",
																				"FIETSENBON",
																				"GOOD4FUN",
																				"GEZONDHEID",
																				"NATNLBIOSC",
																				"NATNLETUIN",
																				"PARFUMCADE",
																				"SPORTENFIT",
																				"VRGIFTCARD",
																				"VVVGIFTCRD",
																				"WEBSHOPGFT",
																				"WIJNCADEAU",
																				"YOURGIFT"
																			]
																		}
																	}
																}
															}
														}
													},
													"template_id": {
														"description": "Apply a template for styling [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/styling/).\n\nIf `payment_options.template` is also set, `payment_options.template` is used.\n",
														"type": "string"
													},
													"template": {
														"description": "Applies a template object structure for styling [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/styling/).\n\nOverrides the `payment_options.template_id`.\n",
														"properties": {
															"version": {
																"description": "The version of the template.",
																"type": "string"
															},
															"settings": {
																"description": "Sets whether to display or hide email elements, e.g. buttons, logos.",
																"type": "object",
																"properties": {
																	"hide_logo": {
																		"description": "Whether to hide the email header logo.",
																		"type": "boolean"
																	},
																	"iframe_mode": {
																		"description": "Whether to hide iframe elements.",
																		"type": "boolean"
																	},
																	"hide_flags": {
																		"description": "Whether to hide the flags container.",
																		"type": "boolean"
																	},
																	"hide_powered": {
																		"description": "Whether to hide the powered link.",
																		"type": "boolean"
																	},
																	"hide_cart": {
																		"description": "Whether to hide the shopping cart container.",
																		"type": "boolean"
																	},
																	"hide_btn_cancel": {
																		"description": "Whether to hide the **Cancel** button.",
																		"type": "boolean"
																	},
																	"hide_cc_logos": {
																		"description": "Whether to hide credit card logos.",
																		"type": "boolean"
																	},
																	"hide_btn_all_methods": {
																		"description": "Whether to hide the **All methods** button.",
																		"type": "boolean"
																	}
																}
															},
															"header": {
																"description": "Settings for the header logo, cover image, background, and font.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"logo": {
																			"description": "Your logo to display in the email header.",
																			"type": "object",
																			"properties": {
																				"image": {
																					"description": "The filename of the logo to display.",
																					"type": "string"
																				}
																			}
																		},
																		"cover": {
																			"description": "Resize the background image to cover the entire header container.",
																			"type": "object",
																			"properties": {
																				"image": {
																					"description": "The cover image.",
																					"type": "string"
																				}
																			}
																		},
																		"background": {
																			"description": "The header background.",
																			"type": "string"
																		},
																		"text": {
																			"description": "The header font color.",
																			"type": "string"
																		}
																	}
																}
															},
															"body": {
																"description": "Settings for the email body.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"text": {
																			"description": "The body font color.",
																			"type": "string"
																		},
																		"background": {
																			"description": "The body background color.",
																			"type": "string"
																		},
																		"link": {
																			"description": "Settings for links in the email body.",
																			"type": "object",
																			"properties": {
																				"text": {
																					"description": "The link text color in the email body.",
																					"type": "string"
																				},
																				"hover": {
																					"description": "Settings for hovering over links in the email body.",
																					"type": "object",
																					"properties": {
																						"text": {
																							"description": "The link text color on hover in the body.",
																							"type": "string"
																						},
																						"border": {
																							"description": "The link border color on hover in the body.",
																							"type": "string"
																						}
																					}
																				}
																			}
																		}
																	}
																}
															},
															"container": {
																"description": "Settings for the container element.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"text": {
																			"description": "The color of text in the container.",
																			"type": "string"
																		},
																		"background": {
																			"description": "The color of the container background.",
																			"type": "string"
																		},
																		"link": {
																			"description": "Settings for links in the container.",
																			"type": "object",
																			"properties": {
																				"text": {
																					"description": "The link text color in the container.",
																					"type": "string"
																				}
																			}
																		}
																	}
																}
															},
															"cart": {
																"description": "Settings for the cart element.",
																"type": "object",
																"properties": {
																	"text": {
																		"description": "The text color in the cart.",
																		"type": "string"
																	},
																	"label": {
																		"description": "The color of labels in the cart.",
																		"type": "string"
																	},
																	"background": {
																		"description": "The background color of the cart.",
																		"type": "string"
																	},
																	"border": {
																		"description": "The border color of the cart.",
																		"type": "string"
																	}
																}
															},
															"payment_form": {
																"description": "Settings for the payment form in the email.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"text": {
																			"description": "The text color in the payment form.",
																			"type": "string"
																		},
																		"background": {
																			"description": "The background color of the payment form.",
																			"type": "string"
																		},
																		"border": {
																			"description": "The border color of the payment form.",
																			"type": "string"
																		},
																		"inputs": {
																			"description": "Settings for the payment form button.",
																			"type": "object",
																			"properties": {
																				"border": {
																					"description": "The color of the payment form button border.",
																					"type": "string"
																				},
																				"label": {
																					"description": "The call to action in the payment form button.",
																					"type": "string"
																				}
																			}
																		}
																	}
																}
															},
															"buttons": {
																"description": "Settings for buttons in the email.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"payment_method": {
																			"description": "Settings for the payment method button.",
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"background": {
																						"description": "The payment method button background color.",
																						"type": "string"
																					},
																					"text": {
																						"description": "The payment method button text color.",
																						"type": "string"
																					},
																					"border": {
																						"description": "The payment method button border color.",
																						"type": "string"
																					},
																					"hover": {
																						"description": "Settings when hovering over the payment method button.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The payment method button background color on hover.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The payment method button text color on hover.",
																								"type": "string"
																							},
																							"border": {
																								"description": "The payment method button border color on hover.",
																								"type": "string"
																							}
																						}
																					},
																					"active": {
																						"description": "Settings for when the payment method button is active.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The payment method button background color when active.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The payment method button text color when active.",
																								"type": "string"
																							},
																							"border": {
																								"description": "The payment method button border color when active.",
																								"type": "string"
																							}
																						}
																					}
																				}
																			}
																		},
																		"secondary": {
																			"description": "Settings for the secondary button.",
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"background": {
																						"description": "The secondary button background color.",
																						"type": "string"
																					},
																					"text": {
																						"description": "The secondary button text color.",
																						"type": "string"
																					},
																					"hover": {
																						"description": "Settings for the secondary button on hover.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The secondary button background color on hover.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The secondary button text color on hover.",
																								"type": "string"
																							}
																						}
																					}
																				}
																			}
																		},
																		"primary": {
																			"description": "Settings for the primary button.",
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"background": {
																						"description": "The primary button background color.",
																						"type": "string"
																					},
																					"text": {
																						"description": "The primary button text color.",
																						"type": "string"
																					},
																					"hover": {
																						"description": "Settings for the primary button on hover.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The primary button background color on hover.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The primary button text color on hover.",
																								"type": "string"
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											},
											"customer": {
												"allOf": [
													{
														"type": "object",
														"description": "The customer’s personal information.\n\n**Required for**: All orders **except** Apple Pay and Google Pay, and Belfius, iDEAL, and WeChat Pay `direct` orders.\n",
														"properties": {
															"locale": {
																"type": "string",
																"description": "- Localizes [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/) for the customer’s language, region, available payment methods, and any UI preferences.\n- Sends [email templates](https://docs.multisafepay.com/features/email-templates/) in the customer's preferred language. If set, `locale` overrides the language set in an email template.\n- Displays local variants of payment methods, e.g. to display:\n  - [Cartes Bancaires](https://docs.multisafepay.com/payment-methods/cartes-bancaires), set to `fr_FR`.\n  - [Dankort](https://docs.multisafepay.com/payment-methods/dankort), set to `da_DK`.\n  - [Postepay](https://docs.multisafepay.com/payment-methods/postepay), set to `it_IT`.\n\n**Required for:** Bancontact\n\n|Locale|Language & country|\n|--------|--------|\n|`de_AT`|German Austria|\n|`de_DE`|German Germany|\n|`en_US`|American English|\n|`fi_FI`|Finnish|\n|`fr_BE`|French Belgium|\n|`it_IT`|Italian|\n|`nl_BE`|Dutch Belgium|\n|`nl_NL`|Dutch Netherlands|\n|`pl_PL`|Polish|\n|`es_ES`|Spanish|\n|`sv_SE`|Swedish|\n|`zh_CN`|Chinese|\n",
																"format": "ab_CD with ISO 639 language codes and ISO 3166 country codes",
																"enum": [
																	"de_AT",
																	"de_DE",
																	"en_US",
																	"fi_FI",
																	"fr_BE",
																	"it_IT",
																	"nl_BE",
																	"nl_NL",
																	"pl_PL",
																	"es_ES",
																	"sv_SE",
																	"zh_CN"
																],
																"example": "nl_NL",
																"default": "en_US"
															},
															"ip_address": {
																"description": "The customer’s IP address.\n\n**Required for:** Pay later, credit card, and Payment Component orders for our fraud check. If empty or incorrect (e.g. your IP address instead of the customer’s), the transaction status may be **Uncleared**, or even **Declined**.\n\n\n**Recommended** but not required for other payment methods.\n\nTo retrieve the customer's IP address if there is:\n- A proxy, use `forwarded_ip`.\n- No proxy, use `ip_address`.\n",
																"type": "string",
																"format": "IP address",
																"example": "123.123.123.123"
															},
															"forwarded_ip": {
																"description": "The [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For) header of the customer object when using a proxy.\n\nTo retrieve the customer's IP address if there is:\n- A proxy, use `forwarded_ip`.\n- No proxy, use `ip_address`.\n",
																"type": "string",
																"format": "IPv4"
															},
															"first_name": {
																"description": "The customer’s first name.\n\nWe recommend always requiring the customer to provide their full name, instead of initials or abbreviations.\n",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Simon"
															},
															"last_name": {
																"description": "The customer’s last name.",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Smit"
															},
															"gender": {
																"description": "The customer's gender.",
																"type": "string",
																"maxLength": 1,
																"enum": [
																	"M",
																	"F"
																],
																"example": "M"
															},
															"birthday": {
																"description": "The customer's date of birth.",
																"type": "string",
																"format": "yyyy-MM-dd",
																"example": "1980-12-31"
															},
															"address1": {
																"description": "The first line of the address.",
																"type": "string",
																"maxLength": 64,
																"example": "Kraanspoor"
															},
															"address2": {
																"description": "The second line of the address.",
																"type": "string",
																"maxLength": 64,
																"example": "39"
															},
															"house_number": {
																"description": "The house number of the address.",
																"type": "string",
																"maxLength": 10,
																"example": "39C"
															},
															"zip_code": {
																"description": "The ZIP code of the address.",
																"type": "string",
																"maxLength": 10,
																"example": "1033 SC"
															},
															"city": {
																"description": "The city of the address.",
																"type": "string",
																"maxLength": 50,
																"example": "Amsterdam"
															},
															"state": {
																"description": "The state of the address. \n\n**Required for:** PayPal Seller Protection\n",
																"type": "string",
																"maxLength": 6
															},
															"country": {
																"description": "The country of the address.\n\n**Required for:** Bank Transfer and PayPal Seller Protection\n",
																"type": "string",
																"format": "country alpha-2",
																"example": "NL"
															},
															"phone": {
																"description": "The customer’s phone number.",
																"type": "string",
																"maxLength": 24,
																"example": "0208500500"
															},
															"email": {
																"description": "The customer’s email address.\n\nUsed for [Second Chance](https://docs.multisafepay.com/features/second-chance/) emails and fraud checks.\n\n**Required for:** Bank Transfer\n",
																"type": "string",
																"example": "customer@emailprovider.com"
															},
															"user_agent": {
																"description": "The characteristic string that identifies the customer's browser.",
																"type": "string",
																"example": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
															},
															"referrer": {
																"description": "The unique identifier for where the customer/browser originates from.",
																"type": "string"
															},
															"reference": {
																"description": "Your unique client-defined identifier for your customer.\n\n**Required for:** [Recurring payments](https://docs.multisafepay.com/api/#recurring-payments-orders) orders, both initial and subsequent payments.\n",
																"type": "string",
																"example": "customer-0001"
															}
														}
													}
												]
											},
											"gateway_info": {
												"description": "Information specific to the payment method (gateway). \n\n**Required for:**\n\n- `Direct` credit and debit card orders\n- [Flexible 3D orders](https://docs.multisafepay.com/features/3d-secure/flexible/)\n- [MOTO orders](https://docs.multisafepay.com/features/moto/) \n",
												"type": "object",
												"properties": {
													"card_number": {
														"description": "The credit or debit card number.",
														"type": "string",
														"example": "4111111111111111"
													},
													"card_holder_name": {
														"description": "The cardholder's name.",
														"type": "string",
														"example": "John Doe"
													},
													"card_expiry_date": {
														"description": "The card expiry date.",
														"type": "integer",
														"format": "MMYY",
														"example": 1225
													},
													"card_cvc": {
														"description": "The card verification code (CVC) – a 3 or 4 digit number used as an additional security feature for card-not-present transactions.  \n\n**Required for:** All credit and debit card payments, **except** for Maestro and [Recurring payments](https://docs.multisafepay.com/features/recurring-payments/)\n",
														"type": "string",
														"example": "123"
													},
													"flexible_3d": {
														"description": "For Flexible 3D orders (**required**), whether or not 3D Secure authentication is required.",
														"type": "boolean"
													},
													"moto": {
														"description": "For MOTO orders (**required**), whether to create a MOTO order.",
														"type": "boolean"
													},
													"term_url": {
														"description": "For Flexible 3D orders (**required**), the URL that tells the card issuer where to redirect the authentication query.",
														"type": "string",
														"format": "URL",
														"example": "https://example.com/?type=term&api_key=<api_key>"
													}
												}
											},
											"delivery": {
												"allOf": [
													{
														"description": "The customer's shipping address.",
														"type": "object",
														"properties": {
															"first_name": {
																"description": "The customer’s first name.\n\nWe recommend always requiring the customer to provide their full name, instead of initials or abbreviations.\n",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Simon"
															},
															"last_name": {
																"description": "The customer’s last name.",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Smit"
															},
															"address1": {
																"description": "The first line of the address.",
																"type": "string",
																"maxLength": 64,
																"example": "Kraanspoor"
															},
															"house_number": {
																"description": "The apartment number of the address.",
																"type": "string",
																"maxLength": 9,
																"example": "B"
															},
															"zip_code": {
																"description": "The ZIP code of the address.",
																"type": "string",
																"maxLength": 10,
																"example": "1033 SC"
															},
															"city": {
																"description": "The city of the address.",
																"type": "string",
																"maxLength": 50,
																"example": "Amsterdam"
															},
															"country": {
																"description": "The country of the address.",
																"type": "string",
																"format": "country alpha-2",
																"example": "NL"
															}
														}
													},
													{
														"required": [
															"address1",
															"city",
															"country",
															"first_name",
															"house_number",
															"last_name",
															"zip_code"
														]
													}
												]
											},
											"checkout_options": {
												"allOf": [
													{
														"description": "Settings for the shopping cart, including taxes and validation.",
														"type": "object",
														"properties": {
															"validate_cart": {
																"description": "If set to `true`, the value of `amount` is compared to the calculated total value of the shopping cart (returned as `order_total`).\n\nIf the values:\n\n- Match, the request is successful.\n- Don’t match, the request is unsuccessful and error_code 1027 is returned.\n",
																"type": "boolean",
																"default": false
															},
															"tax_tables": {
																"description": "Sets default VAT settings and creates VAT classes in the alternate array, which you can apply to individual shopping cart items.",
																"type": "object",
																"properties": {
																	"default": {
																		"description": "The default VAT setting. Used when no value is set for `shopping_cart.items.tax_table_selector`.",
																		"type": "object",
																		"properties": {
																			"shipping_taxed": {
																				"description": "Sets whether or not the shipping costs are taxed.",
																				"type": "boolean"
																			},
																			"rate": {
																				"description": "The tax rate percentage as a fraction, e.g. 15% is expressed as `0.15`.",
																				"type": "number",
																				"format": "float",
																				"minimum": 0,
																				"example": 0.15
																			}
																		}
																	},
																	"alternate": {
																		"description": "An array of client-defined VAT classes that you can apply to items in the shopping cart.",
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"name": {
																					"description": "The client-defined ID. Applies tax settings to items in the shopping cart through the `shopping_cart.items.tax_table_selector` attribute.",
																					"type": "string"
																				},
																				"standalone": {
																					"description": "Sets whether or not the shipping costs are taxed.",
																					"type": "boolean"
																				},
																				"rules": {
																					"type": "array",
																					"items": {
																						"type": "object",
																						"properties": {
																							"rate": {
																								"description": "The tax rate percentage expressed as a fraction.",
																								"type": "number",
																								"format": "float",
																								"example": 0.0825,
																								"minimum": 0
																							},
																							"country": {
																								"description": "The country where the tax rate applies.",
																								"type": "string",
																								"format": "country alpha-2",
																								"example": "US"
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												]
											},
											"shopping_cart": {
												"description": "The array of items in the customer's shopping cart, including the tax class as defined in `checkout_options`.\n\nIf you have a self-made integration, include the complete specification of the `shopping_cart`.\n",
												"type": "object",
												"properties": {
													"items": {
														"description": "The items in the customer's shopping cart. Specify the relevant tax ruling per item.",
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"name": {
																	"description": "The name of the product or service.",
																	"type": "string",
																	"example": "Backpack"
																},
																"description": {
																	"description": "A description of the product or service.",
																	"type": "string",
																	"example": "Black cotton backpack with logo."
																},
																"unit_price": {
																	"description": "The unit price (in decimals) of the item, excluding VAT.\n\nThe currency of the shopping cart is set at order level using `currency`. \n\n**Example:** The value for a €90 backpack is `90`.\n",
																	"type": "number",
																	"format": "float",
																	"example": 90
																},
																"quantity": {
																	"description": "The number of units of the item.",
																	"type": "integer",
																	"example": 1
																},
																"merchant_item_id": {
																	"description": "Your unique (client-defined) identifier for the product or service.\n\nIf this item specifies the shipping costs, set to `msp-shipping`.\n",
																	"type": "string",
																	"example": "12345678"
																},
																"tax_table_selector": {
																	"description": "Your client-defined identifier for a tax table, specified as `checkout_options.tax_tables.alternate.name`.",
																	"type": "string",
																	"example": "VAT-21"
																},
																"weight": {
																	"description": "The weight per product.",
																	"type": "object",
																	"properties": {
																		"unit": {
																			"description": "The unit of weight.",
																			"type": "string",
																			"enum": [
																				"KG"
																			],
																			"example": "KG"
																		},
																		"value": {
																			"description": "The weight of the item corresponding to the unit.\n\nFor a 2 kilogram product:\n- Set `value` to `2`.\n- Set `unit` to `KG`.\n",
																			"type": "number",
																			"example": 2
																		}
																	}
																}
															}
														}
													}
												}
											},
											"items": {
												"description": "An HTML string to display the order items on the MultiSafepay payment page, instead of including a `shopping_cart`.",
												"type": "string",
												"example": "<ol><li>Article 1: € 1,95</li><li>Article 2: € 2,95</li><li>Article 3: € 3,95</li></ol>"
											},
											"recurring_model": {
												"description": "For initial and subsequent [Recurring payments](https://docs.multisafepay.com/features/recurring-payments/) (**required**), sets the recurring model:\n\n- Card on file (COF): The cardholder has authorized you to store their card details.\n- Subscription: An agreement or services that are billed at the end of your billing cycle, e.g. weekly, monthly.\n- Unscheduled: Event-triggered, e.g. mobile top-up when no credit left on the phone.\n",
												"type": "string",
												"enum": [
													"cardonfile",
													"subscription",
													"unscheduled"
												],
												"example": "cardonfile"
											},
											"recurring_id": {
												"description": "For subsequent [Recurring payments](https://docs.multisafepay.com/features/recurring-payments/) (**required**), the unique identifier of the recurring payment.",
												"type": "string",
												"example": "133761993_gTp2"
											},
											"capture": {
												"description": "For [Manual Capture](https://docs.multisafepay.com/features/manual-capture/) orders (**required**).",
												"enum": [
													"manual"
												],
												"type": "string"
											},
											"affiliate": {
												"description": "For [Split Payments](https://docs.multisafepay.com/features/split-payments/) (**required**).",
												"type": "object",
												"properties": {
													"split_payments": {
														"description": "Split the amount of a transaction between partner/primary and affiliated accounts by a percentage, a fixed amount, or both.\n\nFor every split payment rule, add an object to the array.\n",
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"merchant": {
																	"description": "The account ID of the affiliated account.",
																	"type": "string",
																	"example": 1001001
																},
																"fixed": {
																	"description": "The amount to split in cents.",
																	"type": "integer",
																	"minimum": 1
																},
																"percentage": {
																	"description": "A percentage of the amount to split.",
																	"type": "number",
																	"format": "float",
																	"minimum": 1
																},
																"description": {
																	"description": "A description of the split payment.",
																	"type": "string"
																}
															}
														}
													}
												}
											},
											"second_chance": {
												"description": "For [Second Chance](https://docs.multisafepay.com/features/second-chance/).",
												"type": "object",
												"properties": {
													"send_mail": {
														"description": "Whether to send reminder emails if the customer doesn't complete payment.\n\n\n **Suppressing Second Chance emails after cancellation**\n\n\n When a customer places an order, goes to your checkout, doesn’t complete payment, but later returns and tries to pay again, some webshops create a second order. \n \n \n If Second Chance emails are enabled, the customer still receives emails for the first order, even after they complete payment for the second order.\n\n Cancelling the first order does **not** suppress Second Chance emails. To suppress emails, make an Update order details: CancelOrder request.\n",
														"type": "boolean"
													}
												}
											},
											"customer_verification": {
												"description": "For [credit card direct](https://docs.multisafepay.com/features/handling-cardholder-data/) orders.",
												"type": "object",
												"properties": {
													"html": {
														"description": "If 3D Secure authentication is:\n\n- Required: An HTML form is returned. You can either render the form and redirect the customer to it to pass authentication, or redirect them to the `payment_url` (recommended).\n- Not required: The [transaction status](https://docs.multisafepay.com/about-payments/multisafepay-statuses/) response is processed directly and no HTML form is returned.\n",
														"type": "string"
													},
													"type": {
														"description": "The type of response returned, i.e. a form.",
														"type": "string",
														"example": "form"
													}
												}
											},
											"custom_info": {
												"description": "Additional information about the order.",
												"type": "object",
												"properties": {
													"custom_1": {
														"description": "Information about the order.",
														"type": "string"
													},
													"custom_2": {
														"description": "Information about the order.",
														"type": "string"
													},
													"custom_3": {
														"description": "Information about the order.",
														"type": "string"
													}
												}
											},
											"days_active": {
												"description": "For `redirect` and `paymentlink` orders, sets the number of days the link to the MultiSafepay payment page is valid.\n\nThe link lifetime begins when the order is created, or the link is generated. A `session_id` is returned in the payment page URL.\n\nIf [Second Chance](https://docs.multisafepay.com/features/second-chance/) is enabled, we recommend a minimum lifetime of **48 hours**. Second Chance emails the customer 2 payment reminders: 1 hour and 24 hours after the order is created. If the lifetime is less than 24 hours, the link in the second email is no longer active when the customer receives it. \n\nSee `seconds_active` below. If `seconds_active` is also set, `seconds_active` is used. If neither is set, the default is used.\n",
												"type": "integer",
												"minimum": 1,
												"default": 30,
												"example": 30
											},
											"seconds_active": {
												"description": "For `redirect` and `paymentlink` orders, sets the number of seconds the link to the MultiSafepay payment page is valid.\n\nSee `days_active` above. If `days_active` is also set, `seconds_active` is used. If neither is set, the default is used.\n",
												"type": "integer",
												"minimum": 1,
												"default": 2592000
											},
											"var1": {
												"type": "string",
												"description": "Variable for storing additional data.",
												"maxLength": 500
											},
											"var2": {
												"type": "string",
												"description": "Variable for storing additional data.",
												"maxLength": 500
											},
											"var3": {
												"type": "string",
												"description": "Variable for storing additional data, including [Split Payments](https://docs.multisafepay.com/features/split-payments/) metadata.",
												"maxLength": 500
											},
											"plugin": {
												"description": "Information about your integration (useful for debugging).",
												"properties": {
													"shop": {
														"description": "The name of your ecommerce application.",
														"type": "string",
														"example": "My self-made integration"
													},
													"shop_version": {
														"description": "The version of your ecommerce application.",
														"type": "string"
													},
													"plugin_version": {
														"description": "The version of your integration.",
														"type": "string",
														"example": "1.0.0"
													},
													"partner": {
														"description": "The name of the third party that developed the ecommerce application (if relevant).",
														"type": "string"
													},
													"shop_root_url": {
														"description": "The root/base URL of the ecommerce application.",
														"type": "string",
														"example": "https://www.my-ecommerce.com"
													}
												}
											}
										},
										"type": "object",
										"required": [
											"amount",
											"currency",
											"description",
											"gateway",
											"order_id",
											"type"
										]
									},
									{
										"title": "Wallet order",
										"description": "Wallet order",
										"type": "object",
										"properties": {
											"type": {
												"description": "- `redirect`: Redirects the customer to a [MultiSafepay payment page](https://docs.multisafepay.com/payment-pages/), where they can select a payment method and complete payment. \n- `direct`: Redirects the customer to an authentication or success page, depending on the payment method. \n\nFor more information, see [Direct vs redirect API requests](https://docs.multisafepay.com/developer/direct-vs-redirect).\n",
												"type": "string",
												"enum": [
													"direct",
													"redirect"
												],
												"example": "redirect"
											},
											"gateway": {
												"allOf": [
													{
														"description": "The unique identifier for the payment method (gateway).<br><br>If unset for `redirect` orders, the payment page displays **all** available payment methods."
													},
													{
														"type": "string"
													},
													{
														"example": "GOOGLEPAY"
													},
													{
														"enum": [
															"ALIPAY",
															"APPLEPAY",
															"GOOGLEPAY",
															"PAYPAL",
															"WECHAT"
														]
													}
												]
											},
											"order_id": {
												"description": "Your unique (client-defined) identifier for the order.",
												"type": "string",
												"maxLength": 50,
												"example": "test-order-0001"
											},
											"currency": {
												"description": "The currency of the payment.",
												"type": "string",
												"maxLength": 3,
												"minLength": 3,
												"format": "ISO-4217 currency code",
												"example": "EUR"
											},
											"amount": {
												"description": "The payment amount in the currency's smallest unit:\n\n- Decimal currencies: Value for 10 EUR = 1000 (1000 cents)\n- Zero-decimal currencies: Value for 10 YEN = 10\n",
												"type": "integer",
												"minimum": 0,
												"example": 1000
											},
											"description": {
												"description": "A description of the customer's order. Appears on MultiSafepay payment pages and customer bank statements (if supported by the bank)",
												"type": "string",
												"maxLength": 200,
												"example": "Test order description"
											},
											"payment_options": {
												"description": "Contains: \n\n- URLs to your success page and cancel page\n- Your [webhook endpoint](https://docs.multisafepay.com/developer/webhooks/)\n- Templates for styling [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/)\n- Settings for displaying available [gift cards](https://docs.multisafepay.com/payment-methods/gift-cards/)\n",
												"type": "object",
												"properties": {
													"notification_url": {
														"description": "The [webhook endpoint](https://docs.multisafepay.com/developer/webhooks/) for MultiSafepay to send status updates and other notifications for this website.",
														"type": "string",
														"format": "url",
														"maxLength": 150,
														"example": "https://www.examplewebsite.com/payment-updates/"
													},
													"notification_method": {
														"description": "Sets the webhook [notification method](https://docs.multisafepay.com/developer/webhooks/).\n\nWe recommend setting this to `POST` to reduce network load and increase security.\n",
														"type": "string",
														"enum": [
															"POST",
															"GET"
														],
														"default": "GET",
														"example": "POST"
													},
													"redirect_url": {
														"description": "The page customers are redirected to:\n\n- After **successful** payment, i.e. your success page, or thank you page\n- If the transaction status is [Uncleared](https://docs.multisafepay.com/about-payments/uncleared-transactions/) \n",
														"type": "string",
														"example": "https://www.example.com/test-order-0001/successful/"
													},
													"cancel_url": {
														"description": "The page customers are redirected to after **unsuccessful** payments.",
														"type": "string",
														"example": "https://www.example.com/test-order-0001/unsuccessful/"
													},
													"close_window": {
														"description": "Whether to display the MultiSafepay payment page in a new window that automatically closes after the customer completes payment.",
														"type": "boolean",
														"default": false,
														"example": false
													},
													"settings": {
														"description": "For [gift card](https://docs.multisafepay.com/payment-methods/gift-cards/) payments.",
														"type": "object",
														"properties": {
															"coupons": {
																"description": "Optional settings for gift cards.",
																"properties": {
																	"allow": {
																		"description": "Specifies which gift cards the customer can pay with.",
																		"type": "array",
																		"example": "EDENCO",
																		"items": {
																			"type": "string",
																			"enum": [
																				"BABYCAD",
																				"BEAUTYWELL",
																				"BLOEMENCAD",
																				"BOEKENBON",
																				"DEGROTESPL",
																				"EDENCOM",
																				"EDENCO",
																				"EDENRES",
																				"EDENSPORTS",
																				"FASHIONCHQ",
																				"FASHIONGFT",
																				"FIETSENBON",
																				"GOOD4FUN",
																				"GEZONDHEID",
																				"NATNLBIOSC",
																				"NATNLETUIN",
																				"PARFUMCADE",
																				"SPORTENFIT",
																				"VRGIFTCARD",
																				"VVVGIFTCRD",
																				"WEBSHOPGFT",
																				"WIJNCADEAU",
																				"YOURGIFT"
																			]
																		}
																	}
																}
															}
														}
													},
													"template_id": {
														"description": "Apply a template for styling [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/styling/).\n\nIf `payment_options.template` is also set, `payment_options.template` is used.\n",
														"type": "string"
													},
													"template": {
														"description": "Applies a template object structure for styling [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/styling/).\n\nOverrides the `payment_options.template_id`.\n",
														"properties": {
															"version": {
																"description": "The version of the template.",
																"type": "string"
															},
															"settings": {
																"description": "Sets whether to display or hide email elements, e.g. buttons, logos.",
																"type": "object",
																"properties": {
																	"hide_logo": {
																		"description": "Whether to hide the email header logo.",
																		"type": "boolean"
																	},
																	"iframe_mode": {
																		"description": "Whether to hide iframe elements.",
																		"type": "boolean"
																	},
																	"hide_flags": {
																		"description": "Whether to hide the flags container.",
																		"type": "boolean"
																	},
																	"hide_powered": {
																		"description": "Whether to hide the powered link.",
																		"type": "boolean"
																	},
																	"hide_cart": {
																		"description": "Whether to hide the shopping cart container.",
																		"type": "boolean"
																	},
																	"hide_btn_cancel": {
																		"description": "Whether to hide the **Cancel** button.",
																		"type": "boolean"
																	},
																	"hide_cc_logos": {
																		"description": "Whether to hide credit card logos.",
																		"type": "boolean"
																	},
																	"hide_btn_all_methods": {
																		"description": "Whether to hide the **All methods** button.",
																		"type": "boolean"
																	}
																}
															},
															"header": {
																"description": "Settings for the header logo, cover image, background, and font.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"logo": {
																			"description": "Your logo to display in the email header.",
																			"type": "object",
																			"properties": {
																				"image": {
																					"description": "The filename of the logo to display.",
																					"type": "string"
																				}
																			}
																		},
																		"cover": {
																			"description": "Resize the background image to cover the entire header container.",
																			"type": "object",
																			"properties": {
																				"image": {
																					"description": "The cover image.",
																					"type": "string"
																				}
																			}
																		},
																		"background": {
																			"description": "The header background.",
																			"type": "string"
																		},
																		"text": {
																			"description": "The header font color.",
																			"type": "string"
																		}
																	}
																}
															},
															"body": {
																"description": "Settings for the email body.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"text": {
																			"description": "The body font color.",
																			"type": "string"
																		},
																		"background": {
																			"description": "The body background color.",
																			"type": "string"
																		},
																		"link": {
																			"description": "Settings for links in the email body.",
																			"type": "object",
																			"properties": {
																				"text": {
																					"description": "The link text color in the email body.",
																					"type": "string"
																				},
																				"hover": {
																					"description": "Settings for hovering over links in the email body.",
																					"type": "object",
																					"properties": {
																						"text": {
																							"description": "The link text color on hover in the body.",
																							"type": "string"
																						},
																						"border": {
																							"description": "The link border color on hover in the body.",
																							"type": "string"
																						}
																					}
																				}
																			}
																		}
																	}
																}
															},
															"container": {
																"description": "Settings for the container element.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"text": {
																			"description": "The color of text in the container.",
																			"type": "string"
																		},
																		"background": {
																			"description": "The color of the container background.",
																			"type": "string"
																		},
																		"link": {
																			"description": "Settings for links in the container.",
																			"type": "object",
																			"properties": {
																				"text": {
																					"description": "The link text color in the container.",
																					"type": "string"
																				}
																			}
																		}
																	}
																}
															},
															"cart": {
																"description": "Settings for the cart element.",
																"type": "object",
																"properties": {
																	"text": {
																		"description": "The text color in the cart.",
																		"type": "string"
																	},
																	"label": {
																		"description": "The color of labels in the cart.",
																		"type": "string"
																	},
																	"background": {
																		"description": "The background color of the cart.",
																		"type": "string"
																	},
																	"border": {
																		"description": "The border color of the cart.",
																		"type": "string"
																	}
																}
															},
															"payment_form": {
																"description": "Settings for the payment form in the email.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"text": {
																			"description": "The text color in the payment form.",
																			"type": "string"
																		},
																		"background": {
																			"description": "The background color of the payment form.",
																			"type": "string"
																		},
																		"border": {
																			"description": "The border color of the payment form.",
																			"type": "string"
																		},
																		"inputs": {
																			"description": "Settings for the payment form button.",
																			"type": "object",
																			"properties": {
																				"border": {
																					"description": "The color of the payment form button border.",
																					"type": "string"
																				},
																				"label": {
																					"description": "The call to action in the payment form button.",
																					"type": "string"
																				}
																			}
																		}
																	}
																}
															},
															"buttons": {
																"description": "Settings for buttons in the email.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"payment_method": {
																			"description": "Settings for the payment method button.",
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"background": {
																						"description": "The payment method button background color.",
																						"type": "string"
																					},
																					"text": {
																						"description": "The payment method button text color.",
																						"type": "string"
																					},
																					"border": {
																						"description": "The payment method button border color.",
																						"type": "string"
																					},
																					"hover": {
																						"description": "Settings when hovering over the payment method button.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The payment method button background color on hover.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The payment method button text color on hover.",
																								"type": "string"
																							},
																							"border": {
																								"description": "The payment method button border color on hover.",
																								"type": "string"
																							}
																						}
																					},
																					"active": {
																						"description": "Settings for when the payment method button is active.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The payment method button background color when active.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The payment method button text color when active.",
																								"type": "string"
																							},
																							"border": {
																								"description": "The payment method button border color when active.",
																								"type": "string"
																							}
																						}
																					}
																				}
																			}
																		},
																		"secondary": {
																			"description": "Settings for the secondary button.",
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"background": {
																						"description": "The secondary button background color.",
																						"type": "string"
																					},
																					"text": {
																						"description": "The secondary button text color.",
																						"type": "string"
																					},
																					"hover": {
																						"description": "Settings for the secondary button on hover.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The secondary button background color on hover.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The secondary button text color on hover.",
																								"type": "string"
																							}
																						}
																					}
																				}
																			}
																		},
																		"primary": {
																			"description": "Settings for the primary button.",
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"background": {
																						"description": "The primary button background color.",
																						"type": "string"
																					},
																					"text": {
																						"description": "The primary button text color.",
																						"type": "string"
																					},
																					"hover": {
																						"description": "Settings for the primary button on hover.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The primary button background color on hover.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The primary button text color on hover.",
																								"type": "string"
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											},
											"customer": {
												"allOf": [
													{
														"type": "object",
														"description": "The customer’s personal information.\n\n**Required for**: All orders **except** Apple Pay and Google Pay, and Belfius, iDEAL, and WeChat Pay `direct` orders.\n",
														"properties": {
															"locale": {
																"type": "string",
																"description": "- Localizes [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/) for the customer’s language, region, available payment methods, and any UI preferences.\n- Sends [email templates](https://docs.multisafepay.com/features/email-templates/) in the customer's preferred language. If set, `locale` overrides the language set in an email template.\n- Displays local variants of payment methods, e.g. to display:\n  - [Cartes Bancaires](https://docs.multisafepay.com/payment-methods/cartes-bancaires), set to `fr_FR`.\n  - [Dankort](https://docs.multisafepay.com/payment-methods/dankort), set to `da_DK`.\n  - [Postepay](https://docs.multisafepay.com/payment-methods/postepay), set to `it_IT`.\n\n**Required for:** Bancontact\n\n|Locale|Language & country|\n|--------|--------|\n|`de_AT`|German Austria|\n|`de_DE`|German Germany|\n|`en_US`|American English|\n|`fi_FI`|Finnish|\n|`fr_BE`|French Belgium|\n|`it_IT`|Italian|\n|`nl_BE`|Dutch Belgium|\n|`nl_NL`|Dutch Netherlands|\n|`pl_PL`|Polish|\n|`es_ES`|Spanish|\n|`sv_SE`|Swedish|\n|`zh_CN`|Chinese|\n",
																"format": "ab_CD with ISO 639 language codes and ISO 3166 country codes",
																"enum": [
																	"de_AT",
																	"de_DE",
																	"en_US",
																	"fi_FI",
																	"fr_BE",
																	"it_IT",
																	"nl_BE",
																	"nl_NL",
																	"pl_PL",
																	"es_ES",
																	"sv_SE",
																	"zh_CN"
																],
																"example": "nl_NL",
																"default": "en_US"
															},
															"ip_address": {
																"description": "The customer’s IP address.\n\n**Required for:** Pay later, credit card, and Payment Component orders for our fraud check. If empty or incorrect (e.g. your IP address instead of the customer’s), the transaction status may be **Uncleared**, or even **Declined**.\n\n\n**Recommended** but not required for other payment methods.\n\nTo retrieve the customer's IP address if there is:\n- A proxy, use `forwarded_ip`.\n- No proxy, use `ip_address`.\n",
																"type": "string",
																"format": "IP address",
																"example": "123.123.123.123"
															},
															"forwarded_ip": {
																"description": "The [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For) header of the customer object when using a proxy.\n\nTo retrieve the customer's IP address if there is:\n- A proxy, use `forwarded_ip`.\n- No proxy, use `ip_address`.\n",
																"type": "string",
																"format": "IPv4"
															},
															"first_name": {
																"description": "The customer’s first name.\n\nWe recommend always requiring the customer to provide their full name, instead of initials or abbreviations.\n",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Simon"
															},
															"last_name": {
																"description": "The customer’s last name.",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Smit"
															},
															"gender": {
																"description": "The customer's gender.",
																"type": "string",
																"maxLength": 1,
																"enum": [
																	"M",
																	"F"
																],
																"example": "M"
															},
															"birthday": {
																"description": "The customer's date of birth.",
																"type": "string",
																"format": "yyyy-MM-dd",
																"example": "1980-12-31"
															},
															"address1": {
																"description": "The first line of the address.",
																"type": "string",
																"maxLength": 64,
																"example": "Kraanspoor"
															},
															"address2": {
																"description": "The second line of the address.",
																"type": "string",
																"maxLength": 64,
																"example": "39"
															},
															"house_number": {
																"description": "The house number of the address.",
																"type": "string",
																"maxLength": 10,
																"example": "39C"
															},
															"zip_code": {
																"description": "The ZIP code of the address.",
																"type": "string",
																"maxLength": 10,
																"example": "1033 SC"
															},
															"city": {
																"description": "The city of the address.",
																"type": "string",
																"maxLength": 50,
																"example": "Amsterdam"
															},
															"state": {
																"description": "The state of the address. \n\n**Required for:** PayPal Seller Protection\n",
																"type": "string",
																"maxLength": 6
															},
															"country": {
																"description": "The country of the address.\n\n**Required for:** Bank Transfer and PayPal Seller Protection\n",
																"type": "string",
																"format": "country alpha-2",
																"example": "NL"
															},
															"phone": {
																"description": "The customer’s phone number.",
																"type": "string",
																"maxLength": 24,
																"example": "0208500500"
															},
															"email": {
																"description": "The customer’s email address.\n\nUsed for [Second Chance](https://docs.multisafepay.com/features/second-chance/) emails and fraud checks.\n\n**Required for:** Bank Transfer\n",
																"type": "string",
																"example": "customer@emailprovider.com"
															},
															"user_agent": {
																"description": "The characteristic string that identifies the customer's browser.",
																"type": "string",
																"example": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
															},
															"referrer": {
																"description": "The unique identifier for where the customer/browser originates from.",
																"type": "string"
															},
															"reference": {
																"description": "Your unique client-defined identifier for your customer.\n\n**Required for:** [Recurring payments](https://docs.multisafepay.com/api/#recurring-payments-orders) orders, both initial and subsequent payments.\n",
																"type": "string",
																"example": "customer-0001"
															}
														}
													}
												]
											},
											"gateway_info": {
												"description": "Information specific to the payment method (gateway). \n\n**Required for:** Apple Pay and Google Pay\n",
												"type": "object",
												"properties": {
													"payment_token": {
														"description": "For Apple Pay `direct` orders, the JSON-encoded `payment.token` with the customer’s encrypted payment details, generated by the Apple Pay JS API.\n\nSee:\n\n- Apple Pay direct integration – [Create an order](https://docs.multisafepay.com/payments/methods/wallet/applepay/direct-integration/#client-side-integration-1) \n- Apple Developer – [ApplePayPaymentToken](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymenttoken)\n\nFor Google Pay `direct` orders, the payment token returned from the client-side Google Pay API request.\n\nAccess the token at `PaymentData.PaymentMethodData.PaymentMethodTokenizationData.token`.\n\nSee [Google Pay direct integration](https://docs.multisafepay.com/payments/methods/wallet/googlepay/direct-integration/).\n",
														"type": "string"
													}
												}
											},
											"delivery": {
												"allOf": [
													{
														"description": "The customer's shipping address.",
														"type": "object",
														"properties": {
															"first_name": {
																"description": "The customer’s first name.\n\nWe recommend always requiring the customer to provide their full name, instead of initials or abbreviations.\n",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Simon"
															},
															"last_name": {
																"description": "The customer’s last name.",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Smit"
															},
															"address1": {
																"description": "The first line of the address.",
																"type": "string",
																"maxLength": 64,
																"example": "Kraanspoor"
															},
															"house_number": {
																"description": "The apartment number of the address.",
																"type": "string",
																"maxLength": 9,
																"example": "B"
															},
															"zip_code": {
																"description": "The ZIP code of the address.",
																"type": "string",
																"maxLength": 10,
																"example": "1033 SC"
															},
															"city": {
																"description": "The city of the address.",
																"type": "string",
																"maxLength": 50,
																"example": "Amsterdam"
															},
															"country": {
																"description": "The country of the address.",
																"type": "string",
																"format": "country alpha-2",
																"example": "NL"
															}
														}
													},
													{
														"required": [
															"address1",
															"city",
															"country",
															"first_name",
															"house_number",
															"last_name",
															"zip_code"
														]
													}
												]
											},
											"checkout_options": {
												"allOf": [
													{
														"description": "Settings for the shopping cart, including taxes and validation.",
														"type": "object",
														"properties": {
															"validate_cart": {
																"description": "If set to `true`, the value of `amount` is compared to the calculated total value of the shopping cart (returned as `order_total`).\n\nIf the values:\n\n- Match, the request is successful.\n- Don’t match, the request is unsuccessful and error_code 1027 is returned.\n",
																"type": "boolean",
																"default": false
															},
															"tax_tables": {
																"description": "Sets default VAT settings and creates VAT classes in the alternate array, which you can apply to individual shopping cart items.",
																"type": "object",
																"properties": {
																	"default": {
																		"description": "The default VAT setting. Used when no value is set for `shopping_cart.items.tax_table_selector`.",
																		"type": "object",
																		"properties": {
																			"shipping_taxed": {
																				"description": "Sets whether or not the shipping costs are taxed.",
																				"type": "boolean"
																			},
																			"rate": {
																				"description": "The tax rate percentage as a fraction, e.g. 15% is expressed as `0.15`.",
																				"type": "number",
																				"format": "float",
																				"minimum": 0,
																				"example": 0.15
																			}
																		}
																	},
																	"alternate": {
																		"description": "An array of client-defined VAT classes that you can apply to items in the shopping cart.",
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"name": {
																					"description": "The client-defined ID. Applies tax settings to items in the shopping cart through the `shopping_cart.items.tax_table_selector` attribute.",
																					"type": "string"
																				},
																				"standalone": {
																					"description": "Sets whether or not the shipping costs are taxed.",
																					"type": "boolean"
																				},
																				"rules": {
																					"type": "array",
																					"items": {
																						"type": "object",
																						"properties": {
																							"rate": {
																								"description": "The tax rate percentage expressed as a fraction.",
																								"type": "number",
																								"format": "float",
																								"example": 0.0825,
																								"minimum": 0
																							},
																							"country": {
																								"description": "The country where the tax rate applies.",
																								"type": "string",
																								"format": "country alpha-2",
																								"example": "US"
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												]
											},
											"shopping_cart": {
												"description": "The array of items in the customer's shopping cart, including the tax class as defined in `checkout_options`.\n\nIf you have a self-made integration, include the complete specification of the `shopping_cart`.\n",
												"type": "object",
												"properties": {
													"items": {
														"description": "The items in the customer's shopping cart. Specify the relevant tax ruling per item.",
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"name": {
																	"description": "The name of the product or service.",
																	"type": "string",
																	"example": "Backpack"
																},
																"description": {
																	"description": "A description of the product or service.",
																	"type": "string",
																	"example": "Black cotton backpack with logo."
																},
																"unit_price": {
																	"description": "The unit price (in decimals) of the item, excluding VAT.\n\nThe currency of the shopping cart is set at order level using `currency`. \n\n**Example:** The value for a €90 backpack is `90`.\n",
																	"type": "number",
																	"format": "float",
																	"example": 90
																},
																"quantity": {
																	"description": "The number of units of the item.",
																	"type": "integer",
																	"example": 1
																},
																"merchant_item_id": {
																	"description": "Your unique (client-defined) identifier for the product or service.\n\nIf this item specifies the shipping costs, set to `msp-shipping`.\n",
																	"type": "string",
																	"example": "12345678"
																},
																"tax_table_selector": {
																	"description": "Your client-defined identifier for a tax table, specified as `checkout_options.tax_tables.alternate.name`.",
																	"type": "string",
																	"example": "VAT-21"
																},
																"weight": {
																	"description": "The weight per product.",
																	"type": "object",
																	"properties": {
																		"unit": {
																			"description": "The unit of weight.",
																			"type": "string",
																			"enum": [
																				"KG"
																			],
																			"example": "KG"
																		},
																		"value": {
																			"description": "The weight of the item corresponding to the unit.\n\nFor a 2 kilogram product:\n- Set `value` to `2`.\n- Set `unit` to `KG`.\n",
																			"type": "number",
																			"example": 2
																		}
																	}
																}
															}
														}
													}
												}
											},
											"items": {
												"description": "An HTML string to display the order items on the MultiSafepay payment page, instead of including a `shopping_cart`.",
												"type": "string",
												"example": "<ol><li>Article 1: € 1,95</li><li>Article 2: € 2,95</li><li>Article 3: € 3,95</li></ol>"
											},
											"affiliate": {
												"description": "For [Split Payments](https://docs.multisafepay.com/features/split-payments/) (**required**).",
												"type": "object",
												"properties": {
													"split_payments": {
														"description": "Split the amount of a transaction between partner/primary and affiliated accounts by a percentage, a fixed amount, or both.\n\nFor every split payment rule, add an object to the array.\n",
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"merchant": {
																	"description": "The account ID of the affiliated account.",
																	"type": "string",
																	"example": 1001001
																},
																"fixed": {
																	"description": "The amount to split in cents.",
																	"type": "integer",
																	"minimum": 1
																},
																"percentage": {
																	"description": "A percentage of the amount to split.",
																	"type": "number",
																	"format": "float",
																	"minimum": 1
																},
																"description": {
																	"description": "A description of the split payment.",
																	"type": "string"
																}
															}
														}
													}
												}
											},
											"second_chance": {
												"description": "For [Second Chance](https://docs.multisafepay.com/features/second-chance/).",
												"type": "object",
												"properties": {
													"send_mail": {
														"description": "Whether to send reminder emails if the customer doesn't complete payment.\n\n\n **Suppressing Second Chance emails after cancellation**\n\n\n When a customer places an order, goes to your checkout, doesn’t complete payment, but later returns and tries to pay again, some webshops create a second order. \n \n \n If Second Chance emails are enabled, the customer still receives emails for the first order, even after they complete payment for the second order.\n\n Cancelling the first order does **not** suppress Second Chance emails. To suppress emails, make an Update order details: CancelOrder request.\n",
														"type": "boolean"
													}
												}
											},
											"custom_info": {
												"description": "Additional information about the order.",
												"type": "object",
												"properties": {
													"custom_1": {
														"description": "Information about the order.",
														"type": "string"
													},
													"custom_2": {
														"description": "Information about the order.",
														"type": "string"
													},
													"custom_3": {
														"description": "Information about the order.",
														"type": "string"
													}
												}
											},
											"days_active": {
												"description": "For `redirect` and `paymentlink` orders, sets the number of days the link to the MultiSafepay payment page is valid.\n\nThe link lifetime begins when the order is created, or the link is generated. A `session_id` is returned in the payment page URL.\n\nIf [Second Chance](https://docs.multisafepay.com/features/second-chance/) is enabled, we recommend a minimum lifetime of **48 hours**. Second Chance emails the customer 2 payment reminders: 1 hour and 24 hours after the order is created. If the lifetime is less than 24 hours, the link in the second email is no longer active when the customer receives it. \n\nSee `seconds_active` below. If `seconds_active` is also set, `seconds_active` is used. If neither is set, the default is used.\n",
												"type": "integer",
												"minimum": 1,
												"default": 30,
												"example": 30
											},
											"seconds_active": {
												"description": "For `redirect` and `paymentlink` orders, sets the number of seconds the link to the MultiSafepay payment page is valid.\n\nSee `days_active` above. If `days_active` is also set, `seconds_active` is used. If neither is set, the default is used.\n",
												"type": "integer",
												"minimum": 1,
												"default": 2592000
											},
											"var1": {
												"type": "string",
												"description": "Variable for storing additional data.",
												"maxLength": 500
											},
											"var2": {
												"type": "string",
												"description": "Variable for storing additional data.",
												"maxLength": 500
											},
											"var3": {
												"type": "string",
												"description": "Variable for storing additional data, including [Split Payments](https://docs.multisafepay.com/features/split-payments/) metadata.",
												"maxLength": 500
											},
											"plugin": {
												"description": "Information about your integration (useful for debugging).",
												"properties": {
													"shop": {
														"description": "The name of your ecommerce application.",
														"type": "string",
														"example": "My self-made integration"
													},
													"shop_version": {
														"description": "The version of your ecommerce application.",
														"type": "string"
													},
													"plugin_version": {
														"description": "The version of your integration.",
														"type": "string",
														"example": "1.0.0"
													},
													"partner": {
														"description": "The name of the third party that developed the ecommerce application (if relevant).",
														"type": "string"
													},
													"shop_root_url": {
														"description": "The root/base URL of the ecommerce application.",
														"type": "string",
														"example": "https://www.my-ecommerce.com"
													}
												}
											}
										},
										"required": [
											"amount",
											"currency",
											"description",
											"gateway",
											"order_id",
											"type"
										]
									},
									{
										"title": "Pay later order",
										"description": "Pay later order",
										"properties": {
											"type": {
												"description": "- `redirect`: Redirects the customer to a [MultiSafepay payment page](https://docs.multisafepay.com/payment-pages/), where they can select a payment method and complete payment. \n- `direct`: Redirects the customer to an authentication or success page, depending on the payment method. \n\nFor more information, see [Direct vs redirect API requests](https://docs.multisafepay.com/developer/direct-vs-redirect).\n",
												"type": "string",
												"enum": [
													"direct",
													"redirect"
												],
												"example": "redirect"
											},
											"gateway": {
												"allOf": [
													{
														"description": "The unique identifier for the payment method (gateway).<br><br>If unset for `redirect` orders, the payment page displays **all** available payment methods."
													},
													{
														"type": "string"
													},
													{
														"example": "PAYAFTER"
													},
													{
														"enum": [
															"AFTERPAY",
															"EINVOICE",
															"IN3",
															"KLARNA",
															"PAYAFTER",
															"SANTANDER"
														]
													}
												]
											},
											"order_id": {
												"description": "Your unique (client-defined) identifier for the order.",
												"type": "string",
												"maxLength": 50,
												"example": "test-order-0001"
											},
											"currency": {
												"description": "The currency of the payment.",
												"type": "string",
												"maxLength": 3,
												"minLength": 3,
												"format": "ISO-4217 currency code",
												"example": "EUR"
											},
											"amount": {
												"description": "The payment amount in the currency's smallest unit:\n\n- Decimal currencies: Value for 10 EUR = 1000 (1000 cents)\n- Zero-decimal currencies: Value for 10 YEN = 10\n",
												"type": "integer",
												"minimum": 0,
												"example": 1000
											},
											"description": {
												"description": "A description of the customer's order. Appears on MultiSafepay payment pages and customer bank statements (if supported by the bank)",
												"type": "string",
												"maxLength": 200,
												"example": "Test order description"
											},
											"payment_options": {
												"description": "Contains: \n\n- URLs to your success page and cancel page\n- Your [webhook endpoint](https://docs.multisafepay.com/developer/webhooks/)\n- Templates for styling [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/)\n- Settings for displaying available [gift cards](https://docs.multisafepay.com/payment-methods/gift-cards/)\n",
												"type": "object",
												"properties": {
													"notification_url": {
														"description": "The [webhook endpoint](https://docs.multisafepay.com/developer/webhooks/) for MultiSafepay to send status updates and other notifications for this website.",
														"type": "string",
														"format": "url",
														"maxLength": 150,
														"example": "https://www.examplewebsite.com/payment-updates/"
													},
													"notification_method": {
														"description": "Sets the webhook [notification method](https://docs.multisafepay.com/developer/webhooks/).\n\nWe recommend setting this to `POST` to reduce network load and increase security.\n",
														"type": "string",
														"enum": [
															"POST",
															"GET"
														],
														"default": "GET",
														"example": "POST"
													},
													"redirect_url": {
														"description": "The page customers are redirected to:\n\n- After **successful** payment, i.e. your success page, or thank you page\n- If the transaction status is [Uncleared](https://docs.multisafepay.com/about-payments/uncleared-transactions/) \n",
														"type": "string",
														"example": "https://www.example.com/test-order-0001/successful/"
													},
													"cancel_url": {
														"description": "The page customers are redirected to after **unsuccessful** payments.",
														"type": "string",
														"example": "https://www.example.com/test-order-0001/unsuccessful/"
													},
													"close_window": {
														"description": "Whether to display the MultiSafepay payment page in a new window that automatically closes after the customer completes payment.",
														"type": "boolean",
														"default": false,
														"example": false
													},
													"settings": {
														"description": "For [gift card](https://docs.multisafepay.com/payment-methods/gift-cards/) payments.",
														"type": "object",
														"properties": {
															"coupons": {
																"description": "Optional settings for gift cards.",
																"properties": {
																	"allow": {
																		"description": "Specifies which gift cards the customer can pay with.",
																		"type": "array",
																		"example": "EDENCO",
																		"items": {
																			"type": "string",
																			"enum": [
																				"BABYCAD",
																				"BEAUTYWELL",
																				"BLOEMENCAD",
																				"BOEKENBON",
																				"DEGROTESPL",
																				"EDENCOM",
																				"EDENCO",
																				"EDENRES",
																				"EDENSPORTS",
																				"FASHIONCHQ",
																				"FASHIONGFT",
																				"FIETSENBON",
																				"GOOD4FUN",
																				"GEZONDHEID",
																				"NATNLBIOSC",
																				"NATNLETUIN",
																				"PARFUMCADE",
																				"SPORTENFIT",
																				"VRGIFTCARD",
																				"VVVGIFTCRD",
																				"WEBSHOPGFT",
																				"WIJNCADEAU",
																				"YOURGIFT"
																			]
																		}
																	}
																}
															}
														}
													},
													"template_id": {
														"description": "Apply a template for styling [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/styling/).\n\nIf `payment_options.template` is also set, `payment_options.template` is used.\n",
														"type": "string"
													},
													"template": {
														"description": "Applies a template object structure for styling [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/styling/).\n\nOverrides the `payment_options.template_id`.\n",
														"properties": {
															"version": {
																"description": "The version of the template.",
																"type": "string"
															},
															"settings": {
																"description": "Sets whether to display or hide email elements, e.g. buttons, logos.",
																"type": "object",
																"properties": {
																	"hide_logo": {
																		"description": "Whether to hide the email header logo.",
																		"type": "boolean"
																	},
																	"iframe_mode": {
																		"description": "Whether to hide iframe elements.",
																		"type": "boolean"
																	},
																	"hide_flags": {
																		"description": "Whether to hide the flags container.",
																		"type": "boolean"
																	},
																	"hide_powered": {
																		"description": "Whether to hide the powered link.",
																		"type": "boolean"
																	},
																	"hide_cart": {
																		"description": "Whether to hide the shopping cart container.",
																		"type": "boolean"
																	},
																	"hide_btn_cancel": {
																		"description": "Whether to hide the **Cancel** button.",
																		"type": "boolean"
																	},
																	"hide_cc_logos": {
																		"description": "Whether to hide credit card logos.",
																		"type": "boolean"
																	},
																	"hide_btn_all_methods": {
																		"description": "Whether to hide the **All methods** button.",
																		"type": "boolean"
																	}
																}
															},
															"header": {
																"description": "Settings for the header logo, cover image, background, and font.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"logo": {
																			"description": "Your logo to display in the email header.",
																			"type": "object",
																			"properties": {
																				"image": {
																					"description": "The filename of the logo to display.",
																					"type": "string"
																				}
																			}
																		},
																		"cover": {
																			"description": "Resize the background image to cover the entire header container.",
																			"type": "object",
																			"properties": {
																				"image": {
																					"description": "The cover image.",
																					"type": "string"
																				}
																			}
																		},
																		"background": {
																			"description": "The header background.",
																			"type": "string"
																		},
																		"text": {
																			"description": "The header font color.",
																			"type": "string"
																		}
																	}
																}
															},
															"body": {
																"description": "Settings for the email body.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"text": {
																			"description": "The body font color.",
																			"type": "string"
																		},
																		"background": {
																			"description": "The body background color.",
																			"type": "string"
																		},
																		"link": {
																			"description": "Settings for links in the email body.",
																			"type": "object",
																			"properties": {
																				"text": {
																					"description": "The link text color in the email body.",
																					"type": "string"
																				},
																				"hover": {
																					"description": "Settings for hovering over links in the email body.",
																					"type": "object",
																					"properties": {
																						"text": {
																							"description": "The link text color on hover in the body.",
																							"type": "string"
																						},
																						"border": {
																							"description": "The link border color on hover in the body.",
																							"type": "string"
																						}
																					}
																				}
																			}
																		}
																	}
																}
															},
															"container": {
																"description": "Settings for the container element.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"text": {
																			"description": "The color of text in the container.",
																			"type": "string"
																		},
																		"background": {
																			"description": "The color of the container background.",
																			"type": "string"
																		},
																		"link": {
																			"description": "Settings for links in the container.",
																			"type": "object",
																			"properties": {
																				"text": {
																					"description": "The link text color in the container.",
																					"type": "string"
																				}
																			}
																		}
																	}
																}
															},
															"cart": {
																"description": "Settings for the cart element.",
																"type": "object",
																"properties": {
																	"text": {
																		"description": "The text color in the cart.",
																		"type": "string"
																	},
																	"label": {
																		"description": "The color of labels in the cart.",
																		"type": "string"
																	},
																	"background": {
																		"description": "The background color of the cart.",
																		"type": "string"
																	},
																	"border": {
																		"description": "The border color of the cart.",
																		"type": "string"
																	}
																}
															},
															"payment_form": {
																"description": "Settings for the payment form in the email.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"text": {
																			"description": "The text color in the payment form.",
																			"type": "string"
																		},
																		"background": {
																			"description": "The background color of the payment form.",
																			"type": "string"
																		},
																		"border": {
																			"description": "The border color of the payment form.",
																			"type": "string"
																		},
																		"inputs": {
																			"description": "Settings for the payment form button.",
																			"type": "object",
																			"properties": {
																				"border": {
																					"description": "The color of the payment form button border.",
																					"type": "string"
																				},
																				"label": {
																					"description": "The call to action in the payment form button.",
																					"type": "string"
																				}
																			}
																		}
																	}
																}
															},
															"buttons": {
																"description": "Settings for buttons in the email.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"payment_method": {
																			"description": "Settings for the payment method button.",
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"background": {
																						"description": "The payment method button background color.",
																						"type": "string"
																					},
																					"text": {
																						"description": "The payment method button text color.",
																						"type": "string"
																					},
																					"border": {
																						"description": "The payment method button border color.",
																						"type": "string"
																					},
																					"hover": {
																						"description": "Settings when hovering over the payment method button.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The payment method button background color on hover.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The payment method button text color on hover.",
																								"type": "string"
																							},
																							"border": {
																								"description": "The payment method button border color on hover.",
																								"type": "string"
																							}
																						}
																					},
																					"active": {
																						"description": "Settings for when the payment method button is active.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The payment method button background color when active.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The payment method button text color when active.",
																								"type": "string"
																							},
																							"border": {
																								"description": "The payment method button border color when active.",
																								"type": "string"
																							}
																						}
																					}
																				}
																			}
																		},
																		"secondary": {
																			"description": "Settings for the secondary button.",
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"background": {
																						"description": "The secondary button background color.",
																						"type": "string"
																					},
																					"text": {
																						"description": "The secondary button text color.",
																						"type": "string"
																					},
																					"hover": {
																						"description": "Settings for the secondary button on hover.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The secondary button background color on hover.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The secondary button text color on hover.",
																								"type": "string"
																							}
																						}
																					}
																				}
																			}
																		},
																		"primary": {
																			"description": "Settings for the primary button.",
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"background": {
																						"description": "The primary button background color.",
																						"type": "string"
																					},
																					"text": {
																						"description": "The primary button text color.",
																						"type": "string"
																					},
																					"hover": {
																						"description": "Settings for the primary button on hover.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The primary button background color on hover.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The primary button text color on hover.",
																								"type": "string"
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											},
											"customer": {
												"allOf": [
													{
														"type": "object",
														"description": "The customer’s personal information.\n\n**Required for**: All orders **except** Apple Pay and Google Pay, and Belfius, iDEAL, and WeChat Pay `direct` orders.\n",
														"properties": {
															"locale": {
																"type": "string",
																"description": "- Localizes [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/) for the customer’s language, region, available payment methods, and any UI preferences.\n- Sends [email templates](https://docs.multisafepay.com/features/email-templates/) in the customer's preferred language. If set, `locale` overrides the language set in an email template.\n- Displays local variants of payment methods, e.g. to display:\n  - [Cartes Bancaires](https://docs.multisafepay.com/payment-methods/cartes-bancaires), set to `fr_FR`.\n  - [Dankort](https://docs.multisafepay.com/payment-methods/dankort), set to `da_DK`.\n  - [Postepay](https://docs.multisafepay.com/payment-methods/postepay), set to `it_IT`.\n\n**Required for:** Bancontact\n\n|Locale|Language & country|\n|--------|--------|\n|`de_AT`|German Austria|\n|`de_DE`|German Germany|\n|`en_US`|American English|\n|`fi_FI`|Finnish|\n|`fr_BE`|French Belgium|\n|`it_IT`|Italian|\n|`nl_BE`|Dutch Belgium|\n|`nl_NL`|Dutch Netherlands|\n|`pl_PL`|Polish|\n|`es_ES`|Spanish|\n|`sv_SE`|Swedish|\n|`zh_CN`|Chinese|\n",
																"format": "ab_CD with ISO 639 language codes and ISO 3166 country codes",
																"enum": [
																	"de_AT",
																	"de_DE",
																	"en_US",
																	"fi_FI",
																	"fr_BE",
																	"it_IT",
																	"nl_BE",
																	"nl_NL",
																	"pl_PL",
																	"es_ES",
																	"sv_SE",
																	"zh_CN"
																],
																"example": "nl_NL",
																"default": "en_US"
															},
															"ip_address": {
																"description": "The customer’s IP address.\n\n**Required for:** Pay later, credit card, and Payment Component orders for our fraud check. If empty or incorrect (e.g. your IP address instead of the customer’s), the transaction status may be **Uncleared**, or even **Declined**.\n\n\n**Recommended** but not required for other payment methods.\n\nTo retrieve the customer's IP address if there is:\n- A proxy, use `forwarded_ip`.\n- No proxy, use `ip_address`.\n",
																"type": "string",
																"format": "IP address",
																"example": "123.123.123.123"
															},
															"forwarded_ip": {
																"description": "The [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For) header of the customer object when using a proxy.\n\nTo retrieve the customer's IP address if there is:\n- A proxy, use `forwarded_ip`.\n- No proxy, use `ip_address`.\n",
																"type": "string",
																"format": "IPv4"
															},
															"first_name": {
																"description": "The customer’s first name.\n\nWe recommend always requiring the customer to provide their full name, instead of initials or abbreviations.\n",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Simon"
															},
															"last_name": {
																"description": "The customer’s last name.",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Smit"
															},
															"gender": {
																"description": "The customer's gender.",
																"type": "string",
																"maxLength": 1,
																"enum": [
																	"M",
																	"F"
																],
																"example": "M"
															},
															"birthday": {
																"description": "The customer's date of birth.",
																"type": "string",
																"format": "yyyy-MM-dd",
																"example": "1980-12-31"
															},
															"address1": {
																"description": "The first line of the address.",
																"type": "string",
																"maxLength": 64,
																"example": "Kraanspoor"
															},
															"address2": {
																"description": "The second line of the address.",
																"type": "string",
																"maxLength": 64,
																"example": "39"
															},
															"house_number": {
																"description": "The house number of the address.",
																"type": "string",
																"maxLength": 10,
																"example": "39C"
															},
															"zip_code": {
																"description": "The ZIP code of the address.",
																"type": "string",
																"maxLength": 10,
																"example": "1033 SC"
															},
															"city": {
																"description": "The city of the address.",
																"type": "string",
																"maxLength": 50,
																"example": "Amsterdam"
															},
															"state": {
																"description": "The state of the address. \n\n**Required for:** PayPal Seller Protection\n",
																"type": "string",
																"maxLength": 6
															},
															"country": {
																"description": "The country of the address.\n\n**Required for:** Bank Transfer and PayPal Seller Protection\n",
																"type": "string",
																"format": "country alpha-2",
																"example": "NL"
															},
															"phone": {
																"description": "The customer’s phone number.",
																"type": "string",
																"maxLength": 24,
																"example": "0208500500"
															},
															"email": {
																"description": "The customer’s email address.\n\nUsed for [Second Chance](https://docs.multisafepay.com/features/second-chance/) emails and fraud checks.\n\n**Required for:** Bank Transfer\n",
																"type": "string",
																"example": "customer@emailprovider.com"
															},
															"user_agent": {
																"description": "The characteristic string that identifies the customer's browser.",
																"type": "string",
																"example": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
															},
															"referrer": {
																"description": "The unique identifier for where the customer/browser originates from.",
																"type": "string"
															},
															"reference": {
																"description": "Your unique client-defined identifier for your customer.\n\n**Required for:** [Recurring payments](https://docs.multisafepay.com/api/#recurring-payments-orders) orders, both initial and subsequent payments.\n",
																"type": "string",
																"example": "customer-0001"
															}
														}
													}
												]
											},
											"gateway_info": {
												"description": "Information specific to the payment method (gateway). \n\n**Required for:** AfterPay, E-Invoicing, in3, Klarna, and Pay After Delivery orders for credit checks in the Netherlands and Belgium\n",
												"type": "object",
												"properties": {
													"birthday": {
														"description": "The customer's date of birth.",
														"type": "string",
														"format": "yyyy-MM-dd",
														"example": "1980-12-31"
													},
													"bank_account": {
														"description": "The customer’s international bank account number (IBAN).",
														"type": "string"
													},
													"phone": {
														"description": "The customer’s phone number.",
														"type": "string",
														"maxLength": 24,
														"example": "0208500500"
													},
													"email": {
														"description": "The customer's email address to send payment instructions to.",
														"type": "string"
													}
												}
											},
											"delivery": {
												"allOf": [
													{
														"description": "The customer's shipping address.",
														"type": "object",
														"properties": {
															"first_name": {
																"description": "The customer’s first name.\n\nWe recommend always requiring the customer to provide their full name, instead of initials or abbreviations.\n",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Simon"
															},
															"last_name": {
																"description": "The customer’s last name.",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Smit"
															},
															"address1": {
																"description": "The first line of the address.",
																"type": "string",
																"maxLength": 64,
																"example": "Kraanspoor"
															},
															"house_number": {
																"description": "The apartment number of the address.",
																"type": "string",
																"maxLength": 9,
																"example": "B"
															},
															"zip_code": {
																"description": "The ZIP code of the address.",
																"type": "string",
																"maxLength": 10,
																"example": "1033 SC"
															},
															"city": {
																"description": "The city of the address.",
																"type": "string",
																"maxLength": 50,
																"example": "Amsterdam"
															},
															"country": {
																"description": "The country of the address.",
																"type": "string",
																"format": "country alpha-2",
																"example": "NL"
															}
														}
													},
													{
														"required": [
															"address1",
															"city",
															"country",
															"first_name",
															"house_number",
															"last_name",
															"zip_code"
														]
													}
												]
											},
											"checkout_options": {
												"allOf": [
													{
														"description": "Settings for the shopping cart, including taxes and validation.",
														"type": "object",
														"properties": {
															"tax_tables": {
																"description": "Sets default VAT settings and creates VAT classes in the alternate array, which you can apply to individual shopping cart items.",
																"type": "object",
																"properties": {
																	"default": {
																		"description": "The default VAT setting. Used when no value is set for `shopping_cart.items.tax_table_selector`.",
																		"type": "object",
																		"properties": {
																			"shipping_taxed": {
																				"description": "Sets whether or not the shipping costs are taxed.",
																				"type": "boolean"
																			},
																			"rate": {
																				"description": "The tax rate percentage as a fraction, e.g. 15% is expressed as `0.15`.",
																				"type": "number",
																				"format": "float",
																				"minimum": 0,
																				"example": 0.15
																			}
																		}
																	},
																	"alternate": {
																		"description": "An array of client-defined VAT classes that you can apply to items in the shopping cart.",
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"name": {
																					"description": "The client-defined ID. Applies tax settings to items in the shopping cart through the `shopping_cart.items.tax_table_selector` attribute.",
																					"type": "string"
																				},
																				"standalone": {
																					"description": "Sets whether or not the shipping costs are taxed.",
																					"type": "boolean"
																				},
																				"rules": {
																					"type": "array",
																					"items": {
																						"type": "object",
																						"properties": {
																							"rate": {
																								"description": "The tax rate percentage expressed as a fraction.",
																								"type": "number",
																								"format": "float",
																								"example": 0.0825,
																								"minimum": 0
																							},
																							"country": {
																								"description": "The country where the tax rate applies.",
																								"type": "string",
																								"format": "country alpha-2",
																								"example": "US"
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													},
													{
														"required": [
															"tax_tables"
														]
													}
												]
											},
											"shopping_cart": {
												"description": "**Required for:** AfterPay, E-Invoicing, in3, Klarna, Pay After Delivery orders. \n\nThe array of items in the customer's shopping cart, including the tax class as defined in `checkout_options`.\n\nIf you have a self-made integration, include the complete specification of the `shopping_cart`.\n",
												"type": "object",
												"properties": {
													"items": {
														"description": "The items in the customer's shopping cart. \n\nSpecify the relevant tax ruling per item.\n",
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"name": {
																	"description": "The name of the product or service.",
																	"type": "string",
																	"example": "Backpack"
																},
																"description": {
																	"description": "A description of the product or service.",
																	"type": "string",
																	"example": "Black cotton backpack with logo."
																},
																"unit_price": {
																	"description": "The unit price (in decimals) of the item, excluding VAT.\n\nThe currency of the shopping cart is set at order level using `currency`. \n\n**Example:** The value for a €90 backpack is `90`.\n",
																	"type": "number",
																	"format": "float",
																	"example": 90
																},
																"quantity": {
																	"description": "The number of units of the item.",
																	"type": "integer",
																	"example": 1
																},
																"merchant_item_id": {
																	"description": "Your unique (client-defined) identifier for the product or service.\n\nIf this item specifies the shipping costs, set to `msp-shipping`.\n",
																	"type": "string",
																	"example": "12345678"
																},
																"tax_table_selector": {
																	"description": "Your client-defined identifier for a tax table, specified as `checkout_options.tax_tables.alternate.name`.",
																	"type": "string",
																	"example": "VAT-21"
																},
																"weight": {
																	"description": "The weight per product.",
																	"type": "object",
																	"properties": {
																		"unit": {
																			"description": "The unit of weight.",
																			"type": "string",
																			"enum": [
																				"KG"
																			],
																			"example": "KG"
																		},
																		"value": {
																			"description": "The weight of the item corresponding to the unit.\n\nFor a 2 kilogram product:\n- Set `value` to `2`.\n- Set `unit` to `KG`.\n",
																			"type": "number",
																			"example": 2
																		}
																	}
																}
															}
														}
													}
												}
											},
											"items": {
												"description": "An HTML string to display the order items on the MultiSafepay payment page, instead of including a `shopping_cart`.",
												"type": "string",
												"example": "<ol><li>Article 1: € 1,95</li><li>Article 2: € 2,95</li><li>Article 3: € 3,95</li></ol>"
											},
											"affiliate": {
												"description": "For [Split Payments](https://docs.multisafepay.com/features/split-payments/) (**required**).",
												"type": "object",
												"properties": {
													"split_payments": {
														"description": "Split the amount of a transaction between partner/primary and affiliated accounts by a percentage, a fixed amount, or both.\n\nFor every split payment rule, add an object to the array.\n",
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"merchant": {
																	"description": "The account ID of the affiliated account.",
																	"type": "string",
																	"example": 1001001
																},
																"fixed": {
																	"description": "The amount to split in cents.",
																	"type": "integer",
																	"minimum": 1
																},
																"percentage": {
																	"description": "A percentage of the amount to split.",
																	"type": "number",
																	"format": "float",
																	"minimum": 1
																},
																"description": {
																	"description": "A description of the split payment.",
																	"type": "string"
																}
															}
														}
													}
												}
											},
											"second_chance": {
												"description": "For [Second Chance](https://docs.multisafepay.com/features/second-chance/).",
												"type": "object",
												"properties": {
													"send_mail": {
														"description": "Whether to send reminder emails if the customer doesn't complete payment.\n\n\n **Suppressing Second Chance emails after cancellation**\n\n\n When a customer places an order, goes to your checkout, doesn’t complete payment, but later returns and tries to pay again, some webshops create a second order. \n \n \n If Second Chance emails are enabled, the customer still receives emails for the first order, even after they complete payment for the second order.\n\n Cancelling the first order does **not** suppress Second Chance emails. To suppress emails, make an Update order details: CancelOrder request.\n",
														"type": "boolean"
													}
												}
											},
											"custom_info": {
												"description": "Additional information about the order.",
												"type": "object",
												"properties": {
													"custom_1": {
														"description": "Information about the order.",
														"type": "string"
													},
													"custom_2": {
														"description": "Information about the order.",
														"type": "string"
													},
													"custom_3": {
														"description": "Information about the order.",
														"type": "string"
													}
												}
											},
											"days_active": {
												"description": "For `redirect` and `paymentlink` orders, sets the number of days the link to the MultiSafepay payment page is valid.\n\nThe link lifetime begins when the order is created, or the link is generated. A `session_id` is returned in the payment page URL.\n\nIf [Second Chance](https://docs.multisafepay.com/features/second-chance/) is enabled, we recommend a minimum lifetime of **48 hours**. Second Chance emails the customer 2 payment reminders: 1 hour and 24 hours after the order is created. If the lifetime is less than 24 hours, the link in the second email is no longer active when the customer receives it. \n\nSee `seconds_active` below. If `seconds_active` is also set, `seconds_active` is used. If neither is set, the default is used.\n",
												"type": "integer",
												"minimum": 1,
												"default": 30,
												"example": 30
											},
											"seconds_active": {
												"description": "For `redirect` and `paymentlink` orders, sets the number of seconds the link to the MultiSafepay payment page is valid.\n\nSee `days_active` above. If `days_active` is also set, `seconds_active` is used. If neither is set, the default is used.\n",
												"type": "integer",
												"minimum": 1,
												"default": 2592000
											},
											"var1": {
												"type": "string",
												"description": "Variable for storing additional data.",
												"maxLength": 500
											},
											"var2": {
												"type": "string",
												"description": "Variable for storing additional data.",
												"maxLength": 500
											},
											"var3": {
												"type": "string",
												"description": "Variable for storing additional data, including [Split Payments](https://docs.multisafepay.com/features/split-payments/) metadata.",
												"maxLength": 500
											},
											"plugin": {
												"description": "Information about your integration (useful for debugging).",
												"properties": {
													"shop": {
														"description": "The name of your ecommerce application.",
														"type": "string",
														"example": "My self-made integration"
													},
													"shop_version": {
														"description": "The version of your ecommerce application.",
														"type": "string"
													},
													"plugin_version": {
														"description": "The version of your integration.",
														"type": "string",
														"example": "1.0.0"
													},
													"partner": {
														"description": "The name of the third party that developed the ecommerce application (if relevant).",
														"type": "string"
													},
													"shop_root_url": {
														"description": "The root/base URL of the ecommerce application.",
														"type": "string",
														"example": "https://www.my-ecommerce.com"
													}
												}
											}
										},
										"type": "object",
										"required": [
											"type",
											"gateway",
											"order_id",
											"currency",
											"amount",
											"description",
											"customer",
											"shopping_cart"
										]
									},
									{
										"title": "Payment Component",
										"description": "Payment Component",
										"properties": {
											"type": {
												"description": "`direct`: Redirects the customer to an authentication or success page, depending on the payment method. \n",
												"type": "string",
												"enum": [
													"direct"
												],
												"example": "direct"
											},
											"gateway": {
												"allOf": [
													{
														"description": "The unique identifier for the payment method (gateway).<br><br>If unset for `redirect` orders, the MultiSafepay payment page displays **all** available payment methods."
													},
													{
														"type": "string"
													},
													{
														"example": "IDEAL"
													},
													{
														"enum": [
															"BANKTRANS",
															"DIREB",
															"DIRECTBANK",
															"CREDITCARD",
															"IDEAL",
															"MISTERCASH",
															"PAYPAL"
														]
													}
												]
											},
											"order_id": {
												"description": "Your unique (client-defined) identifier for the order.",
												"type": "string",
												"maxLength": 50,
												"example": "test-order-0001"
											},
											"currency": {
												"description": "The currency of the payment.",
												"type": "string",
												"maxLength": 3,
												"minLength": 3,
												"format": "ISO-4217 currency code",
												"example": "EUR"
											},
											"amount": {
												"description": "The payment amount in the currency's smallest unit:\n\n- Decimal currencies: Value for 10 EUR = 1000 (1000 cents)\n- Zero-decimal currencies: Value for 10 YEN = 10\n",
												"type": "integer",
												"minimum": 0,
												"example": 1000
											},
											"description": {
												"description": "A description of the customer's order. Appears on MultiSafepay payment pages and customer bank statements (if supported by the bank)",
												"type": "string",
												"maxLength": 200,
												"example": "Test order description"
											},
											"payment_options": {
												"description": "Contains: \n\n- URLs to your success page and cancel page\n- Your [webhook endpoint](https://docs.multisafepay.com/developer/webhooks/)\n- Templates for styling [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/)\n- Settings for displaying available [gift cards](https://docs.multisafepay.com/payment-methods/gift-cards/)\n",
												"type": "object",
												"properties": {
													"notification_url": {
														"description": "The [webhook endpoint](https://docs.multisafepay.com/developer/webhooks/) for MultiSafepay to send status updates and other notifications for this website.",
														"type": "string",
														"format": "url",
														"maxLength": 150,
														"example": "https://www.examplewebsite.com/payment-updates/"
													},
													"notification_method": {
														"description": "Sets the webhook [notification method](https://docs.multisafepay.com/developer/webhooks/).\n\nWe recommend setting this to `POST` to reduce network load and increase security.\n",
														"type": "string",
														"enum": [
															"POST",
															"GET"
														],
														"default": "GET",
														"example": "POST"
													},
													"redirect_url": {
														"description": "The page customers are redirected to:\n\n- After **successful** payment, i.e. your success page, or thank you page\n- If the transaction status is [Uncleared](https://docs.multisafepay.com/about-payments/uncleared-transactions/) \n",
														"type": "string",
														"example": "https://www.example.com/test-order-0001/successful/"
													},
													"cancel_url": {
														"description": "The page customers are redirected to after **unsuccessful** payments.",
														"type": "string",
														"example": "https://www.example.com/test-order-0001/unsuccessful/"
													},
													"close_window": {
														"description": "Whether to display the MultiSafepay payment page in a new window that automatically closes after the customer completes payment.",
														"type": "boolean",
														"default": false,
														"example": false
													},
													"settings": {
														"description": "For [gift card](https://docs.multisafepay.com/payment-methods/gift-cards/) payments.",
														"type": "object",
														"properties": {
															"coupons": {
																"description": "Optional settings for gift cards.",
																"properties": {
																	"allow": {
																		"description": "Specifies which gift cards the customer can pay with.",
																		"type": "array",
																		"example": "EDENCO",
																		"items": {
																			"type": "string",
																			"enum": [
																				"BABYCAD",
																				"BEAUTYWELL",
																				"BLOEMENCAD",
																				"BOEKENBON",
																				"DEGROTESPL",
																				"EDENCOM",
																				"EDENCO",
																				"EDENRES",
																				"EDENSPORTS",
																				"FASHIONCHQ",
																				"FASHIONGFT",
																				"FIETSENBON",
																				"GOOD4FUN",
																				"GEZONDHEID",
																				"NATNLBIOSC",
																				"NATNLETUIN",
																				"PARFUMCADE",
																				"SPORTENFIT",
																				"VRGIFTCARD",
																				"VVVGIFTCRD",
																				"WEBSHOPGFT",
																				"WIJNCADEAU",
																				"YOURGIFT"
																			]
																		}
																	}
																}
															}
														}
													},
													"template_id": {
														"description": "Apply a template for styling [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/styling/).\n\nIf `payment_options.template` is also set, `payment_options.template` is used.\n",
														"type": "string"
													},
													"template": {
														"description": "Applies a template object structure for styling [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/styling/).\n\nOverrides the `payment_options.template_id`.\n",
														"properties": {
															"version": {
																"description": "The version of the template.",
																"type": "string"
															},
															"settings": {
																"description": "Sets whether to display or hide email elements, e.g. buttons, logos.",
																"type": "object",
																"properties": {
																	"hide_logo": {
																		"description": "Whether to hide the email header logo.",
																		"type": "boolean"
																	},
																	"iframe_mode": {
																		"description": "Whether to hide iframe elements.",
																		"type": "boolean"
																	},
																	"hide_flags": {
																		"description": "Whether to hide the flags container.",
																		"type": "boolean"
																	},
																	"hide_powered": {
																		"description": "Whether to hide the powered link.",
																		"type": "boolean"
																	},
																	"hide_cart": {
																		"description": "Whether to hide the shopping cart container.",
																		"type": "boolean"
																	},
																	"hide_btn_cancel": {
																		"description": "Whether to hide the **Cancel** button.",
																		"type": "boolean"
																	},
																	"hide_cc_logos": {
																		"description": "Whether to hide credit card logos.",
																		"type": "boolean"
																	},
																	"hide_btn_all_methods": {
																		"description": "Whether to hide the **All methods** button.",
																		"type": "boolean"
																	}
																}
															},
															"header": {
																"description": "Settings for the header logo, cover image, background, and font.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"logo": {
																			"description": "Your logo to display in the email header.",
																			"type": "object",
																			"properties": {
																				"image": {
																					"description": "The filename of the logo to display.",
																					"type": "string"
																				}
																			}
																		},
																		"cover": {
																			"description": "Resize the background image to cover the entire header container.",
																			"type": "object",
																			"properties": {
																				"image": {
																					"description": "The cover image.",
																					"type": "string"
																				}
																			}
																		},
																		"background": {
																			"description": "The header background.",
																			"type": "string"
																		},
																		"text": {
																			"description": "The header font color.",
																			"type": "string"
																		}
																	}
																}
															},
															"body": {
																"description": "Settings for the email body.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"text": {
																			"description": "The body font color.",
																			"type": "string"
																		},
																		"background": {
																			"description": "The body background color.",
																			"type": "string"
																		},
																		"link": {
																			"description": "Settings for links in the email body.",
																			"type": "object",
																			"properties": {
																				"text": {
																					"description": "The link text color in the email body.",
																					"type": "string"
																				},
																				"hover": {
																					"description": "Settings for hovering over links in the email body.",
																					"type": "object",
																					"properties": {
																						"text": {
																							"description": "The link text color on hover in the body.",
																							"type": "string"
																						},
																						"border": {
																							"description": "The link border color on hover in the body.",
																							"type": "string"
																						}
																					}
																				}
																			}
																		}
																	}
																}
															},
															"container": {
																"description": "Settings for the container element.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"text": {
																			"description": "The color of text in the container.",
																			"type": "string"
																		},
																		"background": {
																			"description": "The color of the container background.",
																			"type": "string"
																		},
																		"link": {
																			"description": "Settings for links in the container.",
																			"type": "object",
																			"properties": {
																				"text": {
																					"description": "The link text color in the container.",
																					"type": "string"
																				}
																			}
																		}
																	}
																}
															},
															"cart": {
																"description": "Settings for the cart element.",
																"type": "object",
																"properties": {
																	"text": {
																		"description": "The text color in the cart.",
																		"type": "string"
																	},
																	"label": {
																		"description": "The color of labels in the cart.",
																		"type": "string"
																	},
																	"background": {
																		"description": "The background color of the cart.",
																		"type": "string"
																	},
																	"border": {
																		"description": "The border color of the cart.",
																		"type": "string"
																	}
																}
															},
															"payment_form": {
																"description": "Settings for the payment form in the email.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"text": {
																			"description": "The text color in the payment form.",
																			"type": "string"
																		},
																		"background": {
																			"description": "The background color of the payment form.",
																			"type": "string"
																		},
																		"border": {
																			"description": "The border color of the payment form.",
																			"type": "string"
																		},
																		"inputs": {
																			"description": "Settings for the payment form button.",
																			"type": "object",
																			"properties": {
																				"border": {
																					"description": "The color of the payment form button border.",
																					"type": "string"
																				},
																				"label": {
																					"description": "The call to action in the payment form button.",
																					"type": "string"
																				}
																			}
																		}
																	}
																}
															},
															"buttons": {
																"description": "Settings for buttons in the email.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"payment_method": {
																			"description": "Settings for the payment method button.",
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"background": {
																						"description": "The payment method button background color.",
																						"type": "string"
																					},
																					"text": {
																						"description": "The payment method button text color.",
																						"type": "string"
																					},
																					"border": {
																						"description": "The payment method button border color.",
																						"type": "string"
																					},
																					"hover": {
																						"description": "Settings when hovering over the payment method button.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The payment method button background color on hover.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The payment method button text color on hover.",
																								"type": "string"
																							},
																							"border": {
																								"description": "The payment method button border color on hover.",
																								"type": "string"
																							}
																						}
																					},
																					"active": {
																						"description": "Settings for when the payment method button is active.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The payment method button background color when active.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The payment method button text color when active.",
																								"type": "string"
																							},
																							"border": {
																								"description": "The payment method button border color when active.",
																								"type": "string"
																							}
																						}
																					}
																				}
																			}
																		},
																		"secondary": {
																			"description": "Settings for the secondary button.",
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"background": {
																						"description": "The secondary button background color.",
																						"type": "string"
																					},
																					"text": {
																						"description": "The secondary button text color.",
																						"type": "string"
																					},
																					"hover": {
																						"description": "Settings for the secondary button on hover.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The secondary button background color on hover.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The secondary button text color on hover.",
																								"type": "string"
																							}
																						}
																					}
																				}
																			}
																		},
																		"primary": {
																			"description": "Settings for the primary button.",
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"background": {
																						"description": "The primary button background color.",
																						"type": "string"
																					},
																					"text": {
																						"description": "The primary button text color.",
																						"type": "string"
																					},
																					"hover": {
																						"description": "Settings for the primary button on hover.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The primary button background color on hover.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The primary button text color on hover.",
																								"type": "string"
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											},
											"customer": {
												"type": "object",
												"description": "The customer’s personal information.\n\n**Required for**: All orders **except** Apple Pay and Google Pay, and Belfius, iDEAL, and WeChat Pay `direct` orders.\n",
												"properties": {
													"locale": {
														"type": "string",
														"description": "- Localizes [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/) for the customer’s language, region, available payment methods, and any UI preferences.\n- Sends [email templates](https://docs.multisafepay.com/features/email-templates/) in the customer's preferred language. If set, `locale` overrides the language set in an email template.\n- Displays local variants of payment methods, e.g. to display:\n  - [Cartes Bancaires](https://docs.multisafepay.com/payment-methods/cartes-bancaires), set to `fr_FR`.\n  - [Dankort](https://docs.multisafepay.com/payment-methods/dankort), set to `da_DK`.\n  - [Postepay](https://docs.multisafepay.com/payment-methods/postepay), set to `it_IT`.\n\n**Required for:** Bancontact\n\n|Locale|Language & country|\n|--------|--------|\n|`de_AT`|German Austria|\n|`de_DE`|German Germany|\n|`en_US`|American English|\n|`fi_FI`|Finnish|\n|`fr_BE`|French Belgium|\n|`it_IT`|Italian|\n|`nl_BE`|Dutch Belgium|\n|`nl_NL`|Dutch Netherlands|\n|`pl_PL`|Polish|\n|`es_ES`|Spanish|\n|`sv_SE`|Swedish|\n|`zh_CN`|Chinese|\n",
														"format": "ab_CD with ISO 639 language codes and ISO 3166 country codes",
														"enum": [
															"de_AT",
															"de_DE",
															"en_US",
															"fi_FI",
															"fr_BE",
															"it_IT",
															"nl_BE",
															"nl_NL",
															"pl_PL",
															"es_ES",
															"sv_SE",
															"zh_CN"
														],
														"example": "nl_NL",
														"default": "en_US"
													},
													"ip_address": {
														"description": "The customer’s IP address.\n\n**Required for:** Pay later, credit card, and Payment Component orders for our fraud check. If empty or incorrect (e.g. your IP address instead of the customer’s), the transaction status may be **Uncleared**, or even **Declined**.\n\n\n**Recommended** but not required for other payment methods.\n\nTo retrieve the customer's IP address if there is:\n- A proxy, use `forwarded_ip`.\n- No proxy, use `ip_address`.\n",
														"type": "string",
														"format": "IP address",
														"example": "123.123.123.123"
													},
													"forwarded_ip": {
														"description": "The [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For) header of the customer object when using a proxy.\n\nTo retrieve the customer's IP address if there is:\n- A proxy, use `forwarded_ip`.\n- No proxy, use `ip_address`.\n",
														"type": "string",
														"format": "IPv4"
													},
													"first_name": {
														"description": "The customer’s first name.\n\nWe recommend always requiring the customer to provide their full name, instead of initials or abbreviations.\n",
														"type": "string",
														"minLength": 2,
														"maxLength": 25,
														"example": "Simon"
													},
													"last_name": {
														"description": "The customer’s last name.",
														"type": "string",
														"minLength": 2,
														"maxLength": 25,
														"example": "Smit"
													},
													"gender": {
														"description": "The customer's gender.",
														"type": "string",
														"maxLength": 1,
														"enum": [
															"M",
															"F"
														],
														"example": "M"
													},
													"birthday": {
														"description": "The customer's date of birth.",
														"type": "string",
														"format": "yyyy-MM-dd",
														"example": "1980-12-31"
													},
													"address1": {
														"description": "The first line of the address.",
														"type": "string",
														"maxLength": 64,
														"example": "Kraanspoor"
													},
													"address2": {
														"description": "The second line of the address.",
														"type": "string",
														"maxLength": 64,
														"example": "39"
													},
													"house_number": {
														"description": "The house number of the address.",
														"type": "string",
														"maxLength": 10,
														"example": "39C"
													},
													"zip_code": {
														"description": "The ZIP code of the address.",
														"type": "string",
														"maxLength": 10,
														"example": "1033 SC"
													},
													"city": {
														"description": "The city of the address.",
														"type": "string",
														"maxLength": 50,
														"example": "Amsterdam"
													},
													"state": {
														"description": "The state of the address. \n\n**Required for:** PayPal Seller Protection\n",
														"type": "string",
														"maxLength": 6
													},
													"country": {
														"description": "The country of the address.\n\n**Required for:** Bank Transfer and PayPal Seller Protection\n",
														"type": "string",
														"format": "country alpha-2",
														"example": "NL"
													},
													"phone": {
														"description": "The customer’s phone number.",
														"type": "string",
														"maxLength": 24,
														"example": "0208500500"
													},
													"email": {
														"description": "The customer’s email address.\n\nUsed for [Second Chance](https://docs.multisafepay.com/features/second-chance/) emails and fraud checks.\n\n**Required for:** Bank Transfer\n",
														"type": "string",
														"example": "customer@emailprovider.com"
													},
													"user_agent": {
														"description": "The characteristic string that identifies the customer's browser.",
														"type": "string",
														"example": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
													},
													"referrer": {
														"description": "The unique identifier for where the customer/browser originates from.",
														"type": "string"
													},
													"reference": {
														"description": "Your unique client-defined identifier for your customer.\n\n**Required for:** [Recurring payments](https://docs.multisafepay.com/api/#recurring-payments-orders) orders, both initial and subsequent payments.\n",
														"type": "string",
														"example": "customer-0001"
													}
												}
											},
											"gateway_info": {
												"description": "Information specific to the payment method (gateway). \n\n**Required for:**\n\n- Credit and debit card orders\n- Apple Pay, Google Pay, and SEPA Direct Debit direct orders\n- Bancontact QR and iDEAL QR orders\n- AfterPay, E-Invoicing, in3, Klarna, and Pay After Delivery orders for credit checks in the Netherlands and Belgium\n- [Flexible 3D orders](https://docs.multisafepay.com/features/3d-secure/flexible/)\n- [MOTO orders](https://docs.multisafepay.com/features/moto/) \n",
												"type": "object",
												"properties": {
													"card_number": {
														"description": "The credit or debit card number.",
														"type": "string",
														"example": "4111111111111111"
													},
													"card_holder_name": {
														"description": "The cardholder's name.",
														"type": "string",
														"example": "John Doe"
													},
													"card_expiry_date": {
														"description": "The card expiry date.",
														"type": "integer",
														"format": "MMYY",
														"example": 1225
													},
													"card_cvc": {
														"description": "The card verification code (CVC) – a 3 or 4 digit number used as an additional security feature for card-not-present transactions.  \n\n**Required for:** All credit and debit card payments, **except** for Maestro and [Recurring payments](https://docs.multisafepay.com/features/recurring-payments/)\n",
														"type": "string",
														"example": "123"
													},
													"flexible_3d": {
														"description": "For Flexible 3D orders (**required**), whether or not 3D Secure authentication is required.",
														"type": "boolean",
														"example": true
													},
													"moto": {
														"description": "For MOTO orders (**required**), whether to create a MOTO order.",
														"type": "boolean",
														"example": false
													},
													"term_url": {
														"description": "For Flexible 3D orders (**required**), the URL that tells the card issuer where to redirect the authentication query.",
														"type": "string",
														"format": "URL",
														"example": "https://example.com/?type=term&api_key=<api_key>"
													},
													"issuer_id": {
														"description": "The unique identifier of the gateway issuer.\n\n**Required for:** `direct` orders\n",
														"type": "string",
														"example": "0021"
													},
													"payment_token": {
														"description": "**Required for:** Apple Pay `direct` orders, the JSON-encoded `payment.token` with the customer’s encrypted payment details, generated by the Apple Pay JS API.\n\n\nSee:\n\n- Apple Pay direct integration – [Create an order](https://docs.multisafepay.com/payments/methods/wallet/applepay/direct-integration/#client-side-integration-1) \n- Apple Developer – [ApplePayPaymentToken](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymenttoken)\n\n**Required for:** Google Pay `direct` orders, the payment token returned from the client-side Google Pay API request.\n\n\nAccess the token at `PaymentData.PaymentMethodData.PaymentMethodTokenizationData.token`.\n\n\nSee [Google Pay direct integration](https://docs.multisafepay.com/payments/methods/wallet/googlepay/direct-integration/).\n",
														"type": "string"
													},
													"qr_enabled": {
														"description": "Whether to generate a [Bancontact QR](https://docs.multisafepay.com/payment-methods/bancontact/) code.",
														"type": "boolean",
														"example": false
													},
													"qr_size": {
														"description": "For iDEAL QR orders, sets the width and height of the QR image in pixels. \n\n\nSizes are between 100 and 2000 pixels. If the value does not meet this rule, the default is used.\n\n\nDefault: 250 (250 by 250 pixels).\n",
														"type": "integer"
													},
													"allow_multiple": {
														"description": "For iDEAL QR orders, sets whether the QR code can be used more than once.",
														"type": "boolean",
														"example": false
													},
													"allow_change_amount": {
														"description": "For iDEAL QR orders, sets whether the customer can change the amount to pay. \n\nYou must then also set `min_amount` and `max_amount`.\n",
														"type": "boolean"
													},
													"min_amount": {
														"description": "For iDEAL QR orders, sets a minimum amount that the customer must pay.\n\n\nThe `min_amount` must be lower than the `amount`.\n\n\nIf `min_amount` is not set, but `max_amount` is set, then the `amount` value is used as the `min_amount`.\n\n\n**Required if:** `allow_change_amount` is set to true.\n",
														"type": "string"
													},
													"max_amount": {
														"description": "For iDEAL QR orders, sets a maximum amount that the customer can pay.\n\n\nThe `max_amount` must be higher than the `amount`.\n\n\nIf `max_amount` is not set, but `min_amount` is set, then the `amount` value is used as the `max_amount`.\n\n\n**Required if:** `allow_change_amount` is set to true.\n",
														"type": "string"
													},
													"account_id": {
														"description": "For SEPA Direct Debit `direct` orders (**required**), the international bank account number (IBAN).",
														"type": "string"
													},
													"account_holder_name": {
														"description": "For SEPA Direct Debit `direct` orders (**required**), the name of the account holder.",
														"type": "string"
													},
													"account_holder_iban": {
														"description": "For SEPA Direct Debit `direct` orders (**required**), the international bank account number (IBAN).",
														"type": "string"
													},
													"emandate": {
														"description": "For SEPA Direct Debit `direct` orders (**required**), the unique emandate identifier (for your own administration).",
														"type": "string"
													},
													"birthday": {
														"description": "For pay later orders (**required**), the customer’s date of birth.",
														"type": "string",
														"format": "yyyy-mm-dd"
													},
													"bank_account": {
														"description": "For pay later orders (**required**), the customer’s international bank account number (IBAN).",
														"type": "string"
													},
													"phone": {
														"description": "For pay later orders (**required**), the customer's phone number.",
														"type": "string"
													},
													"email": {
														"description": "For pay later orders (**required**), the customer's email address to send payment instructions to.",
														"type": "string"
													}
												}
											},
											"delivery": {
												"description": "The customer's shipping address.",
												"type": "object",
												"properties": {
													"first_name": {
														"description": "The customer’s first name.\n\nWe recommend always requiring the customer to provide their full name, instead of initials or abbreviations.\n",
														"type": "string",
														"minLength": 2,
														"maxLength": 25,
														"example": "Simon"
													},
													"last_name": {
														"description": "The customer’s last name.",
														"type": "string",
														"minLength": 2,
														"maxLength": 25,
														"example": "Smit"
													},
													"address1": {
														"description": "The first line of the address.",
														"type": "string",
														"maxLength": 64,
														"example": "Kraanspoor"
													},
													"house_number": {
														"description": "The apartment number of the address.",
														"type": "string",
														"maxLength": 9,
														"example": "B"
													},
													"zip_code": {
														"description": "The ZIP code of the address.",
														"type": "string",
														"maxLength": 10,
														"example": "1033 SC"
													},
													"city": {
														"description": "The city of the address.",
														"type": "string",
														"maxLength": 50,
														"example": "Amsterdam"
													},
													"country": {
														"description": "The country of the address.",
														"type": "string",
														"format": "country alpha-2",
														"example": "NL"
													}
												}
											},
											"checkout_options": {
												"description": "Settings for the shopping cart, including taxes and validation.",
												"type": "object",
												"properties": {
													"validate_cart": {
														"description": "If set to `true`, the value of `amount` is compared to the calculated total value of the shopping cart (returned as `order_total`).\n\nIf the values:\n\n- Match, the request is successful.\n- Don’t match, the request is unsuccessful and error_code 1027 is returned.\n",
														"type": "boolean",
														"default": false
													},
													"tax_tables": {
														"description": "Sets default VAT settings and creates VAT classes in the alternate array, which you can apply to individual shopping cart items.",
														"type": "object",
														"properties": {
															"default": {
																"description": "The default VAT setting. Used when no value is set for `shopping_cart.items.tax_table_selector`.",
																"type": "object",
																"properties": {
																	"shipping_taxed": {
																		"description": "Sets whether or not the shipping costs are taxed.",
																		"type": "boolean"
																	},
																	"rate": {
																		"description": "The tax rate percentage as a fraction, e.g. 15% is expressed as `0.15`.",
																		"type": "number",
																		"format": "float",
																		"minimum": 0,
																		"example": 0.15
																	}
																}
															},
															"alternate": {
																"description": "An array of client-defined VAT classes that you can apply to items in the shopping cart.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"name": {
																			"description": "The client-defined ID. Applies tax settings to items in the shopping cart through the `shopping_cart.items.tax_table_selector` attribute.",
																			"type": "string"
																		},
																		"standalone": {
																			"description": "Sets whether or not the shipping costs are taxed.",
																			"type": "boolean"
																		},
																		"rules": {
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"rate": {
																						"description": "The tax rate percentage expressed as a fraction.",
																						"type": "number",
																						"format": "float",
																						"example": 0.0825,
																						"minimum": 0
																					},
																					"country": {
																						"description": "The country where the tax rate applies.",
																						"type": "string",
																						"format": "country alpha-2",
																						"example": "US"
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											},
											"shopping_cart": {
												"description": "The array of items in the customer's shopping cart, including the tax class as defined in `checkout_options`.\n\nIf you have a self-made integration, include the complete specification of the `shopping_cart`.\n",
												"type": "object",
												"properties": {
													"items": {
														"description": "The items in the customer's shopping cart. Specify the relevant tax ruling per item.",
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"name": {
																	"description": "The name of the product or service.",
																	"type": "string",
																	"example": "Backpack"
																},
																"description": {
																	"description": "A description of the product or service.",
																	"type": "string",
																	"example": "Black cotton backpack with logo."
																},
																"unit_price": {
																	"description": "The unit price (in decimals) of the item, excluding VAT.\n\nThe currency of the shopping cart is set at order level using `currency`. \n\n**Example:** The value for a €90 backpack is `90`.\n",
																	"type": "number",
																	"format": "float",
																	"example": 90
																},
																"quantity": {
																	"description": "The number of units of the item.",
																	"type": "integer",
																	"example": 1
																},
																"merchant_item_id": {
																	"description": "Your unique (client-defined) identifier for the product or service.\n\nIf this item specifies the shipping costs, set to `msp-shipping`.\n",
																	"type": "string",
																	"example": "12345678"
																},
																"tax_table_selector": {
																	"description": "Your client-defined identifier for a tax table, specified as `checkout_options.tax_tables.alternate.name`.",
																	"type": "string",
																	"example": "VAT-21"
																},
																"weight": {
																	"description": "The weight per product.",
																	"type": "object",
																	"properties": {
																		"unit": {
																			"description": "The unit of weight.",
																			"type": "string",
																			"enum": [
																				"KG"
																			],
																			"example": "KG"
																		},
																		"value": {
																			"description": "The weight of the item corresponding to the unit.\n\nFor a 2 kilogram product:\n- Set `value` to `2`.\n- Set `unit` to `KG`.\n",
																			"type": "number",
																			"example": 2
																		}
																	}
																}
															}
														}
													}
												}
											},
											"items": {
												"description": "An HTML string to display the order items on the MultiSafepay payment page, instead of including a `shopping_cart`.",
												"type": "string",
												"example": "<ol><li>Article 1: € 1,95</li><li>Article 2: € 2,95</li><li>Article 3: € 3,95</li></ol>"
											},
											"payment_data": {
												"description": "Data for [Payment Component](https://docs.multisafepay.com/payment-components/) orders.",
												"type": "object",
												"properties": {
													"payload": {
														"description": "The response to the `getPaymentData()` Payment Component method.\n\nSee Payment Component integration manual – Step 3: Create an order:\n\n- [Single payment method](https://docs.multisafepay.com/payment-components/single/step-3/)\n- [Multiple payment methods](https://docs.multisafepay.com/payment-components/multiple/step-3/)\n",
														"type": "string"
													},
													"gateway": {
														"description": "The unique gateway identifier for the payment method.",
														"type": "string",
														"enum": [
															"AMEX",
															"BANKTRANS",
															"DIREB",
															"DIRECTBANK",
															"IDEAL",
															"MAESTRO",
															"MASTERCARD",
															"MISTERCASH",
															"PAYPAL",
															"VISA"
														]
													}
												}
											},
											"recurring_model": {
												"description": "For initial and subsequent [Recurring payments](https://docs.multisafepay.com/features/recurring-payments/) (**required**), sets the recurring model:\n\n- Card on file (COF): The cardholder has authorized you to store their card details.\n- Subscription: An agreement or services that are billed at the end of your billing cycle, e.g. weekly, monthly.\n- Unscheduled: Event-triggered, e.g. mobile top-up when no credit left on the phone.\n",
												"type": "string",
												"enum": [
													"cardonfile",
													"subscription",
													"unscheduled"
												],
												"example": "cardonfile"
											},
											"recurring_id": {
												"description": "For subsequent [Recurring payments](https://docs.multisafepay.com/features/recurring-payments/) (**required**), the unique identifier of the recurring payment.",
												"type": "string",
												"example": "133761993_gTp2"
											},
											"affiliate": {
												"description": "For [Split Payments](https://docs.multisafepay.com/features/split-payments/) (**required**).",
												"type": "object",
												"properties": {
													"split_payments": {
														"description": "Split the amount of a transaction between partner/primary and affiliated accounts by a percentage, a fixed amount, or both.\n\nFor every split payment rule, add an object to the array.\n",
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"merchant": {
																	"description": "The account ID of the affiliated account.",
																	"type": "string",
																	"example": 1001001
																},
																"fixed": {
																	"description": "The amount to split in cents.",
																	"type": "integer",
																	"minimum": 1
																},
																"percentage": {
																	"description": "A percentage of the amount to split.",
																	"type": "number",
																	"format": "float",
																	"minimum": 1
																},
																"description": {
																	"description": "A description of the split payment.",
																	"type": "string"
																}
															}
														}
													}
												}
											},
											"second_chance": {
												"description": "For [Second Chance](https://docs.multisafepay.com/features/second-chance/).",
												"type": "object",
												"properties": {
													"send_mail": {
														"description": "Whether to send reminder emails if the customer doesn't complete payment.\n\n\n **Suppressing Second Chance emails after cancellation**\n\n\n When a customer places an order, goes to your checkout, doesn’t complete payment, but later returns and tries to pay again, some webshops create a second order. \n \n \n If Second Chance emails are enabled, the customer still receives emails for the first order, even after they complete payment for the second order.\n\n Cancelling the first order does **not** suppress Second Chance emails. To suppress emails, make an Update order details: CancelOrder request.\n",
														"type": "boolean"
													}
												}
											},
											"custom_info": {
												"description": "Additional information about the order.",
												"type": "object",
												"properties": {
													"custom_1": {
														"description": "Information about the order.",
														"type": "string"
													},
													"custom_2": {
														"description": "Information about the order.",
														"type": "string"
													},
													"custom_3": {
														"description": "Information about the order.",
														"type": "string"
													}
												}
											},
											"days_active": {
												"description": "For `redirect` and `paymentlink` orders, sets the number of days the link to the MultiSafepay payment page is valid.\n\nThe link lifetime begins when the order is created, or the link is generated. A `session_id` is returned in the payment page URL.\n\nIf [Second Chance](https://docs.multisafepay.com/features/second-chance/) is enabled, we recommend a minimum lifetime of **48 hours**. Second Chance emails the customer 2 payment reminders: 1 hour and 24 hours after the order is created. If the lifetime is less than 24 hours, the link in the second email is no longer active when the customer receives it. \n\nSee `seconds_active` below. If `seconds_active` is also set, `seconds_active` is used. If neither is set, the default is used.\n",
												"type": "integer",
												"minimum": 1,
												"default": 30,
												"example": 30
											},
											"seconds_active": {
												"description": "For `redirect` and `paymentlink` orders, sets the number of seconds the link to the MultiSafepay payment page is valid.\n\nSee `days_active` above. If `days_active` is also set, `seconds_active` is used. If neither is set, the default is used.\n",
												"type": "integer",
												"minimum": 1,
												"default": 2592000
											},
											"var1": {
												"type": "string",
												"description": "Variable for storing additional data.",
												"maxLength": 500
											},
											"var2": {
												"type": "string",
												"description": "Variable for storing additional data.",
												"maxLength": 500
											},
											"var3": {
												"type": "string",
												"description": "Variable for storing additional data, including [Split Payments](https://docs.multisafepay.com/features/split-payments/) metadata.",
												"maxLength": 500
											},
											"plugin": {
												"description": "Information about your integration (useful for debugging).",
												"properties": {
													"shop": {
														"description": "The name of your ecommerce application.",
														"type": "string",
														"example": "My self-made integration"
													},
													"shop_version": {
														"description": "The version of your ecommerce application.",
														"type": "string"
													},
													"plugin_version": {
														"description": "The version of your integration.",
														"type": "string",
														"example": "1.0.0"
													},
													"partner": {
														"description": "The name of the third party that developed the ecommerce application (if relevant).",
														"type": "string"
													},
													"shop_root_url": {
														"description": "The root/base URL of the ecommerce application.",
														"type": "string",
														"example": "https://www.my-ecommerce.com"
													}
												}
											}
										},
										"type": "object",
										"required": [
											"amount",
											"currency",
											"description",
											"gateway",
											"order_id",
											"payment_data",
											"type"
										]
									},
									{
										"title": "Prepaid card order",
										"description": "Prepaid card order",
										"properties": {
											"type": {
												"description": "- `redirect`: Redirects the customer to a [MultiSafepay payment page](https://docs.multisafepay.com/payment-pages/), where they can select a payment method and complete payment. \n- `direct`: Redirects the customer to an authentication or success page, depending on the payment method. \n\nFor more information, see [Direct vs redirect API requests](https://docs.multisafepay.com/developer/direct-vs-redirect).\n",
												"type": "string",
												"enum": [
													"direct",
													"redirect"
												],
												"example": "redirect"
											},
											"gateway": {
												"allOf": [
													{
														"description": "The unique identifier for the payment method (gateway).\n\nIf unset for `redirect` orders, the payment page displays **all** available payment methods.\n\n| Prepaid card | Gateway identifier |\n|--------------|--------------------|\n|[Baby Cadeaubon](https://www.babycadeaubon.nl/)|`BABYCAD`|\n|[Beauty Cadeau](https://www.beautycadeau.nl/)| `BEAUTYCAD`|\n|[Wellness & Beauty](https://www.wellnessbeautycadeau.nl/page/hoe-het-werkt/)| `BEAUTYWELL`|\n|[Biercheque](https://biercheque.nl/)| `BIERCHEQUE`|\n| [Bloemen Cadeaukaart](https://www.bloemen-cadeaukaart.nl/)| `BLOEMENCAD`|\n| [Boekenbon](https://bestel.boekenbon.nl/)| `BOEKENBON`|\n| [Boeken Voordeel](https://www.boekenVoordeel.nl/)| `BOEKENVOOR`|\n| [Fashioncheque](https://www.fashioncheque.com/)| `FASHIONCHQ`|\n| [Fashion Giftcard](https://www.fashion-giftcard.nl/)| `FASHIONGFT`|\n| [Gezondheidsbon](https://www.gezondheidsbon.nl/)| `GEZONDHEID`|\n| [Good4fun](https://www.good4fun.nl/)| `GOOD4FUN`|\n| [Huis & Tuin Cadeau](https://www.huisentuincadeau.com/)| `HUISTUIN`|\n| [Kids' Cadeau](https://www.dekidscadeaukaart.nl/)| `KIDSCADEAU`|\n| [Klus Cadeau](https://www.kluscadeau.nl/)| `KLUSCADEAU`|\n| [Nationale Bioscoopbon](https://www.bioscoopbon.nl/)| `NATNLBIOSC`|\n| [Nationale Entertainment Card](https://www.nationale-entertainmentcard.nl/)| `NATENCRD`|\n| [Nationale Tuinbon](https://www.nationale-tuinbon.nl/)| `NATNLETUIN`|\n| [Ohmygood Giftcard](https://ohmygood.nl/)| `OHMYGOOD`|\n| [Speelgoedwinkel Cadeaukaart](https://www.speelgoedwinkel.nl/)| `SPEELGOED`|\n| [Sport & Fit](https://www.sportenfitcadeau.nl/)| `SPORTENFIT`|\n| [Sports Gift Card](https://www.sports-giftcard.com/)| `SPORTSGIFT`|\n| [VVV Cadeaukaart](https://www.vvvcadeaukaarten.nl/)| `VVVGIFTCRD`|\n| [Wijn Cadeaukaart](https://www.wijn-cadeaukaart.nl/)| `WIJNCADEAU`|\n| [YourGift](https://www.yourgift.nl/)| `YOURGIFT`|\n"
													},
													{
														"type": "string"
													},
													{
														"example": "BOEKENBON"
													},
													{
														"enum": [
															"BABYCAD",
															"BEAUTYCAD",
															"BEAUTYWELL",
															"BIERCHEQUE",
															"BLOEMENCAD",
															"BOEKENBON",
															"BOEKENVOOR",
															"EDENCOM",
															"EDENECO",
															"EDENRES",
															"EDENSPORTS",
															"FASHIONCHQ",
															"FASHIONGFT",
															"GEZONDHEID",
															"GOOD4FUN",
															"HUISTUIN",
															"KIDSCADEAU",
															"KLUSCADEAU",
															"NATNLBIOSC",
															"NATENCRD",
															"NATNLETUIN",
															"OHMYGOOD",
															"SPORTENFIT",
															"SPORTSGIFT",
															"VVVGIFTCARD",
															"WIJNCADEAU",
															"YOURGIFT"
														]
													}
												]
											},
											"order_id": {
												"description": "Your unique (client-defined) identifier for the order.",
												"type": "string",
												"maxLength": 50,
												"example": "test-order-0001"
											},
											"currency": {
												"description": "The currency of the payment.",
												"type": "string",
												"maxLength": 3,
												"minLength": 3,
												"format": "ISO-4217 currency code",
												"example": "EUR"
											},
											"amount": {
												"description": "The payment amount in the currency's smallest unit:\n\n- Decimal currencies: Value for 10 EUR = 1000 (1000 cents)\n- Zero-decimal currencies: Value for 10 YEN = 10\n",
												"type": "integer",
												"minimum": 0,
												"example": 1000
											},
											"description": {
												"description": "A description of the customer's order. Appears on MultiSafepay payment pages and customer bank statements (if supported by the bank)",
												"type": "string",
												"maxLength": 200,
												"example": "Test order description"
											},
											"payment_options": {
												"description": "Contains: \n\n- URLs to your success page and cancel page\n- Your [webhook endpoint](https://docs.multisafepay.com/developer/webhooks/)\n- Templates for styling [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/)\n- Settings for displaying available [gift cards](https://docs.multisafepay.com/payment-methods/gift-cards/)\n",
												"type": "object",
												"properties": {
													"notification_url": {
														"description": "The [webhook endpoint](https://docs.multisafepay.com/developer/webhooks/) for MultiSafepay to send status updates and other notifications for this website.",
														"type": "string",
														"format": "url",
														"maxLength": 150,
														"example": "https://www.examplewebsite.com/payment-updates/"
													},
													"notification_method": {
														"description": "Sets the webhook [notification method](https://docs.multisafepay.com/developer/webhooks/).\n\nWe recommend setting this to `POST` to reduce network load and increase security.\n",
														"type": "string",
														"enum": [
															"POST",
															"GET"
														],
														"default": "GET",
														"example": "POST"
													},
													"redirect_url": {
														"description": "The page customers are redirected to:\n\n- After **successful** payment, i.e. your success page, or thank you page\n- If the transaction status is [Uncleared](https://docs.multisafepay.com/about-payments/uncleared-transactions/) \n",
														"type": "string",
														"example": "https://www.example.com/test-order-0001/successful/"
													},
													"cancel_url": {
														"description": "The page customers are redirected to after **unsuccessful** payments.",
														"type": "string",
														"example": "https://www.example.com/test-order-0001/unsuccessful/"
													},
													"close_window": {
														"description": "Whether to display the MultiSafepay payment page in a new window that automatically closes after the customer completes payment.",
														"type": "boolean",
														"default": false,
														"example": false
													},
													"settings": {
														"description": "For [gift card](https://docs.multisafepay.com/payment-methods/gift-cards/) payments.",
														"type": "object",
														"properties": {
															"coupons": {
																"description": "Optional settings for gift cards.",
																"properties": {
																	"allow": {
																		"description": "Specifies which gift cards the customer can pay with.",
																		"type": "array",
																		"example": "EDENCO",
																		"items": {
																			"type": "string",
																			"enum": [
																				"BABYCAD",
																				"BEAUTYWELL",
																				"BLOEMENCAD",
																				"BOEKENBON",
																				"DEGROTESPL",
																				"EDENCOM",
																				"EDENCO",
																				"EDENRES",
																				"EDENSPORTS",
																				"FASHIONCHQ",
																				"FASHIONGFT",
																				"FIETSENBON",
																				"GOOD4FUN",
																				"GEZONDHEID",
																				"NATNLBIOSC",
																				"NATNLETUIN",
																				"PARFUMCADE",
																				"SPORTENFIT",
																				"VRGIFTCARD",
																				"VVVGIFTCRD",
																				"WEBSHOPGFT",
																				"WIJNCADEAU",
																				"YOURGIFT"
																			]
																		}
																	}
																}
															}
														}
													},
													"template_id": {
														"description": "Apply a template for styling [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/styling/).\n\nIf `payment_options.template` is also set, `payment_options.template` is used.\n",
														"type": "string"
													},
													"template": {
														"description": "Applies a template object structure for styling [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/styling/).\n\nOverrides the `payment_options.template_id`.\n",
														"properties": {
															"version": {
																"description": "The version of the template.",
																"type": "string"
															},
															"settings": {
																"description": "Sets whether to display or hide email elements, e.g. buttons, logos.",
																"type": "object",
																"properties": {
																	"hide_logo": {
																		"description": "Whether to hide the email header logo.",
																		"type": "boolean"
																	},
																	"iframe_mode": {
																		"description": "Whether to hide iframe elements.",
																		"type": "boolean"
																	},
																	"hide_flags": {
																		"description": "Whether to hide the flags container.",
																		"type": "boolean"
																	},
																	"hide_powered": {
																		"description": "Whether to hide the powered link.",
																		"type": "boolean"
																	},
																	"hide_cart": {
																		"description": "Whether to hide the shopping cart container.",
																		"type": "boolean"
																	},
																	"hide_btn_cancel": {
																		"description": "Whether to hide the **Cancel** button.",
																		"type": "boolean"
																	},
																	"hide_cc_logos": {
																		"description": "Whether to hide credit card logos.",
																		"type": "boolean"
																	},
																	"hide_btn_all_methods": {
																		"description": "Whether to hide the **All methods** button.",
																		"type": "boolean"
																	}
																}
															},
															"header": {
																"description": "Settings for the header logo, cover image, background, and font.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"logo": {
																			"description": "Your logo to display in the email header.",
																			"type": "object",
																			"properties": {
																				"image": {
																					"description": "The filename of the logo to display.",
																					"type": "string"
																				}
																			}
																		},
																		"cover": {
																			"description": "Resize the background image to cover the entire header container.",
																			"type": "object",
																			"properties": {
																				"image": {
																					"description": "The cover image.",
																					"type": "string"
																				}
																			}
																		},
																		"background": {
																			"description": "The header background.",
																			"type": "string"
																		},
																		"text": {
																			"description": "The header font color.",
																			"type": "string"
																		}
																	}
																}
															},
															"body": {
																"description": "Settings for the email body.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"text": {
																			"description": "The body font color.",
																			"type": "string"
																		},
																		"background": {
																			"description": "The body background color.",
																			"type": "string"
																		},
																		"link": {
																			"description": "Settings for links in the email body.",
																			"type": "object",
																			"properties": {
																				"text": {
																					"description": "The link text color in the email body.",
																					"type": "string"
																				},
																				"hover": {
																					"description": "Settings for hovering over links in the email body.",
																					"type": "object",
																					"properties": {
																						"text": {
																							"description": "The link text color on hover in the body.",
																							"type": "string"
																						},
																						"border": {
																							"description": "The link border color on hover in the body.",
																							"type": "string"
																						}
																					}
																				}
																			}
																		}
																	}
																}
															},
															"container": {
																"description": "Settings for the container element.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"text": {
																			"description": "The color of text in the container.",
																			"type": "string"
																		},
																		"background": {
																			"description": "The color of the container background.",
																			"type": "string"
																		},
																		"link": {
																			"description": "Settings for links in the container.",
																			"type": "object",
																			"properties": {
																				"text": {
																					"description": "The link text color in the container.",
																					"type": "string"
																				}
																			}
																		}
																	}
																}
															},
															"cart": {
																"description": "Settings for the cart element.",
																"type": "object",
																"properties": {
																	"text": {
																		"description": "The text color in the cart.",
																		"type": "string"
																	},
																	"label": {
																		"description": "The color of labels in the cart.",
																		"type": "string"
																	},
																	"background": {
																		"description": "The background color of the cart.",
																		"type": "string"
																	},
																	"border": {
																		"description": "The border color of the cart.",
																		"type": "string"
																	}
																}
															},
															"payment_form": {
																"description": "Settings for the payment form in the email.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"text": {
																			"description": "The text color in the payment form.",
																			"type": "string"
																		},
																		"background": {
																			"description": "The background color of the payment form.",
																			"type": "string"
																		},
																		"border": {
																			"description": "The border color of the payment form.",
																			"type": "string"
																		},
																		"inputs": {
																			"description": "Settings for the payment form button.",
																			"type": "object",
																			"properties": {
																				"border": {
																					"description": "The color of the payment form button border.",
																					"type": "string"
																				},
																				"label": {
																					"description": "The call to action in the payment form button.",
																					"type": "string"
																				}
																			}
																		}
																	}
																}
															},
															"buttons": {
																"description": "Settings for buttons in the email.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"payment_method": {
																			"description": "Settings for the payment method button.",
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"background": {
																						"description": "The payment method button background color.",
																						"type": "string"
																					},
																					"text": {
																						"description": "The payment method button text color.",
																						"type": "string"
																					},
																					"border": {
																						"description": "The payment method button border color.",
																						"type": "string"
																					},
																					"hover": {
																						"description": "Settings when hovering over the payment method button.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The payment method button background color on hover.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The payment method button text color on hover.",
																								"type": "string"
																							},
																							"border": {
																								"description": "The payment method button border color on hover.",
																								"type": "string"
																							}
																						}
																					},
																					"active": {
																						"description": "Settings for when the payment method button is active.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The payment method button background color when active.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The payment method button text color when active.",
																								"type": "string"
																							},
																							"border": {
																								"description": "The payment method button border color when active.",
																								"type": "string"
																							}
																						}
																					}
																				}
																			}
																		},
																		"secondary": {
																			"description": "Settings for the secondary button.",
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"background": {
																						"description": "The secondary button background color.",
																						"type": "string"
																					},
																					"text": {
																						"description": "The secondary button text color.",
																						"type": "string"
																					},
																					"hover": {
																						"description": "Settings for the secondary button on hover.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The secondary button background color on hover.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The secondary button text color on hover.",
																								"type": "string"
																							}
																						}
																					}
																				}
																			}
																		},
																		"primary": {
																			"description": "Settings for the primary button.",
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"background": {
																						"description": "The primary button background color.",
																						"type": "string"
																					},
																					"text": {
																						"description": "The primary button text color.",
																						"type": "string"
																					},
																					"hover": {
																						"description": "Settings for the primary button on hover.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The primary button background color on hover.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The primary button text color on hover.",
																								"type": "string"
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											},
											"customer": {
												"allOf": [
													{
														"type": "object",
														"description": "The customer’s personal information.\n\n**Required for**: All orders **except** Apple Pay and Google Pay, and Belfius, iDEAL, and WeChat Pay `direct` orders.\n",
														"properties": {
															"locale": {
																"type": "string",
																"description": "- Localizes [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/) for the customer’s language, region, available payment methods, and any UI preferences.\n- Sends [email templates](https://docs.multisafepay.com/features/email-templates/) in the customer's preferred language. If set, `locale` overrides the language set in an email template.\n- Displays local variants of payment methods, e.g. to display:\n  - [Cartes Bancaires](https://docs.multisafepay.com/payment-methods/cartes-bancaires), set to `fr_FR`.\n  - [Dankort](https://docs.multisafepay.com/payment-methods/dankort), set to `da_DK`.\n  - [Postepay](https://docs.multisafepay.com/payment-methods/postepay), set to `it_IT`.\n\n**Required for:** Bancontact\n\n|Locale|Language & country|\n|--------|--------|\n|`de_AT`|German Austria|\n|`de_DE`|German Germany|\n|`en_US`|American English|\n|`fi_FI`|Finnish|\n|`fr_BE`|French Belgium|\n|`it_IT`|Italian|\n|`nl_BE`|Dutch Belgium|\n|`nl_NL`|Dutch Netherlands|\n|`pl_PL`|Polish|\n|`es_ES`|Spanish|\n|`sv_SE`|Swedish|\n|`zh_CN`|Chinese|\n",
																"format": "ab_CD with ISO 639 language codes and ISO 3166 country codes",
																"enum": [
																	"de_AT",
																	"de_DE",
																	"en_US",
																	"fi_FI",
																	"fr_BE",
																	"it_IT",
																	"nl_BE",
																	"nl_NL",
																	"pl_PL",
																	"es_ES",
																	"sv_SE",
																	"zh_CN"
																],
																"example": "nl_NL",
																"default": "en_US"
															},
															"ip_address": {
																"description": "The customer’s IP address.\n\n**Required for:** Pay later, credit card, and Payment Component orders for our fraud check. If empty or incorrect (e.g. your IP address instead of the customer’s), the transaction status may be **Uncleared**, or even **Declined**.\n\n\n**Recommended** but not required for other payment methods.\n\nTo retrieve the customer's IP address if there is:\n- A proxy, use `forwarded_ip`.\n- No proxy, use `ip_address`.\n",
																"type": "string",
																"format": "IP address",
																"example": "123.123.123.123"
															},
															"forwarded_ip": {
																"description": "The [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For) header of the customer object when using a proxy.\n\nTo retrieve the customer's IP address if there is:\n- A proxy, use `forwarded_ip`.\n- No proxy, use `ip_address`.\n",
																"type": "string",
																"format": "IPv4"
															},
															"first_name": {
																"description": "The customer’s first name.\n\nWe recommend always requiring the customer to provide their full name, instead of initials or abbreviations.\n",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Simon"
															},
															"last_name": {
																"description": "The customer’s last name.",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Smit"
															},
															"gender": {
																"description": "The customer's gender.",
																"type": "string",
																"maxLength": 1,
																"enum": [
																	"M",
																	"F"
																],
																"example": "M"
															},
															"birthday": {
																"description": "The customer's date of birth.",
																"type": "string",
																"format": "yyyy-MM-dd",
																"example": "1980-12-31"
															},
															"address1": {
																"description": "The first line of the address.",
																"type": "string",
																"maxLength": 64,
																"example": "Kraanspoor"
															},
															"address2": {
																"description": "The second line of the address.",
																"type": "string",
																"maxLength": 64,
																"example": "39"
															},
															"house_number": {
																"description": "The house number of the address.",
																"type": "string",
																"maxLength": 10,
																"example": "39C"
															},
															"zip_code": {
																"description": "The ZIP code of the address.",
																"type": "string",
																"maxLength": 10,
																"example": "1033 SC"
															},
															"city": {
																"description": "The city of the address.",
																"type": "string",
																"maxLength": 50,
																"example": "Amsterdam"
															},
															"state": {
																"description": "The state of the address. \n\n**Required for:** PayPal Seller Protection\n",
																"type": "string",
																"maxLength": 6
															},
															"country": {
																"description": "The country of the address.\n\n**Required for:** Bank Transfer and PayPal Seller Protection\n",
																"type": "string",
																"format": "country alpha-2",
																"example": "NL"
															},
															"phone": {
																"description": "The customer’s phone number.",
																"type": "string",
																"maxLength": 24,
																"example": "0208500500"
															},
															"email": {
																"description": "The customer’s email address.\n\nUsed for [Second Chance](https://docs.multisafepay.com/features/second-chance/) emails and fraud checks.\n\n**Required for:** Bank Transfer\n",
																"type": "string",
																"example": "customer@emailprovider.com"
															},
															"user_agent": {
																"description": "The characteristic string that identifies the customer's browser.",
																"type": "string",
																"example": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
															},
															"referrer": {
																"description": "The unique identifier for where the customer/browser originates from.",
																"type": "string"
															},
															"reference": {
																"description": "Your unique client-defined identifier for your customer.\n\n**Required for:** [Recurring payments](https://docs.multisafepay.com/api/#recurring-payments-orders) orders, both initial and subsequent payments.\n",
																"type": "string",
																"example": "customer-0001"
															}
														}
													}
												]
											},
											"delivery": {
												"allOf": [
													{
														"description": "The customer's shipping address.",
														"type": "object",
														"properties": {
															"first_name": {
																"description": "The customer’s first name.\n\nWe recommend always requiring the customer to provide their full name, instead of initials or abbreviations.\n",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Simon"
															},
															"last_name": {
																"description": "The customer’s last name.",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Smit"
															},
															"address1": {
																"description": "The first line of the address.",
																"type": "string",
																"maxLength": 64,
																"example": "Kraanspoor"
															},
															"house_number": {
																"description": "The apartment number of the address.",
																"type": "string",
																"maxLength": 9,
																"example": "B"
															},
															"zip_code": {
																"description": "The ZIP code of the address.",
																"type": "string",
																"maxLength": 10,
																"example": "1033 SC"
															},
															"city": {
																"description": "The city of the address.",
																"type": "string",
																"maxLength": 50,
																"example": "Amsterdam"
															},
															"country": {
																"description": "The country of the address.",
																"type": "string",
																"format": "country alpha-2",
																"example": "NL"
															}
														}
													},
													{
														"required": [
															"address1",
															"city",
															"country",
															"first_name",
															"house_number",
															"last_name",
															"zip_code"
														]
													}
												]
											},
											"checkout_options": {
												"allOf": [
													{
														"description": "Settings for the shopping cart, including taxes and validation.",
														"type": "object",
														"properties": {
															"validate_cart": {
																"description": "If set to `true`, the value of `amount` is compared to the calculated total value of the shopping cart (returned as `order_total`).\n\nIf the values:\n\n- Match, the request is successful.\n- Don’t match, the request is unsuccessful and error_code 1027 is returned.\n",
																"type": "boolean",
																"default": false
															},
															"tax_tables": {
																"description": "Sets default VAT settings and creates VAT classes in the alternate array, which you can apply to individual shopping cart items.",
																"type": "object",
																"properties": {
																	"default": {
																		"description": "The default VAT setting. Used when no value is set for `shopping_cart.items.tax_table_selector`.",
																		"type": "object",
																		"properties": {
																			"shipping_taxed": {
																				"description": "Sets whether or not the shipping costs are taxed.",
																				"type": "boolean"
																			},
																			"rate": {
																				"description": "The tax rate percentage as a fraction, e.g. 15% is expressed as `0.15`.",
																				"type": "number",
																				"format": "float",
																				"minimum": 0,
																				"example": 0.15
																			}
																		}
																	},
																	"alternate": {
																		"description": "An array of client-defined VAT classes that you can apply to items in the shopping cart.",
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"name": {
																					"description": "The client-defined ID. Applies tax settings to items in the shopping cart through the `shopping_cart.items.tax_table_selector` attribute.",
																					"type": "string"
																				},
																				"standalone": {
																					"description": "Sets whether or not the shipping costs are taxed.",
																					"type": "boolean"
																				},
																				"rules": {
																					"type": "array",
																					"items": {
																						"type": "object",
																						"properties": {
																							"rate": {
																								"description": "The tax rate percentage expressed as a fraction.",
																								"type": "number",
																								"format": "float",
																								"example": 0.0825,
																								"minimum": 0
																							},
																							"country": {
																								"description": "The country where the tax rate applies.",
																								"type": "string",
																								"format": "country alpha-2",
																								"example": "US"
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												]
											},
											"shopping_cart": {
												"description": "The array of items in the customer's shopping cart, including the tax class as defined in `checkout_options`.\n\nIf you have a self-made integration, include the complete specification of the `shopping_cart`.\n",
												"type": "object",
												"properties": {
													"items": {
														"description": "The items in the customer's shopping cart. Specify the relevant tax ruling per item.",
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"name": {
																	"description": "The name of the product or service.",
																	"type": "string",
																	"example": "Backpack"
																},
																"description": {
																	"description": "A description of the product or service.",
																	"type": "string",
																	"example": "Black cotton backpack with logo."
																},
																"unit_price": {
																	"description": "The unit price (in decimals) of the item, excluding VAT.\n\nThe currency of the shopping cart is set at order level using `currency`. \n\n**Example:** The value for a €90 backpack is `90`.\n",
																	"type": "number",
																	"format": "float",
																	"example": 90
																},
																"quantity": {
																	"description": "The number of units of the item.",
																	"type": "integer",
																	"example": 1
																},
																"merchant_item_id": {
																	"description": "Your unique (client-defined) identifier for the product or service.\n\nIf this item specifies the shipping costs, set to `msp-shipping`.\n",
																	"type": "string",
																	"example": "12345678"
																},
																"tax_table_selector": {
																	"description": "Your client-defined identifier for a tax table, specified as `checkout_options.tax_tables.alternate.name`.",
																	"type": "string",
																	"example": "VAT-21"
																},
																"weight": {
																	"description": "The weight per product.",
																	"type": "object",
																	"properties": {
																		"unit": {
																			"description": "The unit of weight.",
																			"type": "string",
																			"enum": [
																				"KG"
																			],
																			"example": "KG"
																		},
																		"value": {
																			"description": "The weight of the item corresponding to the unit.\n\nFor a 2 kilogram product:\n- Set `value` to `2`.\n- Set `unit` to `KG`.\n",
																			"type": "number",
																			"example": 2
																		}
																	}
																}
															}
														}
													}
												}
											},
											"items": {
												"description": "An HTML string to display the order items on the MultiSafepay payment page, instead of including a `shopping_cart`.",
												"type": "string",
												"example": "<ol><li>Article 1: € 1,95</li><li>Article 2: € 2,95</li><li>Article 3: € 3,95</li></ol>"
											},
											"affiliate": {
												"description": "For [Split Payments](https://docs.multisafepay.com/features/split-payments/) (**required**).",
												"type": "object",
												"properties": {
													"split_payments": {
														"description": "Split the amount of a transaction between partner/primary and affiliated accounts by a percentage, a fixed amount, or both.\n\nFor every split payment rule, add an object to the array.\n",
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"merchant": {
																	"description": "The account ID of the affiliated account.",
																	"type": "string",
																	"example": 1001001
																},
																"fixed": {
																	"description": "The amount to split in cents.",
																	"type": "integer",
																	"minimum": 1
																},
																"percentage": {
																	"description": "A percentage of the amount to split.",
																	"type": "number",
																	"format": "float",
																	"minimum": 1
																},
																"description": {
																	"description": "A description of the split payment.",
																	"type": "string"
																}
															}
														}
													}
												}
											},
											"second_chance": {
												"description": "For [Second Chance](https://docs.multisafepay.com/features/second-chance/).",
												"type": "object",
												"properties": {
													"send_mail": {
														"description": "Whether to send reminder emails if the customer doesn't complete payment.\n\n\n **Suppressing Second Chance emails after cancellation**\n\n\n When a customer places an order, goes to your checkout, doesn’t complete payment, but later returns and tries to pay again, some webshops create a second order. \n \n \n If Second Chance emails are enabled, the customer still receives emails for the first order, even after they complete payment for the second order.\n\n Cancelling the first order does **not** suppress Second Chance emails. To suppress emails, make an Update order details: CancelOrder request.\n",
														"type": "boolean"
													}
												}
											},
											"custom_info": {
												"description": "Additional information about the order.",
												"type": "object",
												"properties": {
													"custom_1": {
														"description": "Information about the order.",
														"type": "string"
													},
													"custom_2": {
														"description": "Information about the order.",
														"type": "string"
													},
													"custom_3": {
														"description": "Information about the order.",
														"type": "string"
													}
												}
											},
											"days_active": {
												"description": "For `redirect` and `paymentlink` orders, sets the number of days the link to the MultiSafepay payment page is valid.\n\nThe link lifetime begins when the order is created, or the link is generated. A `session_id` is returned in the payment page URL.\n\nIf [Second Chance](https://docs.multisafepay.com/features/second-chance/) is enabled, we recommend a minimum lifetime of **48 hours**. Second Chance emails the customer 2 payment reminders: 1 hour and 24 hours after the order is created. If the lifetime is less than 24 hours, the link in the second email is no longer active when the customer receives it. \n\nSee `seconds_active` below. If `seconds_active` is also set, `seconds_active` is used. If neither is set, the default is used.\n",
												"type": "integer",
												"minimum": 1,
												"default": 30,
												"example": 30
											},
											"seconds_active": {
												"description": "For `redirect` and `paymentlink` orders, sets the number of seconds the link to the MultiSafepay payment page is valid.\n\nSee `days_active` above. If `days_active` is also set, `seconds_active` is used. If neither is set, the default is used.\n",
												"type": "integer",
												"minimum": 1,
												"default": 2592000
											},
											"var1": {
												"type": "string",
												"description": "Variable for storing additional data.",
												"maxLength": 500
											},
											"var2": {
												"type": "string",
												"description": "Variable for storing additional data.",
												"maxLength": 500
											},
											"var3": {
												"type": "string",
												"description": "Variable for storing additional data, including [Split Payments](https://docs.multisafepay.com/features/split-payments/) metadata.",
												"maxLength": 500
											},
											"plugin": {
												"description": "Information about your integration (useful for debugging).",
												"properties": {
													"shop": {
														"description": "The name of your ecommerce application.",
														"type": "string",
														"example": "My self-made integration"
													},
													"shop_version": {
														"description": "The version of your ecommerce application.",
														"type": "string"
													},
													"plugin_version": {
														"description": "The version of your integration.",
														"type": "string",
														"example": "1.0.0"
													},
													"partner": {
														"description": "The name of the third party that developed the ecommerce application (if relevant).",
														"type": "string"
													},
													"shop_root_url": {
														"description": "The root/base URL of the ecommerce application.",
														"type": "string",
														"example": "https://www.my-ecommerce.com"
													}
												}
											}
										},
										"type": "object"
									},
									{
										"title": "FastCheckout order",
										"description": "FastCheckout order",
										"properties": {
											"type": {
												"description": "Creates a FastCheckout order.",
												"type": "string",
												"enum": [
													"checkout"
												],
												"example": "checkout"
											},
											"gateway": {
												"allOf": [
													{
														"description": "The unique identifier for the payment method (gateway).<br><br>If unset, the FastCheckout page displays **all** available payment methods."
													},
													{
														"type": "string"
													},
													{
														"example": "IDEAL"
													},
													{
														"enum": [
															"AFTERPAY",
															"ALIPAY",
															"AMEX",
															"APPLEPAY",
															"BANKTRANS",
															"BELFIUS",
															"CBC",
															"CREDITCARD",
															"DBRTP",
															"DIREB",
															"DIRECTBANK",
															"DOTPAY",
															"EINVOICE",
															"EPS",
															"GIROPAY",
															"GOOGLEPAY",
															"IDEAL",
															"IDEALQR",
															"IN3",
															"KBC",
															"KLARNA",
															"MAESTRO",
															"MASTERCARD",
															"MISTERCASH",
															"PAYAFTER",
															"PAYPAL",
															"SANTANDER",
															"TRUSTLY",
															"TRUSTPAY",
															"VISA",
															"WECHAT",
															"BABYCAD",
															"BEAUTYCAD",
															"BEAUTYWELL",
															"BIERCHEQUE",
															"BLOEMENCAD",
															"BOEKENBON",
															"BOEKENVOOR",
															"EDENCOM",
															"EDENECO",
															"EDENRES",
															"EDENSPORTS",
															"FASHIONCHQ",
															"FASHIONGFT",
															"GEZONDHEID",
															"GOOD4FUN",
															"HUISTUIN",
															"KIDSCADEAU",
															"KLUSCADEAU",
															"NATNLBIOSC",
															"NATENCRD",
															"NATNLETUIN",
															"OHMYGOOD",
															"SPORTENFIT",
															"SPORTSGIFT",
															"VVVGIFTCARD",
															"WIJNCADEAU",
															"YOURGIFT"
														]
													}
												]
											},
											"order_id": {
												"description": "Your unique (client-defined) identifier for the order.",
												"type": "string",
												"maxLength": 50,
												"example": "test-order-0001"
											},
											"currency": {
												"description": "The currency of the payment.",
												"type": "string",
												"maxLength": 3,
												"minLength": 3,
												"format": "ISO-4217 currency code",
												"example": "EUR"
											},
											"amount": {
												"description": "The payment amount in the currency's smallest unit:\n\n- Decimal currencies: Value for 10 EUR = 1000 (1000 cents)\n- Zero-decimal currencies: Value for 10 YEN = 10\n",
												"type": "integer",
												"minimum": 0,
												"example": 1000
											},
											"description": {
												"description": "A description of the customer's order. Appears on MultiSafepay payment pages and customer bank statements (if supported by the bank)",
												"type": "string",
												"maxLength": 200,
												"example": "Test order description"
											},
											"payment_options": {
												"description": "Contains: \n\n- URLs to your success page and cancel page\n- Your [webhook endpoint](https://docs.multisafepay.com/developer/api/notification-url/)\n- Templates for styling [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/)\n- Settings for displaying available [gift cards](https://docs.multisafepay.com/payment-methods/gift-cards/)\n",
												"type": "object",
												"properties": {
													"notification_url": {
														"description": "The [webhook endpoint](https://docs.multisafepay.com/developer/webhooks/) for MultiSafepay to send status updates and other notifications for this website.",
														"type": "string",
														"format": "url",
														"maxLength": 150,
														"example": "https://www.examplewebsite.com/payment-updates/"
													},
													"notification_method": {
														"description": "Sets the webhook [notification method](https://docs.multisafepay.com/developer/webhooks/).\n\nWe recommend setting this to `POST` to reduce network load and increase security.\n",
														"type": "string",
														"enum": [
															"POST",
															"GET"
														],
														"default": "GET",
														"example": "POST"
													},
													"redirect_url": {
														"description": "The page customers are redirected to:\n\n- After **successful** payment, i.e. your success page, or thank you page\n- If the transaction status is [Uncleared](https://docs.multisafepay.com/about-payments/uncleared-transactions/) \n",
														"type": "string",
														"example": "https://www.example.com/test-order-0001/successful/"
													},
													"cancel_url": {
														"description": "The page customers are redirected to after **unsuccessful** payments.",
														"type": "string",
														"example": "https://www.example.com/test-order-0001/unsuccessful/"
													},
													"close_window": {
														"description": "Whether to display the MultiSafepay payment page in a new window that automatically closes after the customer completes payment.",
														"type": "boolean",
														"default": false,
														"example": false
													},
													"settings": {
														"description": "Settings for FastCheckout",
														"type": "object",
														"properties": {
															"fco": {
																"description": "Settings for FastCheckout.",
																"type": "object",
																"properties": {
																	"version": {
																		"description": "The FastCheckout version to use.",
																		"type": "string",
																		"example": "1.0"
																	},
																	"redirect_mode": {
																		"description": "Specifies how to redirect the customer to an authentication page, if relevant e.g. for iDEAL payments or 3D Secure.\n\nOpen the authentication page:      \n\n- `redirect`: In the current browser tab\n- `iframe`: As an iframe within the current page\n- `modal`: As a modal window over the current page\n",
																		"type": "string",
																		"enum": [
																			"iframe",
																			"modal",
																			"redirect"
																		]
																	},
																	"checkout": {
																		"description": "Settings for the checkout.",
																		"type": "object",
																		"properties": {
																			"user_login": {
																				"description": "The customer's login settings.",
																				"type": "object",
																				"properties": {
																					"enabled": {
																						"description": "Whether the customer can sign in to an existing FastCheckout account.",
																						"type": "boolean",
																						"example": true
																					},
																					"force": {
																						"description": "Whether to require the customer to sign in to an existing FastCheckout account.",
																						"type": "boolean",
																						"example": false
																					}
																				}
																			},
																			"flow": {
																				"description": "Specifies the layout of the FastCheckout page, i.e. whether to collect the billing, shipping, and payment details in:\n\n- `primary`: 3 columns on a single page\n- `secondary`: 3 steps on separate pages\n",
																				"type": "string",
																				"enum": [
																					"primary",
																					"secondary"
																				]
																			}
																		}
																	},
																	"qr": {
																		"description": "Settings for QR code payments.",
																		"type": "object",
																		"properties": {
																			"enabled": {
																				"description": "Whether to display a QR code on the FastCheckout page.",
																				"type": "boolean",
																				"example": true
																			}
																		}
																	},
																	"cart": {
																		"description": "Settings for the shopping cart.",
																		"type": "object",
																		"properties": {
																			"disabled": {
																				"description": "Whether to display the shopping cart items on the FastCheckout page.",
																				"type": "boolean",
																				"example": false
																			},
																			"edit": {
																				"description": "Whether the customer can edit their shopping cart on the FastCheckout page.",
																				"type": "boolean",
																				"example": false
																			}
																		}
																	},
																	"shipping": {
																		"description": "Settings for the customer's shipping address.",
																		"type": "object",
																		"properties": {
																			"address": {
																				"description": "Settings for the customer's shipping address.",
																				"type": "object",
																				"properties": {
																					"required": {
																						"description": "Whether the customer is required to provide a shipping address on the FastCheckout page.",
																						"type": "boolean",
																						"example": true
																					}
																				}
																			},
																			"invoice": {
																				"description": "Settings for sending the customer an invoice.",
																				"type": "object",
																				"properties": {
																					"enabled": {
																						"description": "Whether to send the customer an invoice.",
																						"type": "boolean",
																						"example": true
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													},
													"template_id": {
														"description": "Apply a template for styling [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/styling/).\n\nIf `payment_options.template` is also set, `payment_options.template` is used.\n",
														"type": "string"
													},
													"template": {
														"description": "Applies a template object structure for styling [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/styling/).\n\nOverrides the `payment_options.template_id`.\n",
														"properties": {
															"version": {
																"description": "The version of the template.",
																"type": "string"
															},
															"settings": {
																"description": "Sets whether to display or hide email elements, e.g. buttons, logos.",
																"type": "object",
																"properties": {
																	"hide_logo": {
																		"description": "Whether to hide the email header logo.",
																		"type": "boolean"
																	},
																	"iframe_mode": {
																		"description": "Whether to hide iframe elements.",
																		"type": "boolean"
																	},
																	"hide_flags": {
																		"description": "Whether to hide the flags container.",
																		"type": "boolean"
																	},
																	"hide_powered": {
																		"description": "Whether to hide the powered link.",
																		"type": "boolean"
																	},
																	"hide_cart": {
																		"description": "Whether to hide the shopping cart container.",
																		"type": "boolean"
																	},
																	"hide_btn_cancel": {
																		"description": "Whether to hide the **Cancel** button.",
																		"type": "boolean"
																	},
																	"hide_cc_logos": {
																		"description": "Whether to hide credit card logos.",
																		"type": "boolean"
																	},
																	"hide_btn_all_methods": {
																		"description": "Whether to hide the **All methods** button.",
																		"type": "boolean"
																	}
																}
															},
															"header": {
																"description": "Settings for the header logo, cover image, background, and font.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"logo": {
																			"description": "Your logo to display in the email header.",
																			"type": "object",
																			"properties": {
																				"image": {
																					"description": "The filename of the logo to display.",
																					"type": "string"
																				}
																			}
																		},
																		"cover": {
																			"description": "Resize the background image to cover the entire header container.",
																			"type": "object",
																			"properties": {
																				"image": {
																					"description": "The cover image.",
																					"type": "string"
																				}
																			}
																		},
																		"background": {
																			"description": "The header background.",
																			"type": "string"
																		},
																		"text": {
																			"description": "The header font color.",
																			"type": "string"
																		}
																	}
																}
															},
															"body": {
																"description": "Settings for the email body.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"text": {
																			"description": "The body font color.",
																			"type": "string"
																		},
																		"background": {
																			"description": "The body background color.",
																			"type": "string"
																		},
																		"link": {
																			"description": "Settings for links in the email body.",
																			"type": "object",
																			"properties": {
																				"text": {
																					"description": "The link text color in the email body.",
																					"type": "string"
																				},
																				"hover": {
																					"description": "Settings for hovering over links in the email body.",
																					"type": "object",
																					"properties": {
																						"text": {
																							"description": "The link text color on hover in the body.",
																							"type": "string"
																						},
																						"border": {
																							"description": "The link border color on hover in the body.",
																							"type": "string"
																						}
																					}
																				}
																			}
																		}
																	}
																}
															},
															"container": {
																"description": "Settings for the container element.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"text": {
																			"description": "The color of text in the container.",
																			"type": "string"
																		},
																		"background": {
																			"description": "The color of the container background.",
																			"type": "string"
																		},
																		"link": {
																			"description": "Settings for links in the container.",
																			"type": "object",
																			"properties": {
																				"text": {
																					"description": "The link text color in the container.",
																					"type": "string"
																				}
																			}
																		}
																	}
																}
															},
															"cart": {
																"description": "Settings for the cart element.",
																"type": "object",
																"properties": {
																	"text": {
																		"description": "The text color in the cart.",
																		"type": "string"
																	},
																	"label": {
																		"description": "The color of labels in the cart.",
																		"type": "string"
																	},
																	"background": {
																		"description": "The background color of the cart.",
																		"type": "string"
																	},
																	"border": {
																		"description": "The border color of the cart.",
																		"type": "string"
																	}
																}
															},
															"payment_form": {
																"description": "Settings for the payment form in the email.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"text": {
																			"description": "The text color in the payment form.",
																			"type": "string"
																		},
																		"background": {
																			"description": "The background color of the payment form.",
																			"type": "string"
																		},
																		"border": {
																			"description": "The border color of the payment form.",
																			"type": "string"
																		},
																		"inputs": {
																			"description": "Settings for the payment form button.",
																			"type": "object",
																			"properties": {
																				"border": {
																					"description": "The color of the payment form button border.",
																					"type": "string"
																				},
																				"label": {
																					"description": "The call to action in the payment form button.",
																					"type": "string"
																				}
																			}
																		}
																	}
																}
															},
															"buttons": {
																"description": "Settings for buttons in the email.",
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"payment_method": {
																			"description": "Settings for the payment method button.",
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"background": {
																						"description": "The payment method button background color.",
																						"type": "string"
																					},
																					"text": {
																						"description": "The payment method button text color.",
																						"type": "string"
																					},
																					"border": {
																						"description": "The payment method button border color.",
																						"type": "string"
																					},
																					"hover": {
																						"description": "Settings when hovering over the payment method button.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The payment method button background color on hover.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The payment method button text color on hover.",
																								"type": "string"
																							},
																							"border": {
																								"description": "The payment method button border color on hover.",
																								"type": "string"
																							}
																						}
																					},
																					"active": {
																						"description": "Settings for when the payment method button is active.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The payment method button background color when active.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The payment method button text color when active.",
																								"type": "string"
																							},
																							"border": {
																								"description": "The payment method button border color when active.",
																								"type": "string"
																							}
																						}
																					}
																				}
																			}
																		},
																		"secondary": {
																			"description": "Settings for the secondary button.",
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"background": {
																						"description": "The secondary button background color.",
																						"type": "string"
																					},
																					"text": {
																						"description": "The secondary button text color.",
																						"type": "string"
																					},
																					"hover": {
																						"description": "Settings for the secondary button on hover.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The secondary button background color on hover.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The secondary button text color on hover.",
																								"type": "string"
																							}
																						}
																					}
																				}
																			}
																		},
																		"primary": {
																			"description": "Settings for the primary button.",
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"background": {
																						"description": "The primary button background color.",
																						"type": "string"
																					},
																					"text": {
																						"description": "The primary button text color.",
																						"type": "string"
																					},
																					"hover": {
																						"description": "Settings for the primary button on hover.",
																						"type": "object",
																						"properties": {
																							"background": {
																								"description": "The primary button background color on hover.",
																								"type": "string"
																							},
																							"text": {
																								"description": "The primary button text color on hover.",
																								"type": "string"
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											},
											"customer": {
												"allOf": [
													{
														"type": "object",
														"description": "The customer’s personal information.\n\n**Required for**: All orders **except** Apple Pay and Google Pay, and Belfius, iDEAL, and WeChat Pay `direct` orders.\n",
														"properties": {
															"locale": {
																"type": "string",
																"description": "- Localizes [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/) for the customer’s language, region, available payment methods, and any UI preferences.\n- Sends [email templates](https://docs.multisafepay.com/features/email-templates/) in the customer's preferred language. If set, `locale` overrides the language set in an email template.\n- Displays local variants of payment methods, e.g. to display:\n  - [Cartes Bancaires](https://docs.multisafepay.com/payment-methods/cartes-bancaires), set to `fr_FR`.\n  - [Dankort](https://docs.multisafepay.com/payment-methods/dankort), set to `da_DK`.\n  - [Postepay](https://docs.multisafepay.com/payment-methods/postepay), set to `it_IT`.\n\n**Required for:** Bancontact\n\n|Locale|Language & country|\n|--------|--------|\n|`de_AT`|German Austria|\n|`de_DE`|German Germany|\n|`en_US`|American English|\n|`fi_FI`|Finnish|\n|`fr_BE`|French Belgium|\n|`it_IT`|Italian|\n|`nl_BE`|Dutch Belgium|\n|`nl_NL`|Dutch Netherlands|\n|`pl_PL`|Polish|\n|`es_ES`|Spanish|\n|`sv_SE`|Swedish|\n|`zh_CN`|Chinese|\n",
																"format": "ab_CD with ISO 639 language codes and ISO 3166 country codes",
																"enum": [
																	"de_AT",
																	"de_DE",
																	"en_US",
																	"fi_FI",
																	"fr_BE",
																	"it_IT",
																	"nl_BE",
																	"nl_NL",
																	"pl_PL",
																	"es_ES",
																	"sv_SE",
																	"zh_CN"
																],
																"example": "nl_NL",
																"default": "en_US"
															},
															"ip_address": {
																"description": "The customer’s IP address.\n\n**Required for:** Pay later, credit card, and Payment Component orders for our fraud check. If empty or incorrect (e.g. your IP address instead of the customer’s), the transaction status may be **Uncleared**, or even **Declined**.\n\n\n**Recommended** but not required for other payment methods.\n\nTo retrieve the customer's IP address if there is:\n- A proxy, use `forwarded_ip`.\n- No proxy, use `ip_address`.\n",
																"type": "string",
																"format": "IP address",
																"example": "123.123.123.123"
															},
															"forwarded_ip": {
																"description": "The [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For) header of the customer object when using a proxy.\n\nTo retrieve the customer's IP address if there is:\n- A proxy, use `forwarded_ip`.\n- No proxy, use `ip_address`.\n",
																"type": "string",
																"format": "IPv4"
															},
															"first_name": {
																"description": "The customer’s first name.\n\nWe recommend always requiring the customer to provide their full name, instead of initials or abbreviations.\n",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Simon"
															},
															"last_name": {
																"description": "The customer’s last name.",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Smit"
															},
															"gender": {
																"description": "The customer's gender.",
																"type": "string",
																"maxLength": 1,
																"enum": [
																	"M",
																	"F"
																],
																"example": "M"
															},
															"birthday": {
																"description": "The customer's date of birth.",
																"type": "string",
																"format": "yyyy-MM-dd",
																"example": "1980-12-31"
															},
															"address1": {
																"description": "The first line of the address.",
																"type": "string",
																"maxLength": 64,
																"example": "Kraanspoor"
															},
															"address2": {
																"description": "The second line of the address.",
																"type": "string",
																"maxLength": 64,
																"example": "39"
															},
															"house_number": {
																"description": "The house number of the address.",
																"type": "string",
																"maxLength": 10,
																"example": "39C"
															},
															"zip_code": {
																"description": "The ZIP code of the address.",
																"type": "string",
																"maxLength": 10,
																"example": "1033 SC"
															},
															"city": {
																"description": "The city of the address.",
																"type": "string",
																"maxLength": 50,
																"example": "Amsterdam"
															},
															"state": {
																"description": "The state of the address. \n\n**Required for:** PayPal Seller Protection\n",
																"type": "string",
																"maxLength": 6
															},
															"country": {
																"description": "The country of the address.\n\n**Required for:** Bank Transfer and PayPal Seller Protection\n",
																"type": "string",
																"format": "country alpha-2",
																"example": "NL"
															},
															"phone": {
																"description": "The customer’s phone number.",
																"type": "string",
																"maxLength": 24,
																"example": "0208500500"
															},
															"email": {
																"description": "The customer’s email address.\n\nUsed for [Second Chance](https://docs.multisafepay.com/features/second-chance/) emails and fraud checks.\n\n**Required for:** Bank Transfer\n",
																"type": "string",
																"example": "customer@emailprovider.com"
															},
															"user_agent": {
																"description": "The characteristic string that identifies the customer's browser.",
																"type": "string",
																"example": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
															},
															"referrer": {
																"description": "The unique identifier for where the customer/browser originates from.",
																"type": "string"
															},
															"reference": {
																"description": "Your unique client-defined identifier for your customer.\n\n**Required for:** [Recurring payments](https://docs.multisafepay.com/api/#recurring-payments-orders) orders, both initial and subsequent payments.\n",
																"type": "string",
																"example": "customer-0001"
															}
														}
													}
												]
											},
											"gateway_info": {
												"description": "Information specific to the payment method (gateway). \n\n**Required for:**\n\n- Credit and debit card orders\n- Apple Pay, Google Pay, and SEPA Direct Debit direct orders\n- Bancontact QR and iDEAL QR orders\n- AfterPay, E-Invoicing, in3, Klarna, and Pay After Delivery orders for credit checks in the Netherlands and Belgium\n- [Flexible 3D orders](https://docs.multisafepay.com/features/3d-secure/flexible/)\n- [MOTO orders](https://docs.multisafepay.com/features/moto/) \n",
												"type": "object",
												"properties": {
													"card_number": {
														"description": "The credit or debit card number.",
														"type": "string",
														"example": "4111111111111111"
													},
													"card_holder_name": {
														"description": "The cardholder's name.",
														"type": "string",
														"example": "John Doe"
													},
													"card_expiry_date": {
														"description": "The card expiry date.",
														"type": "integer",
														"format": "MMYY",
														"example": 1225
													},
													"card_cvc": {
														"description": "The card verification code (CVC) – a 3 or 4 digit number used as an additional security feature for card-not-present transactions.  \n\n**Required for:** All credit and debit card payments, **except** for Maestro and [Recurring payments](https://docs.multisafepay.com/features/recurring-payments/)\n",
														"type": "string",
														"example": "123"
													},
													"flexible_3d": {
														"description": "For Flexible 3D orders (**required**), whether or not 3D Secure authentication is required.",
														"type": "boolean",
														"example": true
													},
													"moto": {
														"description": "For MOTO orders (**required**), whether to create a MOTO order.",
														"type": "boolean",
														"example": false
													},
													"term_url": {
														"description": "For Flexible 3D orders (**required**), the URL that tells the card issuer where to redirect the authentication query.",
														"type": "string",
														"format": "URL",
														"example": "https://example.com/?type=term&api_key=<api_key>"
													},
													"issuer_id": {
														"description": "The unique identifier of the gateway issuer.\n\n**Required for:** `direct` orders\n",
														"type": "string",
														"example": "0021"
													},
													"payment_token": {
														"description": "**Required for:** Apple Pay `direct` orders, the JSON-encoded `payment.token` with the customer’s encrypted payment details, generated by the Apple Pay JS API.\n\n\nSee:\n\n- Apple Pay direct integration – [Create an order](https://docs.multisafepay.com/payments/methods/wallet/applepay/direct-integration/#client-side-integration-1) \n- Apple Developer – [ApplePayPaymentToken](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymenttoken)\n\n**Required for:** Google Pay `direct` orders, the payment token returned from the client-side Google Pay API request.\n\n\nAccess the token at `PaymentData.PaymentMethodData.PaymentMethodTokenizationData.token`.\n\n\nSee [Google Pay direct integration](https://docs.multisafepay.com/payments/methods/wallet/googlepay/direct-integration/).\n",
														"type": "string"
													},
													"qr_enabled": {
														"description": "Whether to generate a [Bancontact QR](https://docs.multisafepay.com/payment-methods/bancontact/) code.",
														"type": "boolean",
														"example": false
													},
													"qr_size": {
														"description": "For iDEAL QR orders, sets the width and height of the QR image in pixels. \n\n\nSizes are between 100 and 2000 pixels. If the value does not meet this rule, the default is used.\n\n\nDefault: 250 (250 by 250 pixels).\n",
														"type": "integer"
													},
													"allow_multiple": {
														"description": "For iDEAL QR orders, sets whether the QR code can be used more than once.",
														"type": "boolean",
														"example": false
													},
													"allow_change_amount": {
														"description": "For iDEAL QR orders, sets whether the customer can change the amount to pay. \n\nYou must then also set `min_amount` and `max_amount`.\n",
														"type": "boolean"
													},
													"min_amount": {
														"description": "For iDEAL QR orders, sets a minimum amount that the customer must pay.\n\n\nThe `min_amount` must be lower than the `amount`.\n\n\nIf `min_amount` is not set, but `max_amount` is set, then the `amount` value is used as the `min_amount`.\n\n\n**Required if:** `allow_change_amount` is set to true.\n",
														"type": "string"
													},
													"max_amount": {
														"description": "For iDEAL QR orders, sets a maximum amount that the customer can pay.\n\n\nThe `max_amount` must be higher than the `amount`.\n\n\nIf `max_amount` is not set, but `min_amount` is set, then the `amount` value is used as the `max_amount`.\n\n\n**Required if:** `allow_change_amount` is set to true.\n",
														"type": "string"
													},
													"account_id": {
														"description": "For SEPA Direct Debit `direct` orders (**required**), the international bank account number (IBAN).",
														"type": "string"
													},
													"account_holder_name": {
														"description": "For SEPA Direct Debit `direct` orders (**required**), the name of the account holder.",
														"type": "string"
													},
													"account_holder_iban": {
														"description": "For SEPA Direct Debit `direct` orders (**required**), the international bank account number (IBAN).",
														"type": "string"
													},
													"emandate": {
														"description": "For SEPA Direct Debit `direct` orders (**required**), the unique emandate identifier (for your own administration).",
														"type": "string"
													},
													"birthday": {
														"description": "For pay later orders (**required**), the customer’s date of birth.",
														"type": "string",
														"format": "yyyy-mm-dd"
													},
													"bank_account": {
														"description": "For pay later orders (**required**), the customer’s international bank account number (IBAN).",
														"type": "string"
													},
													"phone": {
														"description": "For pay later orders (**required**), the customer's phone number.",
														"type": "string"
													},
													"email": {
														"description": "For pay later orders (**required**), the customer's email address to send payment instructions to.",
														"type": "string"
													}
												}
											},
											"delivery": {
												"allOf": [
													{
														"description": "The customer's shipping address.",
														"type": "object",
														"properties": {
															"first_name": {
																"description": "The customer’s first name.\n\nWe recommend always requiring the customer to provide their full name, instead of initials or abbreviations.\n",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Simon"
															},
															"last_name": {
																"description": "The customer’s last name.",
																"type": "string",
																"minLength": 2,
																"maxLength": 25,
																"example": "Smit"
															},
															"address1": {
																"description": "The first line of the address.",
																"type": "string",
																"maxLength": 64,
																"example": "Kraanspoor"
															},
															"house_number": {
																"description": "The apartment number of the address.",
																"type": "string",
																"maxLength": 9,
																"example": "B"
															},
															"zip_code": {
																"description": "The ZIP code of the address.",
																"type": "string",
																"maxLength": 10,
																"example": "1033 SC"
															},
															"city": {
																"description": "The city of the address.",
																"type": "string",
																"maxLength": 50,
																"example": "Amsterdam"
															},
															"country": {
																"description": "The country of the address.",
																"type": "string",
																"format": "country alpha-2",
																"example": "NL"
															}
														}
													},
													{
														"required": [
															"address1",
															"city",
															"country",
															"first_name",
															"house_number",
															"last_name",
															"zip_code"
														]
													}
												]
											},
											"checkout_options": {
												"allOf": [
													{
														"description": "Settings for the shopping cart, including taxes and validation.",
														"type": "object",
														"properties": {
															"validate_cart": {
																"description": "If set to `true`, the value of `amount` is compared to the calculated total value of the shopping cart (returned as `order_total`).\n\nIf the values:\n\n- Match, the request is successful.\n- Don’t match, the request is unsuccessful and error_code 1027 is returned.\n",
																"type": "boolean",
																"default": false
															},
															"tax_tables": {
																"description": "Sets default VAT settings and creates VAT classes in the alternate array, which you can apply to individual shopping cart items.",
																"type": "object",
																"properties": {
																	"default": {
																		"description": "The default VAT setting. Used when no value is set for `shopping_cart.items.tax_table_selector`.",
																		"type": "object",
																		"properties": {
																			"shipping_taxed": {
																				"description": "Sets whether or not the shipping costs are taxed.",
																				"type": "boolean"
																			},
																			"rate": {
																				"description": "The tax rate percentage as a fraction, e.g. 15% is expressed as `0.15`.",
																				"type": "number",
																				"format": "float",
																				"minimum": 0,
																				"example": 0.15
																			}
																		}
																	},
																	"alternate": {
																		"description": "An array of client-defined VAT classes that you can apply to items in the shopping cart.",
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"name": {
																					"description": "The client-defined ID. Applies tax settings to items in the shopping cart through the `shopping_cart.items.tax_table_selector` attribute.",
																					"type": "string"
																				},
																				"standalone": {
																					"description": "Sets whether or not the shipping costs are taxed.",
																					"type": "boolean"
																				},
																				"rules": {
																					"type": "array",
																					"items": {
																						"type": "object",
																						"properties": {
																							"rate": {
																								"description": "The tax rate percentage expressed as a fraction.",
																								"type": "number",
																								"format": "float",
																								"example": 0.0825,
																								"minimum": 0
																							},
																							"country": {
																								"description": "The country where the tax rate applies.",
																								"type": "string",
																								"format": "country alpha-2",
																								"example": "US"
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													},
													{
														"required": [
															"tax_tables"
														]
													}
												]
											},
											"shopping_cart": {
												"description": "The array of items in the customer's shopping cart, including the tax class as defined in `checkout_options`.\n\nIf you have a self-made integration, include the complete specification of the `shopping_cart`.\n",
												"type": "object",
												"properties": {
													"items": {
														"description": "The items in the customer's shopping cart. Specify the relevant tax ruling per item.",
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"name": {
																	"description": "The name of the product or service.",
																	"type": "string",
																	"example": "Backpack"
																},
																"description": {
																	"description": "A description of the product or service.",
																	"type": "string",
																	"example": "Black cotton backpack with logo."
																},
																"unit_price": {
																	"description": "The unit price (in decimals) of the item, excluding VAT.\n\nThe currency of the shopping cart is set at order level using `currency`. \n\n**Example:** The value for a €90 backpack is `90`.\n",
																	"type": "number",
																	"format": "float",
																	"example": 90
																},
																"quantity": {
																	"description": "The number of units of the item.",
																	"type": "integer",
																	"example": 1
																},
																"merchant_item_id": {
																	"description": "Your unique (client-defined) identifier for the product or service.\n\nIf this item specifies the shipping costs, set to `msp-shipping`.\n",
																	"type": "string",
																	"example": "12345678"
																},
																"tax_table_selector": {
																	"description": "Your client-defined identifier for a tax table, specified as `checkout_options.tax_tables.alternate.name`.",
																	"type": "string",
																	"example": "VAT-21"
																},
																"weight": {
																	"description": "The weight per product.",
																	"type": "object",
																	"properties": {
																		"unit": {
																			"description": "The unit of weight.",
																			"type": "string",
																			"enum": [
																				"KG"
																			],
																			"example": "KG"
																		},
																		"value": {
																			"description": "The weight of the item corresponding to the unit.\n\nFor a 2 kilogram product:\n- Set `value` to `2`.\n- Set `unit` to `KG`.\n",
																			"type": "number",
																			"example": 2
																		}
																	}
																}
															}
														}
													}
												}
											},
											"items": {
												"description": "An HTML string to display the order items on the MultiSafepay payment page, instead of including a `shopping_cart`.",
												"type": "string",
												"example": "<ol><li>Article 1: € 1,95</li><li>Article 2: € 2,95</li><li>Article 3: € 3,95</li></ol>"
											},
											"recurring_model": {
												"description": "For initial and subsequent [Recurring payments](https://docs.multisafepay.com/features/recurring-payments/) (**required**), sets the recurring model:\n\n- Card on file (COF): The cardholder has authorized you to store their card details.\n- Subscription: An agreement or services that are billed at the end of your billing cycle, e.g. weekly, monthly.\n- Unscheduled: Event-triggered, e.g. mobile top-up when no credit left on the phone.\n",
												"type": "string",
												"enum": [
													"cardonfile",
													"subscription",
													"unscheduled"
												],
												"example": "cardonfile"
											},
											"recurring_id": {
												"description": "For subsequent [Recurring payments](https://docs.multisafepay.com/features/recurring-payments/) (**required**), the unique identifier of the recurring payment.",
												"type": "string",
												"example": "133761993_gTp2"
											},
											"affiliate": {
												"description": "For [Split Payments](https://docs.multisafepay.com/features/split-payments/) (**required**).",
												"type": "object",
												"properties": {
													"split_payments": {
														"description": "Split the amount of a transaction between partner/primary and affiliated accounts by a percentage, a fixed amount, or both.\n\nFor every split payment rule, add an object to the array.\n",
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"merchant": {
																	"description": "The account ID of the affiliated account.",
																	"type": "string",
																	"example": 1001001
																},
																"fixed": {
																	"description": "The amount to split in cents.",
																	"type": "integer",
																	"minimum": 1
																},
																"percentage": {
																	"description": "A percentage of the amount to split.",
																	"type": "number",
																	"format": "float",
																	"minimum": 1
																},
																"description": {
																	"description": "A description of the split payment.",
																	"type": "string"
																}
															}
														}
													}
												}
											},
											"second_chance": {
												"description": "For [Second Chance](https://docs.multisafepay.com/features/second-chance/).",
												"type": "object",
												"properties": {
													"send_mail": {
														"description": "Whether to send reminder emails if the customer doesn't complete payment.\n\n\n **Suppressing Second Chance emails after cancellation**\n\n\n When a customer places an order, goes to your checkout, doesn’t complete payment, but later returns and tries to pay again, some webshops create a second order. \n \n \n If Second Chance emails are enabled, the customer still receives emails for the first order, even after they complete payment for the second order.\n\n Cancelling the first order does **not** suppress Second Chance emails. To suppress emails, make an Update order details: CancelOrder request.\n",
														"type": "boolean"
													}
												}
											},
											"custom_info": {
												"description": "Additional information about the order.",
												"type": "object",
												"properties": {
													"custom_1": {
														"description": "Information about the order.",
														"type": "string"
													},
													"custom_2": {
														"description": "Information about the order.",
														"type": "string"
													},
													"custom_3": {
														"description": "Information about the order.",
														"type": "string"
													}
												}
											},
											"days_active": {
												"description": "For `redirect` and `paymentlink` orders, sets the number of days the link to the MultiSafepay payment page is valid.\n\nThe link lifetime begins when the order is created, or the link is generated. A `session_id` is returned in the payment page URL.\n\nIf [Second Chance](https://docs.multisafepay.com/features/second-chance/) is enabled, we recommend a minimum lifetime of **48 hours**. Second Chance emails the customer 2 payment reminders: 1 hour and 24 hours after the order is created. If the lifetime is less than 24 hours, the link in the second email is no longer active when the customer receives it. \n\nSee `seconds_active` below. If `seconds_active` is also set, `seconds_active` is used. If neither is set, the default is used.\n",
												"type": "integer",
												"minimum": 1,
												"default": 30,
												"example": 30
											},
											"seconds_active": {
												"description": "For `redirect` and `paymentlink` orders, sets the number of seconds the link to the MultiSafepay payment page is valid.\n\nSee `days_active` above. If `days_active` is also set, `seconds_active` is used. If neither is set, the default is used.\n",
												"type": "integer",
												"minimum": 1,
												"default": 2592000
											},
											"var1": {
												"type": "string",
												"description": "Variable for storing additional data.",
												"maxLength": 500
											},
											"var2": {
												"type": "string",
												"description": "Variable for storing additional data.",
												"maxLength": 500
											},
											"var3": {
												"type": "string",
												"description": "Variable for storing additional data, including [Split Payments](https://docs.multisafepay.com/features/split-payments/) metadata.",
												"maxLength": 500
											},
											"plugin": {
												"description": "Information about your integration (useful for debugging).",
												"properties": {
													"shop": {
														"description": "The name of your ecommerce application.",
														"type": "string",
														"example": "My self-made integration"
													},
													"shop_version": {
														"description": "The version of your ecommerce application.",
														"type": "string"
													},
													"plugin_version": {
														"description": "The version of your integration.",
														"type": "string",
														"example": "1.0.0"
													},
													"partner": {
														"description": "The name of the third party that developed the ecommerce application (if relevant).",
														"type": "string"
													},
													"shop_root_url": {
														"description": "The root/base URL of the ecommerce application.",
														"type": "string",
														"example": "https://www.my-ecommerce.com"
													}
												}
											}
										},
										"type": "object"
									}
								]
							},
							"examples": {
								"Payment Page": {
									"summary": "Payment page",
									"value": {
										"type": "redirect",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": 37485,
										"description": "Test Order Description",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed"
										}
									}
								},
								"AfterPay redirect": {
									"summary": "AfterPay redirect",
									"value": {
										"type": "redirect",
										"gateway": "AFTERPAY",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": 37485,
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed"
										},
										"customer": {
											"locale": "nl_NL",
											"first_name": "Test",
											"last_name": "Rejected",
											"address1": "Hogehilweg",
											"house_number": "8",
											"zip_code": "1101 CC",
											"city": "Amsterdam",
											"country": "NL",
											"email": "example@multisafepay.com"
										},
										"delivery": {
											"first_name": "Test",
											"last_name": "Rejected",
											"address1": "Hogehilweg",
											"house_number": "8",
											"zip_code": "1101 CC",
											"city": "Amsterdam",
											"country": "NL",
											"phone": "0612345678",
											"email": "example@multisafepay.com"
										},
										"gateway_info": {
											"birthday": "1970-07-10",
											"gender": "mr",
											"phone": "0612345678",
											"email": "example@multisafepay.com"
										},
										"shopping_cart": {
											"items": [
												{
													"name": "Geometric Candle Holders",
													"description": "",
													"unit_price": 90,
													"quantity": 3,
													"merchant_item_id": "1111",
													"tax_table_selector": "BTW21",
													"weight": {
														"unit": "KG",
														"value": "12"
													}
												},
												{
													"name": "Nice apple",
													"description": "",
													"unit_price": 35,
													"quantity": 1,
													"merchant_item_id": "666666",
													"tax_table_selector": "BTW9",
													"weight": {
														"unit": "KG",
														"value": "20"
													}
												},
												{
													"name": "Flat Rate - Fixed",
													"description": "Shipping",
													"unit_price": 10,
													"quantity": 1,
													"merchant_item_id": "msp-shipping",
													"tax_table_selector": "none",
													"weight": {
														"unit": "KG",
														"value": "0"
													}
												}
											]
										},
										"checkout_options": {
											"tax_tables": {
												"default": {
													"shipping_taxed": "true",
													"rate": 0.21
												},
												"alternate": [
													{
														"name": "BTW21",
														"standalone": true,
														"rules": [
															{
																"rate": 0.21
															}
														]
													},
													{
														"name": "BTW9",
														"standalone": true,
														"rules": [
															{
																"rate": 0.09
															}
														]
													},
													{
														"name": "BTW6",
														"standalone": true,
														"rules": [
															{
																"rate": 0.06
															}
														]
													},
													{
														"name": "BTW0",
														"standalone": true,
														"rules": [
															{
																"rate": 0
															}
														]
													},
													{
														"name": "none",
														"standalone": false,
														"rules": [
															{
																"rate": 0
															}
														]
													},
													{
														"name": "FEE",
														"standalone": false,
														"rules": [
															{
																"rate": 0
															}
														]
													}
												]
											}
										}
									}
								},
								"AfterPay direct": {
									"summary": "AfterPay direct",
									"value": {
										"type": "direct",
										"gateway": "AFTERPAY",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": 37485,
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed"
										},
										"customer": {
											"locale": "nl_NL",
											"first_name": "Test",
											"last_name": "Rejected",
											"address1": "Hogehilweg",
											"house_number": "8",
											"zip_code": "1101 CC",
											"city": "Amsterdam",
											"country": "NL",
											"email": "example@multisafepay.com"
										},
										"delivery": {
											"first_name": "Test",
											"last_name": "Rejected",
											"address1": "Hogehilweg",
											"house_number": "8",
											"zip_code": "1101 CC",
											"city": "Amsterdam",
											"country": "NL",
											"phone": "0612345678",
											"email": "example@multisafepay.com"
										},
										"gateway_info": {
											"birthday": "1970-07-10",
											"gender": "mr",
											"phone": "0612345678",
											"email": "example@multisafepay.com"
										},
										"shopping_cart": {
											"items": [
												{
													"name": "Geometric Candle Holders",
													"description": "",
													"unit_price": 90,
													"quantity": 3,
													"merchant_item_id": "1111",
													"tax_table_selector": "BTW21",
													"weight": {
														"unit": "KG",
														"value": "12"
													}
												},
												{
													"name": "Nice apple",
													"description": "",
													"unit_price": 35,
													"quantity": 1,
													"merchant_item_id": "666666",
													"tax_table_selector": "BTW9",
													"weight": {
														"unit": "KG",
														"value": "20"
													}
												},
												{
													"name": "Flat Rate - Fixed",
													"description": "Shipping",
													"unit_price": 10,
													"quantity": 1,
													"merchant_item_id": "msp-shipping",
													"tax_table_selector": "none",
													"weight": {
														"unit": "KG",
														"value": "0"
													}
												}
											]
										},
										"checkout_options": {
											"tax_tables": {
												"default": {
													"shipping_taxed": "true",
													"rate": 0.21
												},
												"alternate": [
													{
														"name": "BTW21",
														"standalone": true,
														"rules": [
															{
																"rate": 0.21
															}
														]
													},
													{
														"name": "BTW9",
														"standalone": true,
														"rules": [
															{
																"rate": 0.09
															}
														]
													},
													{
														"name": "BTW6",
														"standalone": true,
														"rules": [
															{
																"rate": 0.06
															}
														]
													},
													{
														"name": "BTW0",
														"standalone": true,
														"rules": [
															{
																"rate": 0
															}
														]
													},
													{
														"name": "none",
														"standalone": false,
														"rules": [
															{
																"rate": 0
															}
														]
													},
													{
														"name": "FEE",
														"standalone": false,
														"rules": [
															{
																"rate": 0
															}
														]
													}
												]
											}
										}
									}
								},
								"AliPay redirect": {
									"summary": "AliPay redirect",
									"value": {
										"type": "redirect",
										"gateway": "ALIPAY",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": 1000,
										"description": "product description",
										"custom_info": {},
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed"
										}
									}
								},
								"AliPay direct": {
									"summary": "AliPay direct",
									"value": {
										"type": "direct",
										"gateway": "ALIPAY",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": 1000,
										"description": "product description",
										"custom_info": {},
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed"
										}
									}
								},
								"American Express redirect": {
									"summary": "American Express redirect",
									"value": {
										"type": "redirect",
										"gateway": "AMEX",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "100",
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": ""
										},
										"customer": {
											"locale": "nl",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"birthday": "10071970",
											"gender": "male",
											"phone": "0612345678",
											"email": "example@multisafepay.com",
											"referrer": "http://test.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										}
									}
								},
								"Apple Pay redirect": {
									"summary": "Apple Pay redirect",
									"value": {
										"type": "redirect",
										"gateway": "APPLEPAY",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "100",
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed"
										}
									}
								},
								"Apple Pay direct": {
									"summary": "Apple Pay direct",
									"value": {
										"type": "direct",
										"gateway": "APPLEPAY",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": 1495,
										"description": "Order Description",
										"payment_options": {
											"notification_url": "https://www.example.com/client/notification?type=notification"
										},
										"gateway_info": {
											"payment_token": "{\"paymentData\":{\"data\":\"string\"},\"transactionIdentifier\":\"string\",\"paymentMethod\":{\"network\":\"string\",\"displayName\":\"string\"}}"
										}
									}
								},
								"Bancontact redirect": {
									"summary": "Bancontact redirect",
									"value": {
										"type": "redirect",
										"gateway": "MISTERCASH",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "100",
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": ""
										},
										"customer": {
											"locale": "nl",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"birthday": "10071970",
											"gender": "male",
											"phone": "0612345678",
											"email": "example@multisafepay.com",
											"referrer": "http://test.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										}
									}
								},
								"Bancontact – QR": {
									"summary": "Bancontact – QR",
									"value": {
										"type": "redirect",
										"gateway": "MISTERCASH",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": 1000,
										"description": "Test order description",
										"payment_options": {
											"notification_url": "https://www.example.com/client/notification?type=notification",
											"redirect_url": "https://www.example.com/client/notification?type=redirect",
											"cancel_url": "https://www.example.com/client/notification?type=cancel",
											"close_window": true
										},
										"gateway_info": {
											"qr_enabled": 1
										},
										"customer": {
											"locale": "nl_BE"
										}
									}
								},
								"Bank Transfer redirect": {
									"summary": "Bank Transfer redirect",
									"value": {
										"type": "redirect",
										"gateway": "BANKTRANS",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "100",
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": ""
										},
										"customer": {
											"locale": "nl",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"birthday": "10071970",
											"gender": "male",
											"phone": "0612345678",
											"email": "example@multisafepay.com",
											"referrer": "http://test.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										}
									}
								},
								"Bank Transfer direct": {
									"summary": "Bank Transfer direct",
									"value": {
										"type": "direct",
										"gateway": "BANKTRANS",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": 1000,
										"description": "product description",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": true
										},
										"customer": {
											"locale": "nl",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"birthday": "10071970",
											"gender": "male",
											"phone": "0612345678",
											"email": "example@multisafepay.com",
											"referrer": "http://example.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										}
									}
								},
								"Belfius redirect": {
									"summary": "Belfius redirect",
									"value": {
										"type": "redirect",
										"gateway": "BELFIUS",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "100",
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": ""
										},
										"customer": {
											"locale": "nl",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"birthday": "10071970",
											"gender": "male",
											"phone": "0612345678",
											"email": "example@multisafepay.com",
											"referrer": "http://test.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										}
									}
								},
								"Belfius direct": {
									"summary": "Belfius direct",
									"value": {
										"type": "direct",
										"gateway": "BELFIUS",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": 1000,
										"description": "product description",
										"custom_info": {},
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed"
										}
									}
								},
								"Betaal per Maand redirect": {
									"summary": "Betaal per Maand redirect",
									"value": {
										"type": "redirect",
										"gateway": "SANTANDER",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "100",
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": ""
										},
										"customer": {
											"locale": "nl",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"birthday": "10071970",
											"gender": "male",
											"phone": "0612345678",
											"email": "example@multisafepay.com",
											"referrer": "http://test.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										}
									}
								},
								"Betaal per Maand direct": {
									"summary": "Betaal per Maand direct",
									"value": {
										"type": "direct",
										"gateway": "SANTANDER",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": 30000,
										"description": "product description",
										"custom_info": {},
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed"
										},
										"customer": {
											"locale": "us",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "39",
											"zip_code": "1033 SC",
											"city": "Gravenhage",
											"state": "",
											"phone": "333666333",
											"country": "NL",
											"email": "example@multisafepay.com",
											"referrer": "http://multisafepay-demo.com/plugingroup/dev/magento/1901/checkout/cart/",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										}
									}
								},
								"CBC/KBC redirect": {
									"summary": "CBC/KBC redirect",
									"value": {
										"type": "redirect",
										"gateway": "CBC",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "100",
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": ""
										},
										"customer": {
											"locale": "nl",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"birthday": "10071970",
											"gender": "male",
											"phone": "0612345678",
											"email": "example@multisafepay.com",
											"referrer": "http://test.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										}
									}
								},
								"CBC/KBC direct": {
									"summary": "CBC/KBC direct",
									"value": {
										"type": "direct",
										"gateway": "CBC",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": 100,
										"description": "product description",
										"custom_info": {},
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed"
										}
									}
								},
								"Credit card redirect": {
									"summary": "Credit card redirect",
									"value": {
										"type": "redirect",
										"order_id": "my-order-id-1",
										"gateway": "CREDITCARD",
										"currency": "EUR",
										"amount": "100",
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": ""
										},
										"customer": {
											"locale": "nl",
											"ip_address": "89.20.162.110",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"birthday": "10071970",
											"gender": "male",
											"phone": "0612345678",
											"email": "example@multisafepay.com",
											"referrer": "http://test.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										}
									}
								},
								"Credit card direct": {
									"summary": "Credit card direct",
									"value": {
										"type": "direct",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": 100,
										"gateway": "CREDITCARD",
										"description": "product description",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": true
										},
										"customer": {
											"locale": "nl",
											"ip_address": "89.20.162.110",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"birthday": "10071970",
											"gender": "male",
											"phone": "0612345678",
											"email": "example@multisafepay.com",
											"referrer": "http://example.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										},
										"gateway_info": {
											"card_number": "5747906991001442",
											"card_holder_name": "Test Holder Name",
											"card_expiry_date": "2512",
											"card_cvc": "123"
										}
									}
								},
								"Dotpay redirect": {
									"summary": "Dotpay redirect",
									"value": {
										"type": "redirect",
										"gateway": "DOTPAY",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "100",
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": ""
										},
										"customer": {
											"locale": "nl",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"birthday": "10071970",
											"gender": "male",
											"phone": "0612345678",
											"email": "example@multisafepay.com",
											"referrer": "http://test.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										}
									}
								},
								"Edenred redirect": {
									"summary": "Edenred redirect",
									"value": {
										"type": "redirect",
										"gateway": "EDENRED",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "100",
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": ""
										},
										"customer": {
											"locale": "nl",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"birthday": "10071970",
											"gender": "male",
											"phone": "0612345678",
											"email": "example@multisafepay.com",
											"referrer": "http://test.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										}
									}
								},
								"E-Invoicing redirect": {
									"summary": "E-Invoicing redirect",
									"value": {
										"type": "redirect",
										"order_id": "my-order-id-1",
										"gateway": "EINVOICE",
										"currency": "EUR",
										"amount": "10000",
										"description": "Test Order Description",
										"manual": "false",
										"gateway_info": {
											"birthday": "1980-01-30",
											"bank_account": "0417164300",
											"phone": "0208500500",
											"email": "example@multisafepay.com"
										},
										"payment_options": {
											"notification_url": "https://www.example.com/client/notification?type=notification",
											"redirect_url": "https://www.example.com/client/notification?type=redirect",
											"cancel_url": "https://www.example.com/client/notification?type=cancel",
											"close_window": true
										},
										"customer": {
											"locale": "nl_NL",
											"ip_address": "102.129.255.0",
											"forwarded_ip": "",
											"first_name": "John",
											"last_name": "Doe",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "1",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"email": "example@multisafepay.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36",
											"referrer": "https://example.com"
										},
										"shopping_cart": {
											"items": [
												{
													"name": "Test",
													"description": "",
													"unit_price": 100,
													"quantity": 1,
													"merchant_item_id": "1111",
													"tax_table_selector": "none",
													"weight": {
														"unit": "KG",
														"value": "12"
													}
												}
											]
										},
										"checkout_options": {
											"tax_tables": {
												"default": {
													"shipping_taxed": "false",
													"rate": 0
												},
												"alternate": [
													{
														"name": "none",
														"standalone": false,
														"rules": [
															{
																"rate": 0
															}
														]
													},
													{
														"name": "FEE",
														"standalone": false,
														"rules": [
															{
																"rate": 0
															}
														]
													}
												]
											}
										}
									}
								},
								"E-Invoicing direct": {
									"summary": "E-Invoicing direct",
									"value": {
										"type": "direct",
										"gateway": "EINVOICE",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "26000",
										"description": "Test Order Description",
										"var1": "",
										"var2": "",
										"var3": "",
										"items": "",
										"manual": "false",
										"gateway_info": {
											"birthday": "1980-01-30",
											"bank_account": "0417164300",
											"phone": "0208500500",
											"email": "example@multisafepay.com"
										},
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": ""
										},
										"plugin": {
											"shop": "ApiTestTool",
											"plugin_version": "1.0.0",
											"shop_version": "1",
											"partner": "parner",
											"shop_root_url": "http://multisafepay.com"
										},
										"customer": {
											"locale": "us",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "1",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"email": "example@multisafepay.com",
											"referrer": "http://multisafepay-demo.com/plugingroup/dev/magento/1901/checkout/cart/",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										},
										"delivery": {
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "1",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"phone": "",
											"email": ""
										},
										"shopping_cart": {
											"items": [
												{
													"name": "Geometric Candle Holders",
													"description": "",
													"unit_price": "90",
													"quantity": "2",
													"merchant_item_id": "11111",
													"tax_table_selector": "none",
													"weight": {
														"unit": "KG",
														"value": "12"
													}
												},
												{
													"name": "Nice apple",
													"description": "",
													"unit_price": "35",
													"quantity": "2",
													"merchant_item_id": "666666",
													"tax_table_selector": "none",
													"weight": {
														"unit": "KG",
														"value": "20"
													}
												},
												{
													"name": "Flat Rate - Fixed",
													"description": "Shipping",
													"unit_price": "10",
													"quantity": "1",
													"merchant_item_id": "123456",
													"tax_table_selector": "none",
													"weight": {
														"unit": "KG",
														"value": "0"
													}
												}
											]
										},
										"checkout_options": {
											"tax_tables": {
												"default": {
													"shipping_taxed": "true",
													"rate": "0.21"
												},
												"alternate": [
													{
														"name": "BTW21",
														"standalone": true,
														"rules": [
															{
																"rate": "0.21"
															}
														]
													},
													{
														"name": "BTW6",
														"standalone": true,
														"rules": [
															{
																"rate": "0.06"
															}
														]
													},
													{
														"name": "BTW0",
														"standalone": true,
														"rules": [
															{
																"rate": "0.00"
															}
														]
													},
													{
														"name": "0.0000",
														"standalone": false,
														"rules": [
															{
																"rate": "0"
															}
														]
													},
													{
														"name": "0.0000",
														"standalone": false,
														"rules": [
															{
																"rate": "0"
															}
														]
													},
													{
														"name": "FEE",
														"standalone": false,
														"rules": [
															{
																"rate": "0.00"
															}
														]
													},
													{
														"name": "none",
														"standalone": false,
														"rules": [
															{
																"rate": "0.00"
															}
														]
													},
													{
														"name": "2",
														"standalone": true,
														"rules": [
															{
																"rate": "0.0825",
																"country": "US"
															},
															{
																"rate": "0.08375",
																"country": "US"
															}
														]
													}
												]
											}
										}
									}
								},
								"EPS redirect": {
									"summary": "EPS redirect",
									"value": {
										"type": "redirect",
										"gateway": "EPS",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "100",
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": ""
										},
										"customer": {
											"locale": "nl",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"birthday": "10071970",
											"gender": "male",
											"phone": "0612345678",
											"email": "example@multisafepay.com",
											"referrer": "http://test.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										}
									}
								},
								"Gift card redirect": {
									"summary": "Gift card redirect",
									"value": {
										"type": "redirect",
										"gateway": "BOEKENBON",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "100",
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": ""
										},
										"customer": {
											"locale": "nl",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"birthday": "10071970",
											"gender": "male",
											"phone": "0612345678",
											"email": "example@multisafepay.com",
											"referrer": "http://test.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										}
									}
								},
								"Giropay redirect": {
									"summary": "Giropay redirect",
									"value": {
										"type": "redirect",
										"gateway": "GIROPAY",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "100",
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": ""
										},
										"customer": {
											"locale": "nl",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"birthday": "10071970",
											"gender": "male",
											"phone": "0612345678",
											"email": "example@multisafepay.com",
											"referrer": "http://test.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										}
									}
								},
								"Google Pay redirect": {
									"summary": "Google Pay redirect",
									"value": {
										"type": "redirect",
										"gateway": "GOOGLEPAY",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "100",
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": ""
										},
										"customer": {
											"locale": "nl",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"birthday": "10071970",
											"gender": "male",
											"phone": "0612345678",
											"email": "example@multisafepay.com",
											"referrer": "http://test.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										}
									}
								},
								"Google Pay direct": {
									"summary": "Google Pay direct",
									"value": {
										"type": "direct",
										"gateway": "GOOGLEPAY",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": 1495,
										"description": "Order Description",
										"payment_options": {
											"notification_url": "https://www.example.com/client/notification?type=notification",
											"redirect_url": "https://www.example.com/client/notification?type=redirect",
											"cancel_url": "https://www.example.com/client/notification?type=cancel"
										},
										"gateway_info": {
											"payment_token": "<google-pay-payment-token>"
										}
									}
								},
								"iDEAL redirect": {
									"summary": "iDEAL redirect",
									"value": {
										"type": "redirect",
										"gateway": "IDEAL",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": 1000,
										"description": "Test order description",
										"payment_options": {
											"notification_url": "https://www.example.com/client/notification?type=notification",
											"redirect_url": "https://www.example.com/client/notification?type=redirect",
											"cancel_url": "https://www.example.com/client/notification?type=cancel",
											"close_window": true
										},
										"customer": {
											"locale": "nl_NL"
										}
									}
								},
								"iDEAL direct": {
									"summary": "iDEAL direct",
									"value": {
										"type": "direct",
										"gateway": "iDEAL",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": 1000,
										"description": "product description",
										"custom_info": {},
										"gateway_info": {
											"issuer_id": "3151"
										},
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": true
										}
									}
								},
								"iDEAL – QR": {
									"summary": "iDEAL – QR",
									"value": {
										"type": "redirect",
										"gateway": "IDEALQR",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "100",
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": ""
										},
										"customer": {
											"locale": "nl",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"birthday": "10071970",
											"gender": "male",
											"phone": "0612345678",
											"email": "example@multisafepay.com",
											"referrer": "http://test.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										}
									}
								},
								"in3 redirect": {
									"summary": "in3 redirect",
									"value": {
										"type": "redirect",
										"gateway": "IN3",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": 10000,
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/client/notification?type=notification",
											"redirect_url": "https://www.example.com/client/notification?type=redirect",
											"cancel_url": "https://www.example.com/client/notification?type=cancel",
											"close_window": true
										},
										"customer": {
											"ip_address": "84.71.117.69",
											"locale": "nl_NL",
											"first_name": "John",
											"last_name": "Doe",
											"address1": "Teststraat",
											"house_number": "1",
											"zip_code": "1234AB",
											"city": "Amsterdam",
											"country": "NL",
											"email": "example@multisafepay.com"
										},
										"delivery": {
											"first_name": "John",
											"last_name": "Doe",
											"address1": "Teststraat",
											"house_number": "1",
											"zip_code": "1234AB",
											"city": "Amsterdam",
											"country": "NL",
											"phone": "0612345678",
											"email": "example@multisafepay.com"
										},
										"gateway_info": {
											"birthday": "1999-01-01",
											"gender": "mr",
											"phone": "0612345678"
										},
										"shopping_cart": {
											"items": [
												{
													"name": "Test",
													"description": "",
													"unit_price": 100,
													"quantity": 1,
													"merchant_item_id": "1111",
													"tax_table_selector": "none",
													"weight": {
														"unit": "KG",
														"value": "12"
													}
												}
											]
										},
										"checkout_options": {
											"tax_tables": {
												"default": {
													"shipping_taxed": "false",
													"rate": 0
												},
												"alternate": [
													{
														"name": "none",
														"standalone": false,
														"rules": [
															{
																"rate": 0
															}
														]
													},
													{
														"name": "FEE",
														"standalone": false,
														"rules": [
															{
																"rate": 0
															}
														]
													}
												]
											}
										}
									}
								},
								"in3 direct": {
									"summary": "in3 direct",
									"value": {
										"type": "direct",
										"gateway": "IN3",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": 37485,
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed"
										},
										"customer": {
											"ip_address": "213.127.71.75",
											"locale": "nl_NL",
											"first_name": "Test",
											"last_name": "Rejected",
											"address1": "Teststraat",
											"house_number": "1",
											"zip_code": "1234AB",
											"city": "Amsterdam",
											"country": "NL",
											"email": "example@multisafepay.com"
										},
										"delivery": {
											"first_name": "Test",
											"last_name": "Rejected",
											"address1": "Teststraat",
											"house_number": "1",
											"zip_code": "1234AB",
											"city": "Amsterdam",
											"country": "NL",
											"phone": "0612345678",
											"email": "example@multisafepay.com"
										},
										"gateway_info": {
											"birthday": "1999-01-01",
											"gender": "mr",
											"phone": "0612345678"
										},
										"shopping_cart": {
											"items": [
												{
													"name": "Geometric Candle Holders",
													"description": "",
													"unit_price": 90,
													"quantity": 3,
													"merchant_item_id": "1111",
													"tax_table_selector": "BTW21",
													"weight": {
														"unit": "KG",
														"value": "12"
													}
												},
												{
													"name": "Nice apple",
													"description": "",
													"unit_price": 35,
													"quantity": 1,
													"merchant_item_id": "666666",
													"tax_table_selector": "BTW9",
													"weight": {
														"unit": "KG",
														"value": "20"
													}
												},
												{
													"name": "Flat Rate - Fixed",
													"description": "Shipping",
													"unit_price": 10,
													"quantity": 1,
													"merchant_item_id": "msp-shipping",
													"tax_table_selector": "none",
													"weight": {
														"unit": "KG",
														"value": "0"
													}
												}
											]
										},
										"checkout_options": {
											"tax_tables": {
												"default": {
													"shipping_taxed": "true",
													"rate": 0.21
												},
												"alternate": [
													{
														"name": "BTW21",
														"standalone": true,
														"rules": [
															{
																"rate": 0.21
															}
														]
													},
													{
														"name": "BTW9",
														"standalone": true,
														"rules": [
															{
																"rate": 0.09
															}
														]
													},
													{
														"name": "BTW6",
														"standalone": true,
														"rules": [
															{
																"rate": 0.06
															}
														]
													},
													{
														"name": "BTW0",
														"standalone": true,
														"rules": [
															{
																"rate": 0
															}
														]
													},
													{
														"name": "none",
														"standalone": false,
														"rules": [
															{
																"rate": 0
															}
														]
													},
													{
														"name": "FEE",
														"standalone": false,
														"rules": [
															{
																"rate": 0
															}
														]
													}
												]
											}
										}
									}
								},
								"Klarna redirect": {
									"summary": "Klarna redirect",
									"value": {
										"type": "redirect",
										"gateway": "KLARNA",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "10000",
										"description": "Test Order Description",
										"var1": "",
										"var2": "",
										"var3": "",
										"items": "",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/client/notification?type=notification",
											"redirect_url": "https://www.example.com/client/notification?type=redirect",
											"cancel_url": "https://www.example.com/client/notification?type=cancel",
											"close_window": true
										},
										"customer": {
											"locale": "nl_NL",
											"ip_address": "84.71.117.69",
											"forwarded_ip": "",
											"first_name": "John",
											"last_name": "Doe",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "1/XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"email": "example@multisafepay.com",
											"referrer": "https://example.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										},
										"delivery": {
											"first_name": "John",
											"last_name": "Doe",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "1/XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"phone": "0612345678",
											"email": "example@multisafepay.com"
										},
										"gateway_info": {
											"birthday": "1970-07-10",
											"gender": "male",
											"phone": "0612345678",
											"email": "example@multisafepay.com"
										},
										"shopping_cart": {
											"items": [
												{
													"name": "Test",
													"description": "",
													"unit_price": 100,
													"quantity": 1,
													"merchant_item_id": "1111",
													"tax_table_selector": "none",
													"weight": {
														"unit": "KG",
														"value": "12"
													}
												}
											]
										},
										"checkout_options": {
											"tax_tables": {
												"default": {
													"shipping_taxed": "false",
													"rate": 0
												},
												"alternate": [
													{
														"name": "none",
														"standalone": false,
														"rules": [
															{
																"rate": 0
															}
														]
													},
													{
														"name": "FEE",
														"standalone": false,
														"rules": [
															{
																"rate": 0
															}
														]
													}
												]
											}
										}
									}
								},
								"Klarna direct": {
									"summary": "Klarna direct",
									"value": {
										"type": "direct",
										"gateway": "KLARNA",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "9430",
										"description": "Order Klarna test NL",
										"var1": "",
										"var2": "",
										"var3": "",
										"items": "",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": true
										},
										"plugin": {
											"shop": "ApiTestTool",
											"plugin_version": "1.0.0",
											"shop_version": "1",
											"partner": "parner",
											"shop_root_url": "http://multisafepay.com"
										},
										"customer": {
											"locale": "us",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "1/XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"email": "example@multisafepay.com",
											"referrer": "http://multisafepay-demo.com/plugingroup/dev/magento/1901/checkout/cart/",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										},
										"delivery": {
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "1/XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"phone": "0612345678",
											"email": "example@multisafepay.com"
										},
										"gateway_info": {
											"birthday": "1970-07-10",
											"gender": "male",
											"phone": "0612345678",
											"email": "example@multisafepay.com"
										},
										"shopping_cart": {
											"items": [
												{
													"name": "Article 1",
													"description": "Test article",
													"unit_price": 10,
													"quantity": 3,
													"merchant_item_id": 1,
													"tax_table_selector": "21.000",
													"weight": {
														"unit": null,
														"value": null
													}
												},
												{
													"name": "Article 2",
													"description": "Test article",
													"unit_price": 50,
													"quantity": 1,
													"merchant_item_id": 2,
													"tax_table_selector": "default",
													"weight": {
														"unit": null,
														"value": null
													}
												},
												{
													"name": "Shipping",
													"description": "24h Mail service",
													"unit_price": 5,
													"quantity": 1,
													"merchant_item_id": "msp-shipping",
													"tax_table_selector": "0.000",
													"weight": {
														"unit": null,
														"value": null
													}
												}
											]
										},
										"checkout_options": {
											"tax_tables": {
												"default": {
													"shipping_taxed": null,
													"rate": 0.06
												},
												"alternate": [
													{
														"standalone": false,
														"name": "21.000",
														"rules": [
															{
																"rate": 0.21,
																"country": "NL"
															}
														]
													},
													{
														"standalone": false,
														"name": "0.000",
														"rules": [
															{
																"rate": 0,
																"country": "NL"
															}
														]
													}
												]
											}
										},
										"google_analytics": {
											"account": "UA-XXXXXXXXX"
										}
									}
								},
								"Maestro redirect": {
									"summary": "Maestro redirect",
									"value": {
										"type": "redirect",
										"gateway": "MAESTRO",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "100",
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": ""
										},
										"customer": {
											"locale": "nl",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"birthday": "10071970",
											"gender": "male",
											"phone": "0612345678",
											"email": "example@multisafepay.com",
											"referrer": "http://test.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										}
									}
								},
								"Mastercard redirect": {
									"summary": "Mastercard redirect",
									"value": {
										"type": "redirect",
										"gateway": "MASTERCARD",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "100",
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": ""
										},
										"customer": {
											"locale": "nl",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"birthday": "10071970",
											"gender": "male",
											"phone": "0612345678",
											"email": "example@multisafepay.com",
											"referrer": "http://test.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										}
									}
								},
								"Pay After Delivery redirect": {
									"summary": "Pay After Delivery redirect",
									"value": {
										"type": "redirect",
										"gateway": "PAYAFTER",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": 1000,
										"description": "Test order description",
										"payment_options": {
											"notification_url": "https://www.example.com/client/notification?type=notification",
											"redirect_url": "https://www.example.com/client/notification?type=redirect",
											"cancel_url": "https://www.example.com/client/notification?type=cancel",
											"close_window": true
										},
										"customer": {
											"locale": "nl_NL"
										}
									}
								},
								"Pay After Delivery direct": {
									"summary": "Pay After Delivery direct",
									"value": {
										"type": "direct",
										"gateway": "PAYAFTER",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "26000",
										"description": "Test Order Description",
										"var1": "",
										"var2": "",
										"var3": "",
										"items": "",
										"manual": "false",
										"gateway_info": {
											"birthday": "1980-01-30",
											"bank_account": "0417164300",
											"phone": "0208500500",
											"email": "example@multisafepay.com"
										},
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": ""
										},
										"plugin": {
											"shop": "ApiTestTool",
											"plugin_version": "1.0.0",
											"shop_version": "1",
											"partner": "parner",
											"shop_root_url": "http://multisafepay.com"
										},
										"customer": {
											"locale": "us",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "39c",
											"zip_code": "1033 SC",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"email": "example@multisafepay.com",
											"referrer": "http://multisafepay-demo.com/plugingroup/dev/magento/1901/checkout/cart/",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										},
										"delivery": {
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "39c",
											"zip_code": "1033 SC",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"phone": "",
											"email": ""
										},
										"shopping_cart": {
											"items": [
												{
													"name": "Geometric Candle Holders",
													"description": "",
													"unit_price": "90",
													"quantity": "2",
													"merchant_item_id": "111111",
													"tax_table_selector": "none",
													"weight": {
														"unit": "KG",
														"value": "12"
													}
												},
												{
													"name": "Nice apple",
													"description": "",
													"unit_price": "35",
													"quantity": "2",
													"merchant_item_id": "333333",
													"tax_table_selector": "none",
													"weight": {
														"unit": "KG",
														"value": "20"
													}
												},
												{
													"name": "Flat Rate - Fixed",
													"description": "Shipping",
													"unit_price": "10",
													"quantity": "1",
													"merchant_item_id": "msp-shipping",
													"tax_table_selector": "none",
													"weight": {
														"unit": "KG",
														"value": "0"
													}
												}
											]
										},
										"checkout_options": {
											"tax_tables": {
												"default": {
													"shipping_taxed": "true",
													"rate": "0.21"
												},
												"alternate": [
													{
														"name": "BTW21",
														"standalone": true,
														"rules": [
															{
																"rate": "0.21"
															}
														]
													},
													{
														"name": "BTW6",
														"standalone": true,
														"rules": [
															{
																"rate": "0.06"
															}
														]
													},
													{
														"name": "BTW0",
														"standalone": true,
														"rules": [
															{
																"rate": "0.00"
															}
														]
													},
													{
														"name": "0.0000",
														"standalone": false,
														"rules": [
															{
																"rate": "0"
															}
														]
													},
													{
														"name": "0.0000",
														"standalone": false,
														"rules": [
															{
																"rate": "0"
															}
														]
													},
													{
														"name": "FEE",
														"standalone": false,
														"rules": [
															{
																"rate": "0.00"
															}
														]
													},
													{
														"name": "none",
														"standalone": false,
														"rules": [
															{
																"rate": "0.00"
															}
														]
													},
													{
														"name": "2",
														"standalone": true,
														"rules": [
															{
																"rate": "0.0825",
																"country": "US"
															},
															{
																"rate": "0.08375",
																"country": "US"
															}
														]
													}
												]
											}
										}
									}
								},
								"PayPal redirect": {
									"summary": "PayPal redirect",
									"value": {
										"type": "redirect",
										"gateway": "PAYPAL",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "100",
										"description": "Test Order Description",
										"var1": "",
										"var2": "",
										"var3": "",
										"items": "2 x : GEOMETRIC CANDLE HOLDERS",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": ""
										},
										"plugin": {
											"shop": "ApiTestTool",
											"plugin_version": "1.0.0",
											"shop_version": "1",
											"partner": "parner",
											"shop_root_url": "http://multisafepay.com"
										},
										"customer": {
											"locale": "us",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Test name",
											"last_name": "Test Last name",
											"address1": "address 1",
											"address2": "address 2",
											"house_number": "22",
											"zip_code": "29000",
											"city": "marbella",
											"state": "Malaga",
											"country": "ES",
											"phone": "66633311155",
											"email": "example@multisafepay.com",
											"referrer": "http://multisafepay-demo.com/plugingroup/dev/magento/1901/checkout/cart/",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										},
										"delivery": {
											"first_name": "First name delivery",
											"last_name": "Las name Dl.",
											"address1": "del. address",
											"address2": "address 3",
											"house_number": "",
											"zip_code": "29600",
											"city": "my city",
											"state": "",
											"country": "",
											"phone": "",
											"email": ""
										}
									}
								},
								"PayPal direct": {
									"summary": "PayPal direct",
									"value": {
										"type": "direct",
										"gateway": "PAYPAL",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": 1000,
										"description": "Test order description",
										"manual": false,
										"payment_options": {
											"notification_url": "https://www.example.com/client/notification?type=notification",
											"redirect_url": "https://www.example.com/client/notification?type=redirect",
											"cancel_url": "https://www.example.com/client/notification?type=cancel",
											"close_window": true
										},
										"customer": {
											"locale": "nl_NL",
											"ip_address": "123.123.123.123",
											"forwarded_ip": "",
											"first_name": "Simon",
											"last_name": "Smit",
											"address1": "Kraanspoor",
											"house_number": "39C",
											"zip_code": "1033SC",
											"city": "Amsterdam",
											"state": "NH",
											"country": "NL",
											"phone": "0208500500",
											"email": "simonsmit@example.com",
											"referrer": "https://example.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										}
									}
								},
								"Postepay redirect": {
									"summary": "Postepay redirect",
									"value": {
										"type": "redirect",
										"gateway": "VISA",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": 1000,
										"description": "Test order description",
										"payment_options": {
											"notification_url": "https://www.example.com/client/notification?type=notification",
											"redirect_url": "https://www.example.com/client/notification?type=redirect",
											"cancel_url": "https://www.example.com/client/notification?type=cancel",
											"close_window": true
										},
										"customer": {
											"locale": "it_IT",
											"ip_address": "123.123.123.123"
										}
									}
								},
								"Request to Pay redirect": {
									"summary": "Request to Pay redirect",
									"value": {
										"type": "redirect",
										"gateway": "DBRTP",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "100",
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": ""
										},
										"customer": {
											"locale": "nl",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"birthday": "10071970",
											"gender": "male",
											"phone": "0612345678",
											"email": "example@multisafepay.com",
											"referrer": "http://test.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										}
									}
								},
								"Request to Pay direct": {
									"summary": "Request to Pay direct",
									"value": {
										"type": "direct",
										"gateway": "DBRTP",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "100",
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed"
										}
									}
								},
								"SEPA Direct Debit redirect": {
									"summary": "SEPA Direct Debit redirect",
									"value": {
										"type": "redirect",
										"gateway": "DIRDEB",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "100",
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": ""
										},
										"customer": {
											"locale": "nl",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"birthday": "10071970",
											"gender": "male",
											"phone": "0612345678",
											"email": "example@multisafepay.com",
											"referrer": "http://test.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										}
									}
								},
								"SEPA Direct Debit direct": {
									"summary": "SEPA Direct Debit direct",
									"value": {
										"type": "direct",
										"gateway": "DIRDEB",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "100",
										"description": "Test order description",
										"var1": "",
										"var2": "",
										"var3": "",
										"items": "2 x : GEOMETRIC CANDLE HOLDERS",
										"manual": "false",
										"gateway_info": {
											"account_id": "NL87ABNA0000000001",
											"account_holder_name": "J Janse",
											"account_holder_city": "Amsterdam",
											"account_holder_country": "NL",
											"account_holder_iban": "NL87ABNA0000000001",
											"account_holder_bic": "NL",
											"emandate": "madateID"
										},
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": true
										},
										"plugin": {
											"shop": "ApiTestTool",
											"plugin_version": "1.0.0",
											"shop_version": "1",
											"partner": "parner",
											"shop_root_url": "http://multisafepay.com"
										},
										"customer": {
											"locale": "en",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"firs_tname": "Test name",
											"last_name": "Test Last name",
											"address1": "address 1",
											"address2": "address 2",
											"house_number": "22",
											"zip_code": "29000",
											"city": "marbella",
											"state": "Malaga",
											"country": "ES",
											"phone": "66633311155",
											"email": "example@multisafepay.com",
											"referrer": "http://multisafepay-demo.com/plugingroup/dev/magento/1901/checkout/cart/",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										},
										"delivery": {
											"first_name": "First name delivery",
											"last_name": "Las name Dl.",
											"address1": "del. address",
											"address2": "address 3",
											"house_number": "",
											"zip_code": "29600",
											"city": "my city",
											"state": "",
											"country": "",
											"phone": "",
											"email": ""
										}
									}
								},
								"Sofort redirect": {
									"summary": "Sofort redirect",
									"value": {
										"type": "redirect",
										"gateway": "DIRECTBANK",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "100",
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": ""
										},
										"customer": {
											"locale": "nl",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"birthday": "10071970",
											"gender": "male",
											"phone": "0612345678",
											"email": "example@multisafepay.com",
											"referrer": "http://test.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										}
									}
								},
								"Sofort direct": {
									"summary": "Sofort direct",
									"value": {
										"type": "direct",
										"gateway": "DIRECTBANK",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "123",
										"description": "This is a product description",
										"customer": {
											"locale": "nl_NL",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "First",
											"last_name": "Last",
											"address1": "Address",
											"address2": "",
											"house_number": "123",
											"zip_code": "12345",
											"city": "City",
											"state": "",
											"country": "NL",
											"phone": "",
											"email": "example@multisafepay.com"
										},
										"gateway_info": {
											"account_id": "0417164300",
											"account_holder_name": "J Jansen",
											"account_holder_city": "Amsterdam",
											"account_holder_country": "NL",
											"account_holder_iban": "iban",
											"account_holder_bic": "NL"
										}
									}
								},
								"Trustly redirect": {
									"summary": "Trustly redirect",
									"value": {
										"type": "redirect",
										"gateway": "TRUSTLY",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "100",
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": ""
										},
										"customer": {
											"locale": "nl",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"birthday": "10071970",
											"gender": "male",
											"phone": "0612345678",
											"email": "example@multisafepay.com",
											"referrer": "http://test.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										}
									}
								},
								"Trustly direct": {
									"summary": "Trustly direct",
									"value": {
										"type": "direct",
										"gateway": "TRUSTLY",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": 1000,
										"description": "product description",
										"custom_info": {},
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed"
										},
										"customer": {
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"country": "NL",
											"email": "example@multisafepay.com"
										}
									}
								},
								"TrustPay redirect": {
									"summary": "TrustPay redirect",
									"value": {
										"type": "redirect",
										"gateway": "TRUSTPAY",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "100",
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": ""
										},
										"customer": {
											"locale": "nl",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"birthday": "10071970",
											"gender": "male",
											"phone": "0612345678",
											"email": "example@multisafepay.com",
											"referrer": "http://test.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										}
									}
								},
								"Visa redirect": {
									"summary": "Visa redirect",
									"value": {
										"type": "redirect",
										"gateway": "VISA",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "100",
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": ""
										},
										"customer": {
											"locale": "nl",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"birthday": "10071970",
											"gender": "male",
											"phone": "0612345678",
											"email": "example@multisafepay.com",
											"referrer": "http://test.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										}
									}
								},
								"WeChat Pay redirect": {
									"summary": "WeChat Pay redirect",
									"value": {
										"type": "redirect",
										"gateway": "WECHAT",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "100",
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"close_window": ""
										},
										"customer": {
											"locale": "nl",
											"ip_address": "213.127.71.75",
											"forwarded_ip": "",
											"first_name": "Testperson-nl",
											"last_name": "Approved",
											"address1": "Neherkade",
											"address2": "",
											"house_number": "XI",
											"zip_code": "2521VA",
											"city": "Gravenhage",
											"state": "",
											"country": "NL",
											"birthday": "10071970",
											"gender": "male",
											"phone": "0612345678",
											"email": "example@multisafepay.com",
											"referrer": "http://test.com",
											"user_agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
										}
									}
								},
								"WeChat Pay direct": {
									"summary": "WeChat Pay direct",
									"value": {
										"type": "direct",
										"gateway": "WECHAT",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": 100,
										"description": "product description",
										"custom_info": {},
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed"
										}
									}
								},
								"FastCheckout": {
									"summary": "FastCheckout",
									"value": {
										"type": "checkout",
										"gateway": "",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": 37485,
										"description": "Test Order Description",
										"manual": "false",
										"payment_options": {
											"notification_url": "https://www.example.com/webhooks/payment",
											"redirect_url": "https://www.example.com/order/success",
											"cancel_url": "https://www.example.com/order/failed",
											"settings": {
												"fco": {
													"version": "1.0",
													"redirect_mode": null,
													"coupons": {
														"disabled": 1
													},
													"cart": {
														"disabled": 0
													},
													"shipping": {
														"address": {
															"required": 1
														},
														"invoice": {
															"enabled": 1
														}
													}
												}
											}
										},
										"customer": {
											"locale": "nl_NL",
											"first_name": "Test",
											"last_name": "Rejected",
											"address1": "Hogehilweg",
											"house_number": "8",
											"zip_code": "1101 CC",
											"city": "Amsterdam",
											"country": "NL",
											"email": "example@multisafepay.com"
										},
										"delivery": {
											"first_name": "Test",
											"last_name": "Rejected",
											"address1": "Hogehilweg",
											"house_number": "8",
											"zip_code": "1101 CC",
											"city": "Amsterdam",
											"country": "NL",
											"phone": "0612345678",
											"email": "example@multisafepay.com"
										},
										"shopping_cart": {
											"items": [
												{
													"name": "Geometric Candle Holders",
													"description": "",
													"unit_price": 90,
													"quantity": 3,
													"merchant_item_id": "1111",
													"tax_table_selector": "BTW21",
													"weight": {
														"unit": "KG",
														"value": "12"
													}
												},
												{
													"name": "Nice apple",
													"description": "",
													"unit_price": 35,
													"quantity": 1,
													"merchant_item_id": "666666",
													"tax_table_selector": "BTW9",
													"weight": {
														"unit": "KG",
														"value": "20"
													}
												},
												{
													"name": "Flat Rate - Fixed",
													"description": "Shipping",
													"unit_price": 10,
													"quantity": 1,
													"merchant_item_id": "msp-shipping",
													"tax_table_selector": "none",
													"weight": {
														"unit": "KG",
														"value": "0"
													}
												}
											]
										},
										"checkout_options": {
											"shipping_methods": {
												"pickup": {
													"name": "PostNL pickup points",
													"provider": "PostNL",
													"price": "6"
												},
												"flat_rate_shipping": [
													{
														"name": "TNT - verzending NL",
														"price": "7",
														"allowed_areas": [
															"NL",
															"ES"
														]
													},
													{
														"name": "Seur - Spain",
														"price": "7",
														"allowed_areas": [
															"NL",
															"ES"
														]
													},
													{
														"name": "TNT - verzending BE en FR",
														"price": "12",
														"excluded_areas": [
															"NL",
															"FR",
															"ES"
														]
													}
												]
											},
											"tax_tables": {
												"default": {
													"shipping_taxed": "true",
													"rate": 0.21
												},
												"alternate": [
													{
														"name": "BTW21",
														"standalone": true,
														"rules": [
															{
																"rate": 0.21
															}
														]
													},
													{
														"name": "BTW9",
														"standalone": true,
														"rules": [
															{
																"rate": 0.09
															}
														]
													},
													{
														"name": "BTW6",
														"standalone": true,
														"rules": [
															{
																"rate": 0.06
															}
														]
													},
													{
														"name": "BTW0",
														"standalone": true,
														"rules": [
															{
																"rate": 0
															}
														]
													},
													{
														"name": "none",
														"standalone": false,
														"rules": [
															{
																"rate": 0
															}
														]
													},
													{
														"name": "FEE",
														"standalone": false,
														"rules": [
															{
																"rate": 0
															}
														]
													}
												]
											}
										}
									}
								},
								"Payment component": {
									"summary": "Payment component",
									"value": {
										"type": "direct",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": "100",
										"description": "Test order description",
										"customer": {
											"locale": "en_US",
											"country": "NL",
											"ip_address": "123.123.123.123",
											"reference": "Your customer reference"
										},
										"payment_options": {
											"notification_url": "https://www.example.com/client/notification?type=notification",
											"redirect_url": "https://www.example.com/client/notification?type=redirect",
											"cancel_url": "https://www.example.com/client/notification?type=cancel"
										},
										"payment_data": {
											"payload": "eyJnYXRld2F5IjoiSURFQUwiLCJjdXN0b21lciI6eyJicm93c2VyIjp7ImphdmFfZW5hYmxlZCI6MCwiamF2YXNjcmlwdF9lbmFibGVkIjoxLCJsYW5ndWFnZSI6ImVuLUdCIiwic2NyZWVuX2NvbG9yX2RlcHRoIjoyNCwic2NyZWVuX2hlaWdodCI6MTQ0MCwic2NyZWVuX3dpZHRoIjozNDQwLCJ0aW1lX3pvbmUiOi0xMjAsInVzZXJfYWdlbnQiOiJNb3ppbGxhLzUuMCAoTWFjaW50b3NoOyBJbnRlbCBNYWMgT1MgWCAxMF8xNV83KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvOTMuMC40NTc3LjYzIFNhZmFyaS81MzcuMzYiLCJjb29raWVzX2VuYWJsZWQiOjEsInBsYXRmb3JtIjoiTWFjSW50ZWwifSwibG9jYWxlIjoiZW5fVVMifSwiZmllbGRzIjp7ImV4dHZhcjgiOiIwMDMxIn0sImVuY3J5cHRlZCI6ZmFsc2UsImFwcGxpY2F0aW9uIjoiQVBJQ09OTkNPTVA6VjEifQ==",
											"gateway": "IDEAL"
										}
									}
								},
								"Recurring payments – Initial": {
									"summary": "Recurring payments – Initial",
									"value": {
										"type": "redirect",
										"gateway": "CREDITCARD",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": 1000,
										"description": "Initial recurring payments order, to create a token",
										"recurring_model": "unscheduled",
										"payment_options": {
											"notification_url": "https://www.example.com/client/notification?type=notification",
											"redirect_url": "https://www.example.com/client/notification?type=redirect",
											"cancel_url": "https://www.example.com/client/notification?type=cancel",
											"close_window": true
										},
										"customer": {
											"reference": "customer-00001"
										}
									}
								},
								"Recurring payments – Subsequent": {
									"summary": "Recurring payments – Subsequent",
									"value": {
										"type": "direct",
										"order_id": "my-order-id-1",
										"currency": "EUR",
										"amount": 1000,
										"description": "Subsequent recurring payments order, using a token",
										"recurring_id": "azbkvsE0up4",
										"recurring_model": "unscheduled",
										"payment_options": {
											"notification_url": "https://www.example.com/client/notification?type=notification",
											"redirect_url": "https://www.example.com/client/notification?type=redirect",
											"cancel_url": "https://www.example.com/client/notification?type=cancel",
											"close_window": true
										},
										"customer": {
											"reference": "customer-00001"
										}
									}
								},
								"Dynamic template": {
									"summary": "Dynamic template",
									"value": {
										"type": "redirect",
										"order_id": "my-order-id-1",
										"gateway": "",
										"currency": "EUR",
										"amount": 1000,
										"description": "Test order description",
										"manual": false,
										"payment_options": {
											"notification_url": "https://www.example.com/client/notification?type=notification",
											"redirect_url": "https://www.example.com/client/notification?type=redirect",
											"cancel_url": "https://www.example.com/client/notification?type=cancel",
											"template_id": "123456",
											"template": {
												"version": "1.0",
												"settings": {
													"hide_logo": false,
													"hide_flags": false,
													"hide_powered": false,
													"hide_cart": false,
													"hide_btn_cancel": false,
													"hide_cc_logos": false,
													"hide_btn_all_methods": false
												},
												"header": {
													"logo": {
														"image": ""
													},
													"cover": {
														"image": ""
													},
													"background": "",
													"text": "#333"
												},
												"body": {
													"text": "#ab141b",
													"background": "#fdfcfc",
													"link": {
														"text": "#00acf1",
														"hover": {
															"text": "",
															"border": ""
														}
													}
												},
												"container": {
													"text": "#ffffff",
													"label": "#a4a3a3",
													"background": "#080808",
													"link": {
														"text": ""
													}
												},
												"cart": {
													"text": "#333333",
													"label": "#8b8b8b",
													"background": "#ffffff",
													"border": "#333333"
												},
												"payment_form": {
													"text": "#ab141b",
													"background": "#ffffff",
													"border": "#333333",
													"inputs": {
														"border": "#bdbbbb",
														"label": "#8b8b8b"
													}
												},
												"buttons": {
													"payment_method": {
														"background": "#ffffff",
														"text": "#ab141b",
														"border": "#333333",
														"hover": {
															"background": "#ab141b",
															"text": "#ffffff",
															"border": ""
														},
														"active": {
															"background": "",
															"text": "",
															"border": ""
														}
													},
													"secondary": {
														"background": "#00acf1",
														"text": "#ffffff",
														"hover": {
															"background": "",
															"text": ""
														}
													},
													"primary": {
														"background": "#cccccc",
														"text": "#ffffff",
														"hover": {
															"background": "",
															"text": ""
														}
													}
												}
											}
										},
										"customer": {
											"email": "simonsmit@example.com"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Request successful",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"type": {
											"description": "- `redirect`: Redirects the customer to a [MultiSafepay payment page](https://docs.multisafepay.com/payment-pages/), where they can select a payment method and complete payment. \n- `direct`: Redirects the customer to an authentication or success page, depending on the payment method. \n- `paymentlink`: Creates a [payment link](https://docs.multisafepay.com/payment-links/).\n- `checkout`: Creates a FastCheckout order.\n\nFor more information, see [Direct vs redirect API requests](https://docs.multisafepay.com/developer/direct-vs-redirect).\n",
											"type": "string",
											"enum": [
												"direct",
												"redirect",
												"checkout",
												"paymentlink"
											],
											"example": "redirect"
										},
										"gateway": {
											"allOf": [
												{
													"description": "The unique gateway identifier for the payment method.<br><br>If unset, and `type` is set to `redirect`, If unset, the payment page displays **all** available payment methods."
												},
												{
													"type": "string"
												},
												{
													"example": "IDEAL"
												},
												{
													"enum": [
														"AFTERPAY",
														"ALIPAY",
														"AMEX",
														"APPLEPAY",
														"BANKTRANS",
														"BELFIUS",
														"CBC",
														"CREDITCARD",
														"DBRTP",
														"DIREB",
														"DIRECTBANK",
														"DOTPAY",
														"EINVOICE",
														"EPS",
														"GIROPAY",
														"GOOGLEPAY",
														"IDEAL",
														"IDEALQR",
														"IN3",
														"KBC",
														"KLARNA",
														"MAESTRO",
														"MASTERCARD",
														"MISTERCASH",
														"PAYAFTER",
														"PAYPAL",
														"SANTANDER",
														"TRUSTLY",
														"TRUSTPAY",
														"VISA",
														"WECHAT",
														"BABYCAD",
														"BEAUTYCAD",
														"BEAUTYWELL",
														"BIERCHEQUE",
														"BLOEMENCAD",
														"BOEKENBON",
														"BOEKENVOOR",
														"EDENCOM",
														"EDENECO",
														"EDENRES",
														"EDENSPORTS",
														"FASHIONCHQ",
														"FASHIONGFT",
														"GEZONDHEID",
														"GOOD4FUN",
														"HUISTUIN",
														"KIDSCADEAU",
														"KLUSCADEAU",
														"NATNLBIOSC",
														"NATENCRD",
														"NATNLETUIN",
														"OHMYGOOD",
														"SPORTENFIT",
														"SPORTSGIFT",
														"VVVGIFTCARD",
														"WIJNCADEAU",
														"YOURGIFT"
													]
												}
											]
										},
										"order_id": {
											"description": "Your unique (client-defined) identifier for the order.",
											"type": "string",
											"maxLength": 50,
											"example": "test-order-0001"
										},
										"currency": {
											"description": "The currency of the payment.",
											"type": "string",
											"maxLength": 3,
											"minLength": 3,
											"format": "ISO-4217 currency code",
											"example": "EUR"
										},
										"amount": {
											"description": "The payment amount in the currency's smallest unit:\n\n- Decimal currencies: Value for 10 EUR = 1000 (1000 cents)\n- Zero-decimal currencies: Value for 10 YEN = 10\n",
											"type": "integer",
											"minimum": 0,
											"example": 1000
										},
										"description": {
											"description": "A description of the customer's order. Appears on MultiSafepay payment pages and customer bank statements (if supported by the bank)",
											"type": "string",
											"maxLength": 200,
											"example": "Test order description"
										},
										"payment_options": {
											"description": "Contains: \n\n- URLs to your success page and cancel page\n- Your [webhook endpoint](https://docs.multisafepay.com/developer/webhooks/)\n- Templates for styling [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/)\n- Settings for displaying available [gift cards](https://docs.multisafepay.com/payment-methods/gift-cards/)\n",
											"type": "object",
											"properties": {
												"notification_url": {
													"description": "The [webhook endpoint](https://docs.multisafepay.com/developer/webhooks/) for MultiSafepay to send status updates and other notifications for this website.",
													"type": "string",
													"format": "url",
													"maxLength": 150,
													"example": "https://www.examplewebsite.com/payment-updates/"
												},
												"notification_method": {
													"description": "Sets the webhook [notification method](https://docs.multisafepay.com/developer/webhooks/).\n\nWe recommend setting this to `POST` to reduce network load and increase security.\n",
													"type": "string",
													"enum": [
														"POST",
														"GET"
													],
													"default": "GET",
													"example": "POST"
												},
												"redirect_url": {
													"description": "The page customers are redirected to:\n\n- After **successful** payment, i.e. your success page, or thank you page\n- If the transaction status is [Uncleared](https://docs.multisafepay.com/about-payments/uncleared-transactions/) \n",
													"type": "string",
													"example": "https://www.example.com/test-order-0001/successful/"
												},
												"cancel_url": {
													"description": "The page customers are redirected to after **unsuccessful** payments.",
													"type": "string",
													"example": "https://www.example.com/test-order-0001/unsuccessful/"
												},
												"close_window": {
													"description": "Whether to display the MultiSafepay payment page in a new window that automatically closes after the customer completes payment.",
													"type": "boolean",
													"default": false,
													"example": false
												},
												"settings": {
													"description": "For [gift card](https://docs.multisafepay.com/payment-methods/gift-cards/) payments.",
													"type": "object",
													"properties": {
														"coupons": {
															"description": "Optional settings for gift cards.",
															"properties": {
																"allow": {
																	"description": "Specifies which gift cards the customer can pay with.",
																	"type": "array",
																	"example": "EDENCO",
																	"items": {
																		"type": "string",
																		"enum": [
																			"BABYCAD",
																			"BEAUTYWELL",
																			"BLOEMENCAD",
																			"BOEKENBON",
																			"DEGROTESPL",
																			"EDENCOM",
																			"EDENCO",
																			"EDENRES",
																			"EDENSPORTS",
																			"FASHIONCHQ",
																			"FASHIONGFT",
																			"FIETSENBON",
																			"GOOD4FUN",
																			"GEZONDHEID",
																			"NATNLBIOSC",
																			"NATNLETUIN",
																			"PARFUMCADE",
																			"SPORTENFIT",
																			"VRGIFTCARD",
																			"VVVGIFTCRD",
																			"WEBSHOPGFT",
																			"WIJNCADEAU",
																			"YOURGIFT"
																		]
																	}
																}
															}
														}
													}
												},
												"template_id": {
													"description": "Apply a template for styling [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/styling/).\n\nIf `payment_options.template` is also set, `payment_options.template` is used.\n",
													"type": "string"
												},
												"template": {
													"description": "Applies a template object structure for styling [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/styling/).\n\nOverrides the `payment_options.template_id`.\n",
													"properties": {
														"version": {
															"description": "The version of the template.",
															"type": "string"
														},
														"settings": {
															"description": "Sets whether to display or hide email elements, e.g. buttons, logos.",
															"type": "object",
															"properties": {
																"hide_logo": {
																	"description": "Whether to hide the email header logo.",
																	"type": "boolean"
																},
																"iframe_mode": {
																	"description": "Whether to hide iframe elements.",
																	"type": "boolean"
																},
																"hide_flags": {
																	"description": "Whether to hide the flags container.",
																	"type": "boolean"
																},
																"hide_powered": {
																	"description": "Whether to hide the powered link.",
																	"type": "boolean"
																},
																"hide_cart": {
																	"description": "Whether to hide the shopping cart container.",
																	"type": "boolean"
																},
																"hide_btn_cancel": {
																	"description": "Whether to hide the **Cancel** button.",
																	"type": "boolean"
																},
																"hide_cc_logos": {
																	"description": "Whether to hide credit card logos.",
																	"type": "boolean"
																},
																"hide_btn_all_methods": {
																	"description": "Whether to hide the **All methods** button.",
																	"type": "boolean"
																}
															}
														},
														"header": {
															"description": "Settings for the header logo, cover image, background, and font.",
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"logo": {
																		"description": "Your logo to display in the email header.",
																		"type": "object",
																		"properties": {
																			"image": {
																				"description": "The filename of the logo to display.",
																				"type": "string"
																			}
																		}
																	},
																	"cover": {
																		"description": "Resize the background image to cover the entire header container.",
																		"type": "object",
																		"properties": {
																			"image": {
																				"description": "The cover image.",
																				"type": "string"
																			}
																		}
																	},
																	"background": {
																		"description": "The header background.",
																		"type": "string"
																	},
																	"text": {
																		"description": "The header font color.",
																		"type": "string"
																	}
																}
															}
														},
														"body": {
															"description": "Settings for the email body.",
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"text": {
																		"description": "The body font color.",
																		"type": "string"
																	},
																	"background": {
																		"description": "The body background color.",
																		"type": "string"
																	},
																	"link": {
																		"description": "Settings for links in the email body.",
																		"type": "object",
																		"properties": {
																			"text": {
																				"description": "The link text color in the email body.",
																				"type": "string"
																			},
																			"hover": {
																				"description": "Settings for hovering over links in the email body.",
																				"type": "object",
																				"properties": {
																					"text": {
																						"description": "The link text color on hover in the body.",
																						"type": "string"
																					},
																					"border": {
																						"description": "The link border color on hover in the body.",
																						"type": "string"
																					}
																				}
																			}
																		}
																	}
																}
															}
														},
														"container": {
															"description": "Settings for the container element.",
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"text": {
																		"description": "The color of text in the container.",
																		"type": "string"
																	},
																	"background": {
																		"description": "The color of the container background.",
																		"type": "string"
																	},
																	"link": {
																		"description": "Settings for links in the container.",
																		"type": "object",
																		"properties": {
																			"text": {
																				"description": "The link text color in the container.",
																				"type": "string"
																			}
																		}
																	}
																}
															}
														},
														"cart": {
															"description": "Settings for the cart element.",
															"type": "object",
															"properties": {
																"text": {
																	"description": "The text color in the cart.",
																	"type": "string"
																},
																"label": {
																	"description": "The color of labels in the cart.",
																	"type": "string"
																},
																"background": {
																	"description": "The background color of the cart.",
																	"type": "string"
																},
																"border": {
																	"description": "The border color of the cart.",
																	"type": "string"
																}
															}
														},
														"payment_form": {
															"description": "Settings for the payment form in the email.",
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"text": {
																		"description": "The text color in the payment form.",
																		"type": "string"
																	},
																	"background": {
																		"description": "The background color of the payment form.",
																		"type": "string"
																	},
																	"border": {
																		"description": "The border color of the payment form.",
																		"type": "string"
																	},
																	"inputs": {
																		"description": "Settings for the payment form button.",
																		"type": "object",
																		"properties": {
																			"border": {
																				"description": "The color of the payment form button border.",
																				"type": "string"
																			},
																			"label": {
																				"description": "The call to action in the payment form button.",
																				"type": "string"
																			}
																		}
																	}
																}
															}
														},
														"buttons": {
															"description": "Settings for buttons in the email.",
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"payment_method": {
																		"description": "Settings for the payment method button.",
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"background": {
																					"description": "The payment method button background color.",
																					"type": "string"
																				},
																				"text": {
																					"description": "The payment method button text color.",
																					"type": "string"
																				},
																				"border": {
																					"description": "The payment method button border color.",
																					"type": "string"
																				},
																				"hover": {
																					"description": "Settings when hovering over the payment method button.",
																					"type": "object",
																					"properties": {
																						"background": {
																							"description": "The payment method button background color on hover.",
																							"type": "string"
																						},
																						"text": {
																							"description": "The payment method button text color on hover.",
																							"type": "string"
																						},
																						"border": {
																							"description": "The payment method button border color on hover.",
																							"type": "string"
																						}
																					}
																				},
																				"active": {
																					"description": "Settings for when the payment method button is active.",
																					"type": "object",
																					"properties": {
																						"background": {
																							"description": "The payment method button background color when active.",
																							"type": "string"
																						},
																						"text": {
																							"description": "The payment method button text color when active.",
																							"type": "string"
																						},
																						"border": {
																							"description": "The payment method button border color when active.",
																							"type": "string"
																						}
																					}
																				}
																			}
																		}
																	},
																	"secondary": {
																		"description": "Settings for the secondary button.",
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"background": {
																					"description": "The secondary button background color.",
																					"type": "string"
																				},
																				"text": {
																					"description": "The secondary button text color.",
																					"type": "string"
																				},
																				"hover": {
																					"description": "Settings for the secondary button on hover.",
																					"type": "object",
																					"properties": {
																						"background": {
																							"description": "The secondary button background color on hover.",
																							"type": "string"
																						},
																						"text": {
																							"description": "The secondary button text color on hover.",
																							"type": "string"
																						}
																					}
																				}
																			}
																		}
																	},
																	"primary": {
																		"description": "Settings for the primary button.",
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"background": {
																					"description": "The primary button background color.",
																					"type": "string"
																				},
																				"text": {
																					"description": "The primary button text color.",
																					"type": "string"
																				},
																				"hover": {
																					"description": "Settings for the primary button on hover.",
																					"type": "object",
																					"properties": {
																						"background": {
																							"description": "The primary button background color on hover.",
																							"type": "string"
																						},
																						"text": {
																							"description": "The primary button text color on hover.",
																							"type": "string"
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										},
										"customer": {
											"allOf": [
												{
													"type": "object",
													"description": "The customer’s personal information.\n\n**Required for**: All orders **except** Apple Pay and Google Pay, and Belfius, iDEAL, and WeChat Pay `direct` orders.\n",
													"properties": {
														"locale": {
															"type": "string",
															"description": "- Localizes [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/) for the customer’s language, region, available payment methods, and any UI preferences.\n- Sends [email templates](https://docs.multisafepay.com/features/email-templates/) in the customer's preferred language. If set, `locale` overrides the language set in an email template.\n- Displays local variants of payment methods, e.g. to display:\n  - [Cartes Bancaires](https://docs.multisafepay.com/payment-methods/cartes-bancaires), set to `fr_FR`.\n  - [Dankort](https://docs.multisafepay.com/payment-methods/dankort), set to `da_DK`.\n  - [Postepay](https://docs.multisafepay.com/payment-methods/postepay), set to `it_IT`.\n\n**Required for:** Bancontact\n\n|Locale|Language & country|\n|--------|--------|\n|`de_AT`|German Austria|\n|`de_DE`|German Germany|\n|`en_US`|American English|\n|`fi_FI`|Finnish|\n|`fr_BE`|French Belgium|\n|`it_IT`|Italian|\n|`nl_BE`|Dutch Belgium|\n|`nl_NL`|Dutch Netherlands|\n|`pl_PL`|Polish|\n|`es_ES`|Spanish|\n|`sv_SE`|Swedish|\n|`zh_CN`|Chinese|\n",
															"format": "ab_CD with ISO 639 language codes and ISO 3166 country codes",
															"enum": [
																"de_AT",
																"de_DE",
																"en_US",
																"fi_FI",
																"fr_BE",
																"it_IT",
																"nl_BE",
																"nl_NL",
																"pl_PL",
																"es_ES",
																"sv_SE",
																"zh_CN"
															],
															"example": "nl_NL",
															"default": "en_US"
														},
														"ip_address": {
															"description": "The customer’s IP address.\n\n**Required for:** Pay later, credit card, and Payment Component orders for our fraud check. If empty or incorrect (e.g. your IP address instead of the customer’s), the transaction status may be **Uncleared**, or even **Declined**.\n\n\n**Recommended** but not required for other payment methods.\n\nTo retrieve the customer's IP address if there is:\n- A proxy, use `forwarded_ip`.\n- No proxy, use `ip_address`.\n",
															"type": "string",
															"format": "IP address",
															"example": "123.123.123.123"
														},
														"forwarded_ip": {
															"description": "The [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For) header of the customer object when using a proxy.\n\nTo retrieve the customer's IP address if there is:\n- A proxy, use `forwarded_ip`.\n- No proxy, use `ip_address`.\n",
															"type": "string",
															"format": "IPv4"
														},
														"first_name": {
															"description": "The customer’s first name.\n\nWe recommend always requiring the customer to provide their full name, instead of initials or abbreviations.\n",
															"type": "string",
															"minLength": 2,
															"maxLength": 25,
															"example": "Simon"
														},
														"last_name": {
															"description": "The customer’s last name.",
															"type": "string",
															"minLength": 2,
															"maxLength": 25,
															"example": "Smit"
														},
														"gender": {
															"description": "The customer's gender.",
															"type": "string",
															"maxLength": 1,
															"enum": [
																"M",
																"F"
															],
															"example": "M"
														},
														"birthday": {
															"description": "The customer's date of birth.",
															"type": "string",
															"format": "yyyy-MM-dd",
															"example": "1980-12-31"
														},
														"address1": {
															"description": "The first line of the address.",
															"type": "string",
															"maxLength": 64,
															"example": "Kraanspoor"
														},
														"address2": {
															"description": "The second line of the address.",
															"type": "string",
															"maxLength": 64,
															"example": "39"
														},
														"house_number": {
															"description": "The house number of the address.",
															"type": "string",
															"maxLength": 10,
															"example": "39C"
														},
														"zip_code": {
															"description": "The ZIP code of the address.",
															"type": "string",
															"maxLength": 10,
															"example": "1033 SC"
														},
														"city": {
															"description": "The city of the address.",
															"type": "string",
															"maxLength": 50,
															"example": "Amsterdam"
														},
														"state": {
															"description": "The state of the address. \n\n**Required for:** PayPal Seller Protection\n",
															"type": "string",
															"maxLength": 6
														},
														"country": {
															"description": "The country of the address.\n\n**Required for:** Bank Transfer and PayPal Seller Protection\n",
															"type": "string",
															"format": "country alpha-2",
															"example": "NL"
														},
														"phone": {
															"description": "The customer’s phone number.",
															"type": "string",
															"maxLength": 24,
															"example": "0208500500"
														},
														"email": {
															"description": "The customer’s email address.\n\nUsed for [Second Chance](https://docs.multisafepay.com/features/second-chance/) emails and fraud checks.\n\n**Required for:** Bank Transfer\n",
															"type": "string",
															"example": "customer@emailprovider.com"
														},
														"user_agent": {
															"description": "The characteristic string that identifies the customer's browser.",
															"type": "string",
															"example": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
														},
														"referrer": {
															"description": "The unique identifier for where the customer/browser originates from.",
															"type": "string"
														},
														"reference": {
															"description": "Your unique client-defined identifier for your customer.\n\n**Required for:** [Recurring payments](https://docs.multisafepay.com/api/#recurring-payments-orders) orders, both initial and subsequent payments.\n",
															"type": "string",
															"example": "customer-0001"
														}
													}
												}
											]
										},
										"gateway_info": {
											"description": "Information specific to the payment method (gateway). \n\n**Required for:**\n\n- Credit and debit card orders\n- Apple Pay, Google Pay, and SEPA Direct Debit direct orders\n- Bancontact QR and iDEAL QR orders\n- AfterPay, E-Invoicing, in3, Klarna, and Pay After Delivery orders for credit checks in the Netherlands and Belgium\n- [Flexible 3D orders](https://docs.multisafepay.com/features/3d-secure/flexible/)\n- [MOTO orders](https://docs.multisafepay.com/features/moto/) \n",
											"type": "object",
											"properties": {
												"card_number": {
													"description": "The credit or debit card number.",
													"type": "string",
													"example": "4111111111111111"
												},
												"card_holder_name": {
													"description": "The cardholder's name.",
													"type": "string",
													"example": "John Doe"
												},
												"card_expiry_date": {
													"description": "The card expiry date.",
													"type": "integer",
													"format": "MMYY",
													"example": 1225
												},
												"card_cvc": {
													"description": "The card verification code (CVC) – a 3 or 4 digit number used as an additional security feature for card-not-present transactions.  \n\n**Required for:** All credit and debit card payments, **except** for Maestro and [Recurring payments](https://docs.multisafepay.com/features/recurring-payments/)\n",
													"type": "string",
													"example": "123"
												},
												"flexible_3d": {
													"description": "For Flexible 3D orders (**required**), whether or not 3D Secure authentication is required.",
													"type": "boolean",
													"example": true
												},
												"moto": {
													"description": "For MOTO orders (**required**), whether to create a MOTO order.",
													"type": "boolean",
													"example": false
												},
												"term_url": {
													"description": "For Flexible 3D orders (**required**), the URL that tells the card issuer where to redirect the authentication query.",
													"type": "string",
													"format": "URL",
													"example": "https://example.com/?type=term&api_key=<api_key>"
												},
												"issuer_id": {
													"description": "The unique identifier of the gateway issuer.\n\n**Required for:** `direct` orders\n",
													"type": "string",
													"example": "0021"
												},
												"payment_token": {
													"description": "**Required for:** Apple Pay `direct` orders, the JSON-encoded `payment.token` with the customer’s encrypted payment details, generated by the Apple Pay JS API.\n\n\nSee:\n\n- Apple Pay direct integration – [Create an order](https://docs.multisafepay.com/payments/methods/wallet/applepay/direct-integration/#client-side-integration-1) \n- Apple Developer – [ApplePayPaymentToken](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymenttoken)\n\n**Required for:** Google Pay `direct` orders, the payment token returned from the client-side Google Pay API request.\n\n\nAccess the token at `PaymentData.PaymentMethodData.PaymentMethodTokenizationData.token`.\n\n\nSee [Google Pay direct integration](https://docs.multisafepay.com/payments/methods/wallet/googlepay/direct-integration/).\n",
													"type": "string"
												},
												"qr_enabled": {
													"description": "Whether to generate a [Bancontact QR](https://docs.multisafepay.com/payment-methods/bancontact/) code.",
													"type": "boolean",
													"example": false
												},
												"qr_size": {
													"description": "For iDEAL QR orders, sets the width and height of the QR image in pixels. \n\n\nSizes are between 100 and 2000 pixels. If the value does not meet this rule, the default is used.\n\n\nDefault: 250 (250 by 250 pixels).\n",
													"type": "integer"
												},
												"allow_multiple": {
													"description": "For iDEAL QR orders, sets whether the QR code can be used more than once.",
													"type": "boolean",
													"example": false
												},
												"allow_change_amount": {
													"description": "For iDEAL QR orders, sets whether the customer can change the amount to pay. \n\nYou must then also set `min_amount` and `max_amount`.\n",
													"type": "boolean"
												},
												"min_amount": {
													"description": "For iDEAL QR orders, sets a minimum amount that the customer must pay.\n\n\nThe `min_amount` must be lower than the `amount`.\n\n\nIf `min_amount` is not set, but `max_amount` is set, then the `amount` value is used as the `min_amount`.\n\n\n**Required if:** `allow_change_amount` is set to true.\n",
													"type": "string"
												},
												"max_amount": {
													"description": "For iDEAL QR orders, sets a maximum amount that the customer can pay.\n\n\nThe `max_amount` must be higher than the `amount`.\n\n\nIf `max_amount` is not set, but `min_amount` is set, then the `amount` value is used as the `max_amount`.\n\n\n**Required if:** `allow_change_amount` is set to true.\n",
													"type": "string"
												},
												"account_id": {
													"description": "For SEPA Direct Debit `direct` orders (**required**), the international bank account number (IBAN).",
													"type": "string"
												},
												"account_holder_name": {
													"description": "For SEPA Direct Debit `direct` orders (**required**), the name of the account holder.",
													"type": "string"
												},
												"account_holder_iban": {
													"description": "For SEPA Direct Debit `direct` orders (**required**), the international bank account number (IBAN).",
													"type": "string"
												},
												"emandate": {
													"description": "For SEPA Direct Debit `direct` orders (**required**), the unique emandate identifier (for your own administration).",
													"type": "string"
												},
												"birthday": {
													"description": "For pay later orders (**required**), the customer’s date of birth.",
													"type": "string",
													"format": "yyyy-mm-dd"
												},
												"bank_account": {
													"description": "For pay later orders (**required**), the customer’s international bank account number (IBAN).",
													"type": "string"
												},
												"phone": {
													"description": "For pay later orders (**required**), the customer's phone number.",
													"type": "string"
												},
												"email": {
													"description": "For pay later orders (**required**), the customer's email address to send payment instructions to.",
													"type": "string"
												}
											}
										},
										"delivery": {
											"allOf": [
												{
													"description": "The customer's shipping address.",
													"type": "object",
													"properties": {
														"first_name": {
															"description": "The customer’s first name.\n\nWe recommend always requiring the customer to provide their full name, instead of initials or abbreviations.\n",
															"type": "string",
															"minLength": 2,
															"maxLength": 25,
															"example": "Simon"
														},
														"last_name": {
															"description": "The customer’s last name.",
															"type": "string",
															"minLength": 2,
															"maxLength": 25,
															"example": "Smit"
														},
														"address1": {
															"description": "The first line of the address.",
															"type": "string",
															"maxLength": 64,
															"example": "Kraanspoor"
														},
														"house_number": {
															"description": "The apartment number of the address.",
															"type": "string",
															"maxLength": 9,
															"example": "B"
														},
														"zip_code": {
															"description": "The ZIP code of the address.",
															"type": "string",
															"maxLength": 10,
															"example": "1033 SC"
														},
														"city": {
															"description": "The city of the address.",
															"type": "string",
															"maxLength": 50,
															"example": "Amsterdam"
														},
														"country": {
															"description": "The country of the address.",
															"type": "string",
															"format": "country alpha-2",
															"example": "NL"
														}
													}
												},
												{
													"required": [
														"address1",
														"city",
														"country",
														"first_name",
														"house_number",
														"last_name",
														"zip_code"
													]
												}
											]
										},
										"checkout_options": {
											"allOf": [
												{
													"description": "Settings for the shopping cart, including taxes and validation.",
													"type": "object",
													"properties": {
														"validate_cart": {
															"description": "If set to `true`, the value of `amount` is compared to the calculated total value of the shopping cart (returned as `order_total`).\n\nIf the values:\n\n- Match, the request is successful.\n- Don’t match, the request is unsuccessful and error_code 1027 is returned.\n",
															"type": "boolean",
															"default": false
														},
														"tax_tables": {
															"description": "Sets default VAT settings and creates VAT classes in the alternate array, which you can apply to individual shopping cart items.",
															"type": "object",
															"properties": {
																"default": {
																	"description": "The default VAT setting. Used when no value is set for `shopping_cart.items.tax_table_selector`.",
																	"type": "object",
																	"properties": {
																		"shipping_taxed": {
																			"description": "Sets whether or not the shipping costs are taxed.",
																			"type": "boolean"
																		},
																		"rate": {
																			"description": "The tax rate percentage as a fraction, e.g. 15% is expressed as `0.15`.",
																			"type": "number",
																			"format": "float",
																			"minimum": 0,
																			"example": 0.15
																		}
																	}
																},
																"alternate": {
																	"description": "An array of client-defined VAT classes that you can apply to items in the shopping cart.",
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"name": {
																				"description": "The client-defined ID. Applies tax settings to items in the shopping cart through the `shopping_cart.items.tax_table_selector` attribute.",
																				"type": "string"
																			},
																			"standalone": {
																				"description": "Sets whether or not the shipping costs are taxed.",
																				"type": "boolean"
																			},
																			"rules": {
																				"type": "array",
																				"items": {
																					"type": "object",
																					"properties": {
																						"rate": {
																							"description": "The tax rate percentage expressed as a fraction.",
																							"type": "number",
																							"format": "float",
																							"example": 0.0825,
																							"minimum": 0
																						},
																						"country": {
																							"description": "The country where the tax rate applies.",
																							"type": "string",
																							"format": "country alpha-2",
																							"example": "US"
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												},
												{
													"required": [
														"tax_tables"
													]
												}
											]
										},
										"shopping_cart": {
											"description": "The array of items in the customer's shopping cart, including the tax class as defined in `checkout_options`.\n\nIf you have a self-made integration, include the complete specification of the `shopping_cart`.\n",
											"type": "object",
											"properties": {
												"items": {
													"description": "The items in the customer's shopping cart. Specify the relevant tax ruling per item.",
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"name": {
																"description": "The name of the product or service.",
																"type": "string",
																"example": "Backpack"
															},
															"description": {
																"description": "A description of the product or service.",
																"type": "string",
																"example": "Black cotton backpack with logo."
															},
															"unit_price": {
																"description": "The unit price (in decimals) of the item, excluding VAT.\n\nThe currency of the shopping cart is set at order level using `currency`. \n\n**Example:** The value for a €90 backpack is `90`.\n",
																"type": "number",
																"format": "float",
																"example": 90
															},
															"quantity": {
																"description": "The number of units of the item.",
																"type": "integer",
																"example": 1
															},
															"merchant_item_id": {
																"description": "Your unique (client-defined) identifier for the product or service.\n\nIf this item specifies the shipping costs, set to `msp-shipping`.\n",
																"type": "string",
																"example": "12345678"
															},
															"tax_table_selector": {
																"description": "Your client-defined identifier for a tax table, specified as `checkout_options.tax_tables.alternate.name`.",
																"type": "string",
																"example": "VAT-21"
															},
															"weight": {
																"description": "The weight per product.",
																"type": "object",
																"properties": {
																	"unit": {
																		"description": "The unit of weight.",
																		"type": "string",
																		"enum": [
																			"KG"
																		],
																		"example": "KG"
																	},
																	"value": {
																		"description": "The weight of the item corresponding to the unit.\n\nFor a 2 kilogram product:\n- Set `value` to `2`.\n- Set `unit` to `KG`.\n",
																		"type": "number",
																		"example": 2
																	}
																}
															}
														}
													}
												}
											}
										},
										"items": {
											"description": "An HTML string to display the order items on the MultiSafepay payment page, instead of including a `shopping_cart`.",
											"type": "string",
											"example": "<ol><li>Article 1: € 1,95</li><li>Article 2: € 2,95</li><li>Article 3: € 3,95</li></ol>"
										},
										"payment_data": {
											"description": "Data for [Payment Component](https://docs.multisafepay.com/payment-components/) orders.",
											"type": "object",
											"properties": {
												"payload": {
													"description": "The response to the `getPaymentData()` Payment Component method.\n\nSee Payment Component integration manual – Step 3: Create an order:\n\n- [Single payment method](https://docs.multisafepay.com/payment-components/single/step-3/)\n- [Multiple payment methods](https://docs.multisafepay.com/payment-components/multiple/step-3/)\n",
													"type": "string"
												},
												"gateway": {
													"description": "The unique gateway identifier for the payment method.",
													"type": "string",
													"enum": [
														"AMEX",
														"BANKTRANS",
														"DIREB",
														"DIRECTBANK",
														"IDEAL",
														"MAESTRO",
														"MASTERCARD",
														"MISTERCASH",
														"PAYPAL",
														"VISA"
													]
												}
											}
										},
										"recurring_model": {
											"description": "For initial and subsequent [Recurring payments](https://docs.multisafepay.com/features/recurring-payments/) (**required**), sets the recurring model:\n\n- Card on file (COF): The cardholder has authorized you to store their card details.\n- Subscription: An agreement or services that are billed at the end of your billing cycle, e.g. weekly, monthly.\n- Unscheduled: Event-triggered, e.g. mobile top-up when no credit left on the phone.\n",
											"type": "string",
											"enum": [
												"cardonfile",
												"subscription",
												"unscheduled"
											],
											"example": "cardonfile"
										},
										"recurring_id": {
											"description": "For subsequent [Recurring payments](https://docs.multisafepay.com/features/recurring-payments/) (**required**), the unique identifier of the recurring payment.",
											"type": "string",
											"example": "133761993_gTp2"
										},
										"capture": {
											"description": "For [Manual Capture](https://docs.multisafepay.com/features/manual-capture/) orders (**required**).",
											"enum": [
												"manual"
											],
											"type": "string"
										},
										"affiliate": {
											"description": "For [Split Payments](https://docs.multisafepay.com/features/split-payments/) (**required**).",
											"type": "object",
											"properties": {
												"split_payments": {
													"description": "Split the amount of a transaction between partner/primary and affiliated accounts by a percentage, a fixed amount, or both.\n\nFor every split payment rule, add an object to the array.\n",
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"merchant": {
																"description": "The account ID of the affiliated account.",
																"type": "string",
																"example": 1001001
															},
															"fixed": {
																"description": "The amount to split in cents.",
																"type": "integer",
																"minimum": 1
															},
															"percentage": {
																"description": "A percentage of the amount to split.",
																"type": "number",
																"format": "float",
																"minimum": 1
															},
															"description": {
																"description": "A description of the split payment.",
																"type": "string"
															}
														}
													}
												}
											}
										},
										"second_chance": {
											"description": "For [Second Chance](https://docs.multisafepay.com/features/second-chance/).",
											"type": "object",
											"properties": {
												"send_mail": {
													"description": "Whether to send reminder emails if the customer doesn't complete payment.\n\n\n **Suppressing Second Chance emails after cancellation**\n\n\n When a customer places an order, goes to your checkout, doesn’t complete payment, but later returns and tries to pay again, some webshops create a second order. \n \n \n If Second Chance emails are enabled, the customer still receives emails for the first order, even after they complete payment for the second order.\n\n Cancelling the first order does **not** suppress Second Chance emails. To suppress emails, make an Update order details: CancelOrder request.\n",
													"type": "boolean"
												}
											}
										},
										"customer_verification": {
											"description": "For [credit card direct](https://docs.multisafepay.com/features/handling-cardholder-data/) orders.",
											"type": "object",
											"properties": {
												"html": {
													"description": "If 3D Secure authentication is:\n\n- Required: An HTML form is returned. You can either render the form and redirect the customer to it to pass authentication, or redirect them to the `payment_url` (recommended).\n- Not required: The [transaction status](https://docs.multisafepay.com/about-payments/multisafepay-statuses/) response is processed directly and no HTML form is returned.\n",
													"type": "string"
												},
												"type": {
													"description": "The type of response returned, i.e. a form.",
													"type": "string",
													"example": "form"
												}
											}
										},
										"custom_info": {
											"description": "Additional information about the order.",
											"type": "object",
											"properties": {
												"custom_1": {
													"description": "Information about the order.",
													"type": "string"
												},
												"custom_2": {
													"description": "Information about the order.",
													"type": "string"
												},
												"custom_3": {
													"description": "Information about the order.",
													"type": "string"
												}
											}
										},
										"days_active": {
											"description": "For `redirect` and `paymentlink` orders, sets the number of days the link to the MultiSafepay payment page is valid.\n\nThe link lifetime begins when the order is created, or the link is generated. A `session_id` is returned in the payment page URL.\n\nIf [Second Chance](https://docs.multisafepay.com/features/second-chance/) is enabled, we recommend a minimum lifetime of **48 hours**. Second Chance emails the customer 2 payment reminders: 1 hour and 24 hours after the order is created. If the lifetime is less than 24 hours, the link in the second email is no longer active when the customer receives it. \n\nSee `seconds_active` below. If `seconds_active` is also set, `seconds_active` is used. If neither is set, the default is used.\n",
											"type": "integer",
											"minimum": 1,
											"default": 30,
											"example": 30
										},
										"seconds_active": {
											"description": "For `redirect` and `paymentlink` orders, sets the number of seconds the link to the MultiSafepay payment page is valid.\n\nSee `days_active` above. If `days_active` is also set, `seconds_active` is used. If neither is set, the default is used.\n",
											"type": "integer",
											"minimum": 1,
											"default": 2592000
										},
										"var1": {
											"type": "string",
											"description": "Variable for storing additional data.",
											"maxLength": 500
										},
										"var2": {
											"type": "string",
											"description": "Variable for storing additional data.",
											"maxLength": 500
										},
										"var3": {
											"type": "string",
											"description": "Variable for storing additional data, including [Split Payments](https://docs.multisafepay.com/features/split-payments/) metadata.",
											"maxLength": 500
										},
										"plugin": {
											"description": "Information about your integration (useful for debugging).",
											"properties": {
												"shop": {
													"description": "The name of your ecommerce application.",
													"type": "string",
													"example": "My self-made integration"
												},
												"shop_version": {
													"description": "The version of your ecommerce application.",
													"type": "string"
												},
												"plugin_version": {
													"description": "The version of your integration.",
													"type": "string",
													"example": "1.0.0"
												},
												"partner": {
													"description": "The name of the third party that developed the ecommerce application (if relevant).",
													"type": "string"
												},
												"shop_root_url": {
													"description": "The root/base URL of the ecommerce application.",
													"type": "string",
													"example": "https://www.my-ecommerce.com"
												}
											}
										}
									},
									"type": "object"
								}
							}
						}
					}
				},
				"summary": "Create order",
				"tags": [
					"Payments"
				]
			}
		},
		"/orders/{order_id}": {
			"get": {
				"description": "Get information about an order.",
				"operationId": "getOrder",
				"parameters": [
					{
						"name": "order_id",
						"description": "The unique identifier of the order. \n\nMax length: 50 characters.\n",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request successful",
						"content": {
							"application/json": {
								"example": {
									"success": true,
									"data": {
										"transaction_id": 123456789,
										"order_id": "ORDER-12345",
										"created": "2019-03-01T16:12:47",
										"currency": "EUR",
										"amount": 200,
										"description": "Test order description",
										"items": null,
										"amount_refunded": 200,
										"status": "refunded",
										"financial_status": "completed",
										"reason": "Successful approval/completion",
										"reason_code": "",
										"fastcheckout": "NO",
										"modified": "2019-03-01T16:13:14",
										"customer": {
											"locale": "nl_NL",
											"first_name": "Simon",
											"last_name": "Smit",
											"address1": "Kraanspoor",
											"address2": "",
											"house_number": "39C",
											"zip_code": "1033SC",
											"city": "Amsterdam",
											"state": "NH",
											"country": "NL",
											"country_name": "The Netherlands",
											"phone1": "0208500500",
											"phone2": "00310000001",
											"email": "simonsmit@example.com"
										},
										"payment_details": {
											"recurring_id": "133761993_gTp2",
											"type": "VISA",
											"account_id": null,
											"account_holder_name": "Testperson-nl approved",
											"external_transaction_id": 906015000050,
											"last4": "1234",
											"card_expiry_date": 1904
										},
										"costs": [
											{
												"transaction_id": 123456789,
												"amount": 0.19,
												"description": "Refund order 258655825 for TEST TEST",
												"type": "internal",
												"created": "2019-03-01T16:14:02",
												"status": "completed"
											}
										],
										"related_transactions": [
											{
												"amount": 200,
												"costs": [
													{
														"amount": 19,
														"description": "EURO 0.19 per refund",
														"type": "SYSTEM",
														"currency": "EUR",
														"status": "reserved"
													}
												],
												"created": "2019-03-01T16:14:02",
												"currency": "EUR",
												"description": "Refund order 258655825 for TEST TEST",
												"modified": "2019-03-01T16:14:02",
												"status": "completed",
												"transaction_id": 123456789
											}
										],
										"payment_methods": [
											{
												"account_holder_name": "Testperson-nl approved",
												"amount": 200,
												"card_expiry_date": 1904,
												"currency": "EUR",
												"description": "Test order description",
												"external_transaction_id": 906015000050,
												"last4": 1234,
												"payment_description": "Visa",
												"status": "completed",
												"type": "VISA"
											}
										],
										"var1": null,
										"var2": null,
										"var3": null
									}
								},
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"description": "Indicates whether the request was successful.",
											"type": "boolean",
											"example": true
										},
										"data": {
											"description": "Information about the order. \n\nThe structure of the response may differ depending on the order type and payment method.\n",
											"type": "object",
											"properties": {
												"transaction_id": {
													"description": "MultiSafepay's unique identifier for the transaction (also known as the PSP ID).",
													"type": "string",
													"example": "123456789"
												},
												"order_id": {
													"description": "Your unique (client-defined) identifier for the order.",
													"type": "string",
													"maxLength": 50,
													"example": "test-order-0001"
												},
												"created": {
													"description": "The timestamp for when the order was created.",
													"type": "string",
													"example": "2019-03-01T16:14:02"
												},
												"currency": {
													"description": "The currency of the payment.",
													"type": "string",
													"maxLength": 3,
													"minLength": 3,
													"format": "ISO-4217 currency code",
													"example": "EUR"
												},
												"amount": {
													"description": "The payment amount in the currency's smallest unit:\n\n- Decimal currencies: Value for 10 EUR = 1000 (1000 cents)\n- Zero-decimal currencies: Value for 10 YEN = 10\n",
													"type": "integer",
													"minimum": 0,
													"example": 1000
												},
												"description": {
													"description": "A description of the customer's order. Appears on MultiSafepay payment pages and customer bank statements (if supported by the bank)",
													"type": "string",
													"maxLength": 200,
													"example": "Test order description"
												},
												"items": {
													"description": "An HTML string to display the order items on the MultiSafepay payment page, instead of including a `shopping_cart`.",
													"type": "string",
													"example": "<ol><li>Article 1: € 1,95</li><li>Article 2: € 2,95</li><li>Article 3: € 3,95</li></ol>"
												},
												"amount_refunded": {
													"description": "The amount refunded to the customer.",
													"type": "integer"
												},
												"status": {
													"description": "The [order status](https://docs.multisafepay.com/payments/multisafepay-statuses/).",
													"type": "string",
													"enum": [
														"cancelled",
														"completed",
														"declined",
														"expired",
														"initialized",
														"refunded",
														"reserved",
														"shipped",
														"uncleared",
														"void"
													],
													"example": "completed"
												},
												"financial_status": {
													"description": "The [transaction status](https://docs.multisafepay.com/payments/multisafepay-statuses/).",
													"type": "string",
													"enum": [
														"cancelled",
														"completed",
														"declined",
														"expired",
														"initialized",
														"uncleared",
														"void"
													]
												},
												"reason": {
													"description": "The reason for any updates to the order.",
													"type": "string"
												},
												"reason_code": {
													"description": "The code for the reason for any updates to the order.",
													"type": "string"
												},
												"fastcheckout": {
													"description": "Whether the order was processed using FastCheckout.",
													"type": "boolean",
													"example": false
												},
												"modified": {
													"description": "The timestamp for the most recent update.",
													"type": "string",
													"example": "2019-03-04T13:52:07"
												},
												"customer": {
													"type": "object",
													"description": "The customer’s personal information.\n\n**Required for**: All orders **except** Apple Pay and Google Pay, and Belfius, iDEAL, and WeChat Pay `direct` orders.\n",
													"properties": {
														"locale": {
															"type": "string",
															"description": "- Localizes [MultiSafepay payment pages](https://docs.multisafepay.com/payment-pages/) for the customer’s language, region, available payment methods, and any UI preferences.\n- Sends [email templates](https://docs.multisafepay.com/features/email-templates/) in the customer's preferred language. If set, `locale` overrides the language set in an email template.\n- Displays local variants of payment methods, e.g. to display:\n  - [Cartes Bancaires](https://docs.multisafepay.com/payment-methods/cartes-bancaires), set to `fr_FR`.\n  - [Dankort](https://docs.multisafepay.com/payment-methods/dankort), set to `da_DK`.\n  - [Postepay](https://docs.multisafepay.com/payment-methods/postepay), set to `it_IT`.\n\n**Required for:** Bancontact\n\n|Locale|Language & country|\n|--------|--------|\n|`de_AT`|German Austria|\n|`de_DE`|German Germany|\n|`en_US`|American English|\n|`fi_FI`|Finnish|\n|`fr_BE`|French Belgium|\n|`it_IT`|Italian|\n|`nl_BE`|Dutch Belgium|\n|`nl_NL`|Dutch Netherlands|\n|`pl_PL`|Polish|\n|`es_ES`|Spanish|\n|`sv_SE`|Swedish|\n|`zh_CN`|Chinese|\n",
															"format": "ab_CD with ISO 639 language codes and ISO 3166 country codes",
															"enum": [
																"de_AT",
																"de_DE",
																"en_US",
																"fi_FI",
																"fr_BE",
																"it_IT",
																"nl_BE",
																"nl_NL",
																"pl_PL",
																"es_ES",
																"sv_SE",
																"zh_CN"
															],
															"example": "nl_NL",
															"default": "en_US"
														},
														"ip_address": {
															"description": "The customer’s IP address.\n\n**Required for:** Pay later, credit card, and Payment Component orders for our fraud check. If empty or incorrect (e.g. your IP address instead of the customer’s), the transaction status may be **Uncleared**, or even **Declined**.\n\n\n**Recommended** but not required for other payment methods.\n\nTo retrieve the customer's IP address if there is:\n- A proxy, use `forwarded_ip`.\n- No proxy, use `ip_address`.\n",
															"type": "string",
															"format": "IP address",
															"example": "123.123.123.123"
														},
														"forwarded_ip": {
															"description": "The [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For) header of the customer object when using a proxy.\n\nTo retrieve the customer's IP address if there is:\n- A proxy, use `forwarded_ip`.\n- No proxy, use `ip_address`.\n",
															"type": "string",
															"format": "IPv4"
														},
														"first_name": {
															"description": "The customer’s first name.\n\nWe recommend always requiring the customer to provide their full name, instead of initials or abbreviations.\n",
															"type": "string",
															"minLength": 2,
															"maxLength": 25,
															"example": "Simon"
														},
														"last_name": {
															"description": "The customer’s last name.",
															"type": "string",
															"minLength": 2,
															"maxLength": 25,
															"example": "Smit"
														},
														"gender": {
															"description": "The customer's gender.",
															"type": "string",
															"maxLength": 1,
															"enum": [
																"M",
																"F"
															],
															"example": "M"
														},
														"birthday": {
															"description": "The customer's date of birth.",
															"type": "string",
															"format": "yyyy-MM-dd",
															"example": "1980-12-31"
														},
														"address1": {
															"description": "The first line of the address.",
															"type": "string",
															"maxLength": 64,
															"example": "Kraanspoor"
														},
														"address2": {
															"description": "The second line of the address.",
															"type": "string",
															"maxLength": 64,
															"example": "39"
														},
														"house_number": {
															"description": "The house number of the address.",
															"type": "string",
															"maxLength": 10,
															"example": "39C"
														},
														"zip_code": {
															"description": "The ZIP code of the address.",
															"type": "string",
															"maxLength": 10,
															"example": "1033 SC"
														},
														"city": {
															"description": "The city of the address.",
															"type": "string",
															"maxLength": 50,
															"example": "Amsterdam"
														},
														"state": {
															"description": "The state of the address. \n\n**Required for:** PayPal Seller Protection\n",
															"type": "string",
															"maxLength": 6
														},
														"country": {
															"description": "The country of the address.\n\n**Required for:** Bank Transfer and PayPal Seller Protection\n",
															"type": "string",
															"format": "country alpha-2",
															"example": "NL"
														},
														"phone": {
															"description": "The customer’s phone number.",
															"type": "string",
															"maxLength": 24,
															"example": "0208500500"
														},
														"email": {
															"description": "The customer’s email address.\n\nUsed for [Second Chance](https://docs.multisafepay.com/features/second-chance/) emails and fraud checks.\n\n**Required for:** Bank Transfer\n",
															"type": "string",
															"example": "customer@emailprovider.com"
														},
														"user_agent": {
															"description": "The characteristic string that identifies the customer's browser.",
															"type": "string",
															"example": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36"
														},
														"referrer": {
															"description": "The unique identifier for where the customer/browser originates from.",
															"type": "string"
														},
														"reference": {
															"description": "Your unique client-defined identifier for your customer.\n\n**Required for:** [Recurring payments](https://docs.multisafepay.com/api/#recurring-payments-orders) orders, both initial and subsequent payments.\n",
															"type": "string",
															"example": "customer-0001"
														}
													}
												},
												"payment_details": {
													"description": "Information about the payment.",
													"type": "object",
													"properties": {
														"account_holder_name": {
															"description": "The name of the account holder to be charged for the transaction.",
															"type": "string"
														},
														"account_id": {
															"description": "The international bank account number (IBAN).",
															"type": "string",
															"format": "iban",
															"example": "NL02ABNA0123456789"
														},
														"recurring_id": {
															"description": "For subsequent [Recurring payments](https://docs.multisafepay.com/features/recurring-payments/) (**required**), the unique identifier of the recurring payment.",
															"type": "string",
															"example": "133761993_gTp2"
														},
														"type": {
															"description": "The payment method.",
															"type": "string",
															"example": "DIRECTBANK"
														},
														"account_bic": {
															"description": "The bank identification code (BIC).",
															"type": "string",
															"example": "ABNANL2A"
														},
														"issuer_id": {
															"description": "The unique identifier of the issuer.\n\nSee `ListIdealIssuers`.\n",
															"type": "integer"
														},
														"external_transaction_id": {
															"description": "The order reference number of a third party, e.g. the payment method.",
															"type": "string"
														}
													}
												},
												"costs": {
													"type": "array",
													"items": {
														"description": "The fees for the transaction.",
														"type": "object",
														"properties": {
															"transaction_id": {
																"description": "MultiSafepay's unique identifier for the transaction (also known as the PSP ID).",
																"type": "string",
																"example": "123456789"
															},
															"amount": {
																"allOf": [
																	{
																		"description": "The payment amount in the currency's smallest unit:\n\n- Decimal currencies: Value for 10 EUR = 1000 (1000 cents)\n- Zero-decimal currencies: Value for 10 YEN = 10\n",
																		"type": "integer",
																		"minimum": 0,
																		"example": 1000
																	},
																	{
																		"example": 60
																	}
																]
															},
															"description": {
																"description": "A description of the transaction.",
																"type": "string",
																"example": "For VISA orders"
															},
															"type": {
																"type": "string",
																"enum": [
																	"SYSTEM",
																	"internal"
																],
																"example": "internal"
															},
															"created": {
																"description": "The timestamp for when the order was created.",
																"type": "string",
																"example": "2019-03-01T16:14:02"
															},
															"status": {
																"description": "The [order status](https://docs.multisafepay.com/payments/multisafepay-statuses/).",
																"type": "string",
																"enum": [
																	"cancelled",
																	"completed",
																	"declined",
																	"expired",
																	"initialized",
																	"refunded",
																	"reserved",
																	"shipped",
																	"uncleared",
																	"void"
																],
																"example": "completed"
															}
														}
													}
												},
												"related_transactions": {
													"type": "array",
													"items": {
														"description": "Information about related transactions.",
														"type": "object",
														"properties": {
															"amount": {
																"description": "The payment amount in the currency's smallest unit:\n\n- Decimal currencies: Value for 10 EUR = 1000 (1000 cents)\n- Zero-decimal currencies: Value for 10 YEN = 10\n",
																"type": "integer",
																"minimum": 0,
																"example": 1000
															},
															"costs": {
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"amount": {
																			"description": "The payment amount in the currency's smallest unit:\n\n- Decimal currencies: Value for 10 EUR = 1000 (1000 cents)\n- Zero-decimal currencies: Value for 10 YEN = 10\n",
																			"type": "integer",
																			"minimum": 0,
																			"example": 1000
																		},
																		"description": {
																			"description": "A description of the customer's order. Appears on MultiSafepay payment pages and customer bank statements (if supported by the bank)",
																			"type": "string",
																			"maxLength": 200,
																			"example": "Test order description"
																		},
																		"type": {
																			"type": "string",
																			"enum": [
																				"SYSTEM",
																				"internal"
																			],
																			"example": "internal"
																		},
																		"currency": {
																			"description": "The currency of the payment.",
																			"type": "string",
																			"maxLength": 3,
																			"minLength": 3,
																			"format": "ISO-4217 currency code",
																			"example": "EUR"
																		},
																		"status": {
																			"description": "The [order status](https://docs.multisafepay.com/payments/multisafepay-statuses/).",
																			"type": "string",
																			"enum": [
																				"cancelled",
																				"completed",
																				"declined",
																				"expired",
																				"initialized",
																				"refunded",
																				"reserved",
																				"shipped",
																				"uncleared",
																				"void"
																			],
																			"example": "completed"
																		}
																	}
																}
															},
															"created": {
																"description": "The timestamp for when the order was created.",
																"type": "string",
																"example": "2019-03-01T16:14:02"
															},
															"currency": {
																"description": "The currency of the payment.",
																"type": "string",
																"maxLength": 3,
																"minLength": 3,
																"format": "ISO-4217 currency code",
																"example": "EUR"
															},
															"description": {
																"description": "A description of the customer's order. Appears on MultiSafepay payment pages and customer bank statements (if supported by the bank)",
																"type": "string",
																"maxLength": 200,
																"example": "Test order description"
															},
															"modified": {
																"description": "The timestamp for the most recent update.",
																"type": "string",
																"example": "2019-03-04T13:52:07"
															},
															"status": {
																"description": "The [order status](https://docs.multisafepay.com/payments/multisafepay-statuses/).",
																"type": "string",
																"enum": [
																	"cancelled",
																	"completed",
																	"declined",
																	"expired",
																	"initialized",
																	"refunded",
																	"reserved",
																	"shipped",
																	"uncleared",
																	"void"
																],
																"example": "completed"
															},
															"transaction_id": {
																"description": "MultiSafepay's unique identifier for the transaction (also known as the PSP ID).",
																"type": "string",
																"example": "123456789"
															}
														}
													}
												},
												"payment_methods": {
													"type": "array",
													"items": {
														"description": "Information about the payment method.",
														"type": "object",
														"properties": {
															"account_holder_name": {
																"type": "string",
																"description": "The name of the account holder.",
																"example": "John Doe"
															},
															"amount": {
																"description": "The payment amount in the currency's smallest unit:\n\n- Decimal currencies: Value for 10 EUR = 1000 (1000 cents)\n- Zero-decimal currencies: Value for 10 YEN = 10\n",
																"type": "integer",
																"minimum": 0,
																"example": 1000
															},
															"card_expiry_date": {
																"description": "The card expiry date.",
																"type": "integer",
																"format": "MMYY",
																"example": 1225
															},
															"currency": {
																"description": "The currency of the payment.",
																"type": "string",
																"maxLength": 3,
																"minLength": 3,
																"format": "ISO-4217 currency code",
																"example": "EUR"
															},
															"description": {
																"description": "A description of the customer's order. Appears on MultiSafepay payment pages and customer bank statements (if supported by the bank)",
																"type": "string",
																"maxLength": 200,
																"example": "Test order description"
															},
															"external_transaction_id": {
																"description": "The order reference number of a third party, e.g. the payment method.",
																"type": "string"
															},
															"last4": {
																"description": "The last 4 digits of the card number.",
																"type": "integer",
																"example": 4444
															},
															"payment_description": {
																"description": "The payment method.",
																"type": "string"
															},
															"status": {
																"description": "The [order status](https://docs.multisafepay.com/payments/multisafepay-statuses/).",
																"type": "string",
																"enum": [
																	"cancelled",
																	"completed",
																	"declined",
																	"expired",
																	"initialized",
																	"refunded",
																	"reserved",
																	"shipped",
																	"uncleared",
																	"void"
																],
																"example": "completed"
															},
															"type": {
																"description": "The payment gateway.",
																"type": "string"
															}
														}
													}
												},
												"var1": {
													"type": "string",
													"description": "Variable for storing additional data.",
													"maxLength": 500
												},
												"var2": {
													"type": "string",
													"description": "Variable for storing additional data.",
													"maxLength": 500
												},
												"var3": {
													"type": "string",
													"description": "Variable for storing additional data, including [Split Payments](https://docs.multisafepay.com/features/split-payments/) metadata.",
													"maxLength": 500
												}
											}
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Order not found",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean",
											"example": false
										},
										"data": {
											"description": "Empty",
											"type": "object",
											"example": ""
										},
										"error_code": {
											"description": "1006",
											"type": "integer",
											"example": 1006
										},
										"error_info": {
											"description": "Invalid `order_id`. \n\n\nThe order ID must be unique. The ID you provided may have already been used for another order for that website (`site_id`).\n",
											"type": "string",
											"example": "Invalid transaction ID"
										}
									},
									"type": "object"
								}
							}
						}
					}
				},
				"summary": "Get order",
				"tags": [
					"Payments"
				]
			},
			"patch": {
				"description": "Update information about an order, or cancel it. \n\n**Note:** Use this request to change the status of pay later orders to **Shipped**.\n",
				"operationId": "updateOrder",
				"parameters": [
					{
						"name": "order_id",
						"description": "The unique identifier of the order. \n\nMax length: 50 characters.\n",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"oneOf": [
									{
										"type": "object",
										"properties": {
											"status": {
												"description": "The [order status](https://docs.multisafepay.com/payments/multisafepay-statuses/).\n\nTo communicate that you have shipped the order, set to `shipped`.\n",
												"type": "string",
												"example": "shipped"
											},
											"tracktrace_code": {
												"description": "The track and trace code provided by the shipping company.",
												"type": "string",
												"example": "3SYXTC0706148"
											},
											"tracktrace_url": {
												"description": "The track and trace URL provided by the shipping company.",
												"type": "string",
												"example": "https://tracktrace-url.com/"
											},
											"carrier": {
												"description": "The name of the shipping company.",
												"type": "string",
												"example": "DHL"
											},
											"ship_date": {
												"description": "The date you shipped the order.",
												"type": "string",
												"example": "01-01-1911"
											},
											"reason": {
												"description": "The reason for updating the order.",
												"type": "string",
												"example": "Fulfilled by warehouse"
											},
											"invoice_id": {
												"description": "Your unique identifier for the invoice, which appears in [reports](https://docs.multisafepay.com/business/accounting/reports/).",
												"type": "string",
												"maxLength": 50,
												"example": "AB123456"
											},
											"invoice_url": {
												"description": "The invoice URL to the `invoice_id`. \n",
												"type": "string",
												"example": "https://mspinvoice-AB12345.com"
											},
											"po_number": {
												"description": "The shipping company's purchase order number.",
												"type": "string",
												"example": "XY123456789"
											}
										},
										"required": [
											"status"
										]
									},
									{
										"type": "object",
										"description": "Cancel an order",
										"properties": {
											"status": {
												"description": "The [order status](https://docs.multisafepay.com/payments/multisafepay-statuses/).\n\nTo cancel the order and its underlying session, set to `cancelled`.  \n",
												"type": "string",
												"example": "cancelled"
											},
											"exclude_order": {
												"description": "Sets the outcome of the cancellation.\n\nTo cancel the order, set to `true`.\n",
												"type": "boolean",
												"example": true
											}
										},
										"required": [
											"status"
										]
									}
								]
							},
							"examples": {
								"Ship an order": {
									"value": {
										"status": "shipped",
										"tracktrace_code": "3SMSP0123456789",
										"tracktrace_url": "https://tracktrace-url.com/",
										"carrier": "MSP Logistics",
										"ship_date": "01-01-1911",
										"reason": "Fulfilled by warehouse",
										"invoice_id": "AB12345",
										"invoice_url": "https://mspinvoice-AB12345.com",
										"po_number": "XY123456789"
									}
								},
								"Cancel an order": {
									"value": {
										"status": "cancelled",
										"exclude_order": true
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Request successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"description": "Indicates whether the request was successful.",
											"type": "boolean",
											"example": true
										},
										"data": {
											"description": "Empty",
											"type": "object",
											"example": ""
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Order not found",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"description": "False",
											"type": "boolean",
											"example": "false"
										},
										"data": {
											"description": "Information about the error.",
											"type": "object",
											"example": []
										},
										"error_code": {
											"description": "The error code.",
											"type": "integer",
											"example": 1000
										},
										"error_info": {
											"description": "An explanation of the error.",
											"type": "string",
											"example": null
										}
									}
								}
							}
						}
					},
					"410": {
						"description": "Invalid request",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"description": "`false`\n",
											"type": "boolean",
											"example": false
										},
										"data": {
											"description": "Empty",
											"type": "object",
											"example": ""
										},
										"error_code": {
											"description": "1000",
											"type": "integer",
											"example": 1000
										},
										"error_info": {
											"description": "Not found. Check you provided the correct identifier.",
											"type": "string",
											"example": "Not found"
										}
									}
								}
							}
						}
					}
				},
				"summary": "Update or cancel order",
				"tags": [
					"Payments"
				]
			}
		},
		"/orders/{order_id}/capture": {
			"post": {
				"description": "Capture the full or a partial amount for a credit or debit card payment.",
				"operationId": "capturePayment",
				"parameters": [
					{
						"name": "order_id",
						"description": "The unique identifier of the order. \n\nMax length: 50 characters.\n",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"examples": {
								"Full capture": {
									"summary": "Full capture",
									"value": {
										"new_order_id": "my-order-id-01",
										"new_order_status": "completed",
										"invoice_id": "001",
										"tracktrace_code": "",
										"carrier": "",
										"reason": "",
										"description": ""
									}
								},
								"Partial capture": {
									"summary": "Partial capture",
									"value": {
										"amount": 2000,
										"new_order_id": "my-order-id-01",
										"new_order_status": "completed",
										"invoice_id": "",
										"tracktrace_code": "",
										"carrier": "",
										"reason": "",
										"description": ""
									}
								}
							},
							"schema": {
								"type": "object",
								"properties": {
									"amount": {
										"description": "The payment amount in the currency's smallest unit:\n\n- Decimal currencies: Value for 10 EUR = 1000 (1000 cents)\n- Zero-decimal currencies: Value for 10 YEN = 10 \n\n**Full captures:** Omit this parameter, or specify the original amount.\n\n**Partial captures:** Specify the amount to capture. \n",
										"type": "integer",
										"minimum": 0,
										"example": 10000
									},
									"new_order_id": {
										"description": "Your unique identifier for the capture order.",
										"type": "string",
										"maxLength": 50,
										"example": "my-order-id-01"
									},
									"new_order_status": {
										"description": "The [order status](https://docs.multisafepay.com/payments/multisafepay-statuses/).",
										"type": "string",
										"enum": [
											"cancelled",
											"completed",
											"declined",
											"expired",
											"initialized",
											"refunded",
											"reserved",
											"shipped",
											"uncleared",
											"void"
										],
										"example": "completed"
									},
									"invoice_id": {
										"description": "Your unique identifier for the invoice, which appears in [reports](https://docs.multisafepay.com/business/accounting/reports/).",
										"type": "string",
										"maxLength": 50,
										"example": "AB123456"
									},
									"tracktrace_code": {
										"description": "The track and trace code provided by the shipping company.",
										"type": "string",
										"example": "3SYXTC0706148"
									},
									"carrier": {
										"description": "The name of the shipping company.",
										"type": "string",
										"example": "DHL"
									},
									"reason": {
										"description": "The reason for capturing the order.",
										"type": "string",
										"example": "Shipped in one consignment."
									},
									"description": {
										"description": "Any additional information.",
										"type": "string"
									}
								},
								"required": [
									"new_order_status"
								]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Request successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"description": "Indicates whether the request was successful.",
											"type": "boolean",
											"example": true
										},
										"data": {
											"description": "Information about the capture order.",
											"type": "object",
											"properties": {
												"transaction_id": {
													"description": "MultiSafepay's unique identifier for the transaction (also known as the PSP ID).",
													"type": "string",
													"example": "123456789"
												},
												"order_id": {
													"description": "Your unique (client-defined) identifier for the order.",
													"type": "string",
													"maxLength": 50,
													"example": "test-order-0001"
												}
											}
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"description": "False",
											"type": "boolean",
											"example": "false"
										},
										"data": {
											"description": "Information about the error.",
											"type": "object",
											"example": []
										},
										"error_code": {
											"description": "The error code.",
											"type": "integer",
											"example": 1000
										},
										"error_info": {
											"description": "An explanation of the error.",
											"type": "string",
											"example": null
										}
									}
								}
							}
						}
					}
				},
				"summary": "Capture payment",
				"tags": [
					"Payments"
				]
			}
		},
		"/capture/{order_id}": {
			"patch": {
				"description": "Cancel an authorized credit or debit card payment.",
				"operationId": "cancelAuthorizedOrder",
				"parameters": [
					{
						"name": "order_id",
						"description": "The unique identifier of the order. \n\nMax length: 50 characters.\n",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"status": {
										"description": "The [order status](https://docs.multisafepay.com/payments/multisafepay-statuses/).\n",
										"type": "string",
										"enum": [
											"cancelled"
										],
										"example": "cancelled"
									},
									"reason": {
										"description": "The reason for cancelling the order.",
										"type": "string",
										"example": "The transaction appeared fraudulent."
									},
									"description": {
										"description": "Any additional information.",
										"type": "string",
										"example": "Suspiciously large order from unusual country."
									}
								},
								"required": [
									"reason",
									"status"
								]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Request successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"description": "Indicates whether the request was successful.",
											"type": "boolean",
											"example": true
										},
										"data": {
											"description": "Empty",
											"type": "object",
											"example": ""
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"description": "False",
											"type": "boolean",
											"example": "false"
										},
										"data": {
											"description": "Information about the error.",
											"type": "object",
											"example": []
										},
										"error_code": {
											"description": "The error code.",
											"type": "integer",
											"example": 1000
										},
										"error_info": {
											"description": "An explanation of the error.",
											"type": "string",
											"example": null
										}
									}
								}
							}
						}
					}
				},
				"summary": "Cancel authorized payment",
				"tags": [
					"Payments"
				]
			}
		},
		"/orders/{order_id}/refunds": {
			"post": {
				"description": "Process a [full or partial refund](https://docs.multisafepay.com/refunds/full-partial/) for an order.\n\nRefunding creates a new order (with its own order ID) linked to the original order. \n\nTo refund pay later orders, see `RefundPayLater`. \n",
				"operationId": "refundOrder",
				"parameters": [
					{
						"name": "order_id",
						"description": "The unique identifier of the order. \n\nMax length: 50 characters.\n",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"oneOf": [
									{
										"properties": {
											"currency": {
												"description": "The currency to process the refund in. This must be the same as the original transaction.",
												"type": "string",
												"format": "ISO-4217 currency code",
												"example": "EUR"
											},
											"amount": {
												"description": "The refund amount in the currency's smallest unit.\n\n- Decimal currencies: Value for 10 EUR = 1000 (1000 cents) \n- Zero-decimal currencies: Value for 10 YEN = 10\n\n**Note:** A `0` amount triggers a full refund. Use if you don't know the current balance of the transaction.\n",
												"type": "integer",
												"minimum": 0,
												"example": 500
											},
											"description": {
												"description": "A description of the customer's order. Appears on MultiSafepay payment pages and customer bank statements (if supported by the bank)",
												"type": "string",
												"maxLength": 200,
												"example": "Test order description"
											},
											"refund_order_id": {
												"description": "Set a unique identifier for the refund.",
												"type": "string",
												"maxLength": 50,
												"example": "refund-order-id-1234"
											},
											"var1": {
												"type": "string",
												"description": "Variable for storing additional data.",
												"maxLength": 500
											},
											"var2": {
												"type": "string",
												"description": "Variable for storing additional data.",
												"maxLength": 500
											},
											"var3": {
												"type": "string",
												"description": "Variable for storing additional data, including [Split Payments](https://docs.multisafepay.com/features/split-payments/) metadata.",
												"maxLength": 500
											}
										},
										"required": [
											"amount",
											"currency"
										]
									},
									{
										"properties": {
											"checkout_data": {
												"description": "Contains:\n\n- All of the items and quantities of the original order's array of `item` objects\n- Duplicate `item` objects of the items to be refunded (with negative quantity)\n\nTo retrieve the original order's array of `item` objects, make a `GET /orders/{order_id}` request.\n",
												"type": "object",
												"properties": {
													"items": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"name": {
																	"description": "The name of the product or service.",
																	"type": "string",
																	"example": "Backpack"
																},
																"description": {
																	"description": "A description of the product or service.",
																	"type": "string",
																	"example": "Black cotton backpack with logo."
																},
																"unit_price": {
																	"description": "The unit price (in decimals) of the item, excluding VAT.\n\nThe currency of the shopping cart is set at order level using `currency`. \n\n**Example:** The value for a €90 backpack is `90`.\n",
																	"type": "number",
																	"format": "float",
																	"example": 90
																},
																"quantity": {
																	"description": "The number of units of the item.",
																	"type": "integer",
																	"example": 1
																},
																"merchant_item_id": {
																	"description": "Your unique (client-defined) identifier for the product or service.\n\nIf this item specifies the shipping costs, set to `msp-shipping`.\n",
																	"type": "string",
																	"example": "12345678"
																},
																"tax_table_selector": {
																	"description": "Your client-defined identifier for a tax table, specified as `checkout_options.tax_tables.alternate.name`.",
																	"type": "string",
																	"example": "VAT-21"
																},
																"weight": {
																	"description": "The weight per product.",
																	"type": "object",
																	"properties": {
																		"unit": {
																			"description": "The unit of weight.",
																			"type": "string",
																			"enum": [
																				"KG"
																			],
																			"example": "KG"
																		},
																		"value": {
																			"description": "The weight of the item corresponding to the unit.\n\nFor a 2 kilogram product:\n- Set `value` to `2`.\n- Set `unit` to `KG`.\n",
																			"type": "number",
																			"example": 2
																		}
																	}
																}
															}
														}
													}
												}
											}
										},
										"required": [
											"checkout_data"
										]
									}
								]
							},
							"examples": {
								"Refund": {
									"summary": "Refund",
									"value": {
										"currency": "EUR",
										"amount": "500",
										"description": "",
										"refund_order_id": "refund-order-id-1234",
										"var1": "test-string1",
										"var2": "test-string2",
										"var3": "test-string3"
									}
								},
								"Pay later refund": {
									"summary": "Pay later refund",
									"value": {
										"checkout_data": {
											"items": [
												{
													"name": "Test",
													"description": "",
													"unit_price": 100,
													"quantity": 1,
													"merchant_item_id": "1111",
													"tax_table_selector": "none",
													"weight": {
														"unit": "KG",
														"value": "12"
													}
												},
												{
													"name": "Test",
													"description": "",
													"unit_price": 100,
													"quantity": -1,
													"merchant_item_id": "1111",
													"tax_table_selector": "none",
													"weight": {
														"unit": "KG",
														"value": "12"
													}
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Request successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"description": "Indicates whether the request was successful.",
											"type": "boolean",
											"example": true
										},
										"data": {
											"description": "Information about the refund.",
											"type": "object",
											"properties": {
												"transaction_id": {
													"description": "MultiSafepay's unique identifier for the transaction (also known as the PSP ID).",
													"type": "string",
													"example": "123456789"
												},
												"refund_id": {
													"description": "MultiSafepay's unique identifier for the refund transaction (also known as the PSP ID).",
													"type": "integer",
													"example": 3326969
												}
											}
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"description": "False",
											"type": "boolean",
											"example": "false"
										},
										"data": {
											"description": "Information about the error.",
											"type": "object",
											"example": []
										},
										"error_code": {
											"description": "The error code.",
											"type": "integer",
											"example": 1000
										},
										"error_info": {
											"description": "An explanation of the error.",
											"type": "string",
											"example": null
										}
									}
								}
							}
						}
					}
				},
				"summary": "Refund order",
				"tags": [
					"Refunds and chargebacks"
				]
			}
		},
		"/orders/{order_id}/files": {
			"post": {
				"description": "MultiSafepay can challenge [chargebacks](https://docs.multisafepay.com/payments/chargebacks/) on your behalf. To do so, we need documented proof of the order. \n\nUse this request to upload relevant files.  \n",
				"operationId": "challengeChargeback",
				"parameters": [
					{
						"name": "order_id",
						"description": "The unique identifier of the order. \n\nMax length: 50 characters.\n",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"type": {
										"description": "The file type.",
										"type": "string",
										"enum": [
											"PDF",
											"JPEG",
											"PNG"
										],
										"example": "PDF"
									},
									"base64": {
										"description": "The base64 encoded file.",
										"type": "string",
										"example": "VGhpcyBpcyBkdW1teSBmaWxlIGNvbnRlbnQgdGhhdCdzIGJhc2U2NCBlbmNvZGVkLg=="
									},
									"description": {
										"description": "A description of or comments on the file.",
										"type": "string",
										"example": "Email chain of discussions with customer."
									},
									"name": {
										"description": "The filename of the file.",
										"type": "string",
										"example": "EmailsWithCustomerX.pdf"
									}
								},
								"required": [
									"base64",
									"description",
									"name",
									"type"
								]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Request successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"description": "Indicates whether the request was successful.",
											"type": "boolean",
											"example": true
										},
										"data": {
											"description": "Empty",
											"type": "object",
											"example": ""
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"description": "False",
											"type": "boolean",
											"example": "false"
										},
										"data": {
											"description": "Information about the error.",
											"type": "object",
											"example": []
										},
										"error_code": {
											"description": "The error code.",
											"type": "integer",
											"example": 1000
										},
										"error_info": {
											"description": "An explanation of the error.",
											"type": "string",
											"example": null
										}
									}
								}
							}
						}
					}
				},
				"summary": "Challenge chargebacks",
				"tags": [
					"Refunds and chargebacks"
				]
			}
		},
		"/categories": {
			"get": {
				"description": "List the names of all website categories.",
				"operationId": "listWebsiteCategories",
				"responses": {
					"200": {
						"description": "Request successful",
						"content": {
							"application/json": {
								"example": {
									"success": true,
									"data": [
										{
											"code": 999,
											"description": "Adult"
										},
										{
											"code": 100,
											"description": "Gifts and gadgets"
										},
										{
											"code": 101,
											"description": "Electronics and computers"
										},
										{
											"code": 102,
											"description": "Games"
										},
										{
											"code": 103,
											"description": "Health"
										},
										{
											"code": 104,
											"description": "House and garden"
										},
										{
											"code": 105,
											"description": "Office supplies"
										},
										{
											"code": 106,
											"description": "Kids and toys"
										},
										{
											"code": 107,
											"description": "Nutrition"
										},
										{
											"code": 108,
											"description": "Fashion and care"
										},
										{
											"code": 109,
											"description": "Music, movies, and books"
										},
										{
											"code": 114,
											"description": "Other"
										},
										{
											"code": 110,
											"description": "Sport, leisure, and hobby"
										},
										{
											"code": 111,
											"description": "Phone and internet"
										},
										{
											"code": 112,
											"description": "Holiday and travel"
										},
										{
											"code": 113,
											"description": "Sales and auctions"
										}
									]
								},
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"description": "Indicates whether the request was successful.",
											"type": "boolean",
											"example": true
										},
										"data": {
											"description": "All website categories.",
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"code": {
														"description": "The unique identifier of the website category.",
														"type": "string"
													},
													"description": {
														"description": "The website category name.",
														"type": "string"
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"description": "False",
											"type": "boolean",
											"example": "false"
										},
										"data": {
											"description": "Information about the error.",
											"type": "object",
											"example": []
										},
										"error_code": {
											"description": "The error code.",
											"type": "integer",
											"example": 1000
										},
										"error_info": {
											"description": "An explanation of the error.",
											"type": "string",
											"example": null
										}
									}
								}
							}
						}
					}
				},
				"summary": "List website categories",
				"tags": [
					"Manage affiliates"
				]
			}
		},
		"/gateways": {
			"get": {
				"description": "List the gateway identifiers for all payment methods activated for a website.",
				"operationId": "listGateways",
				"parameters": [
					{
						"name": "include",
						"description": "By default, only one activated [gift card](https://docs.multisafepay.com/payment-methods/gift-cards) is included in the response. \n\nTo include **all** activated gift cards in the response, set to `coupons`.\n",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"coupons"
							]
						}
					},
					{
						"name": "country",
						"description": "Filter the payment methods returned by availability per country.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string",
							"format": "ISO 3166-1 alpha-2"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request successful",
						"content": {
							"application/json": {
								"examples": {
									"List gateways": {
										"summary": "List gateways",
										"value": {
											"success": true,
											"data": [
												{
													"id": "VISA",
													"description": "Visa"
												},
												{
													"id": "IDEAL",
													"description": "iDEAL"
												}
											]
										}
									},
									"List gateways with coupons": {
										"summary": "List gateways with coupons",
										"value": {
											"success": true,
											"data": [
												{
													"id": "VISA",
													"description": "Visa"
												},
												{
													"id": "IDEAL",
													"description": "iDEAL"
												},
												{
													"id": "EDENCOM",
													"description": "Ticket Compliments",
													"type": "coupon"
												},
												{
													"id": "EDENECO",
													"description": "Ticket EcoCheque",
													"type": "coupon"
												}
											]
										}
									}
								},
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"description": "Indicates whether the request was successful.",
											"type": "boolean",
											"example": true
										},
										"data": {
											"description": "The gateway identifiers.",
											"type": "object",
											"properties": {
												"id": {
													"description": "The unique identifier of the gateway.",
													"type": "string"
												},
												"description": {
													"description": "The name of the payment method.",
													"type": "string"
												},
												"type": {
													"description": "Whether the payment method is a gift card (`coupon`).",
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Error",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"description": "False",
											"type": "boolean",
											"example": false
										},
										"data": {
											"description": "Empty",
											"type": "object",
											"example": ""
										},
										"error_code": {
											"description": "1032",
											"type": "integer",
											"example": 1032
										},
										"error_info": {
											"description": "The API key was invalid.",
											"type": "string",
											"example": "Invalid API key"
										}
									},
									"type": "object"
								}
							}
						}
					}
				},
				"summary": "List gateways",
				"tags": [
					"Payments"
				]
			}
		},
		"/gateways/{gateway_id}": {
			"get": {
				"description": "Get the name of the payment method for a gateway identifier.",
				"operationId": "getGateway",
				"parameters": [
					{
						"name": "gateway_id",
						"description": "The unique identifier of the gateway. **Not** case sensitive.",
						"in": "path",
						"required": true,
						"schema": {
							"enum": [
								"AFTERPAY",
								"ALIPAY",
								"AMEX",
								"APPLEPAY",
								"BANKTRANS",
								"BELFIUS",
								"CBC",
								"CREDITCARD",
								"DBRTP",
								"DIREB",
								"DIRECTBANK",
								"DOTPAY",
								"EINVOICE",
								"EPS",
								"GIROPAY",
								"GOOGLEPAY",
								"IDEAL",
								"IDEALQR",
								"IN3",
								"KBC",
								"KLARNA",
								"MAESTRO",
								"MASTERCARD",
								"MISTERCASH",
								"PAYAFTER",
								"PAYPAL",
								"SANTANDER",
								"TRUSTLY",
								"TRUSTPAY",
								"VISA",
								"WECHAT",
								"BABYCAD",
								"BEAUTYCAD",
								"BEAUTYWELL",
								"BIERCHEQUE",
								"BLOEMENCAD",
								"BOEKENBON",
								"BOEKENVOOR",
								"EDENCOM",
								"EDENECO",
								"EDENRES",
								"EDENSPORTS",
								"FASHIONCHQ",
								"FASHIONGFT",
								"GEZONDHEID",
								"GOOD4FUN",
								"HUISTUIN",
								"KIDSCADEAU",
								"KLUSCADEAU",
								"NATNLBIOSC",
								"NATENCRD",
								"NATNLETUIN",
								"OHMYGOOD",
								"SPORTENFIT",
								"SPORTSGIFT",
								"VVVGIFTCARD",
								"WIJNCADEAU",
								"YOURGIFT"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"description": "Indicates whether the request was successful.",
											"type": "boolean",
											"example": true
										},
										"data": {
											"type": "object",
											"properties": {
												"id": {
													"description": "The unique identifier of the gateway.",
													"type": "string",
													"example": "MISTERCASH"
												},
												"description": {
													"description": "The name of the payment method.",
													"type": "string",
													"example": "Bancontact"
												}
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Invalid API key",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"description": "False",
											"type": "boolean",
											"example": false
										},
										"data": {
											"description": "Empty",
											"type": "object",
											"example": ""
										},
										"error_code": {
											"description": "1032",
											"type": "integer",
											"example": 1032
										},
										"error_info": {
											"description": "The API key was invalid.",
											"type": "string",
											"example": "Invalid API key"
										}
									},
									"type": "object"
								}
							}
						}
					},
					"404": {
						"description": "Gateway not found",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean",
											"example": false
										},
										"data": {
											"description": "Empty",
											"type": "object",
											"example": ""
										},
										"error_code": {
											"description": "1023",
											"type": "integer",
											"example": 1023
										},
										"error_info": {
											"description": "The gateway is not available.",
											"type": "string",
											"example": "No gateway (payment method) available"
										}
									},
									"type": "object"
								}
							}
						}
					}
				},
				"summary": "Get gateway",
				"tags": [
					"Payments"
				]
			}
		},
		"/issuers/{gateway}": {
			"get": {
				"description": "List the available iDEAL issuers (may differ in the test environment).",
				"operationId": "listGatewayIssuers",
				"parameters": [
					{
						"name": "gateway",
						"description": "The unique identifier for iDEAL.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"IDEAL"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request successful",
						"content": {
							"application/json": {
								"example": {
									"success": true,
									"data": [
										{
											"code": "0031",
											"description": "ABN AMRO"
										},
										{
											"code": "0751",
											"description": "SNS Bank"
										},
										{
											"code": "0721",
											"description": "ING"
										},
										{
											"code": "0021",
											"description": "Rabobank"
										},
										{
											"code": "0761",
											"description": "ASN Bank"
										},
										{
											"code": "0771",
											"description": "Regio Bank"
										},
										{
											"code": "0511",
											"description": "Triodos Bank"
										},
										{
											"code": "0161",
											"description": "Van Lanschot Bankiers"
										},
										{
											"code": "0801",
											"description": "Knab"
										},
										{
											"code": "1099",
											"description": "Revolut"
										},
										{
											"code": "4371",
											"description": "Bunq"
										},
										{
											"code": "1235",
											"description": "Handelsbanken"
										}
									]
								},
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"description": "Indicates whether the request was successful.",
											"type": "boolean",
											"example": true
										},
										"data": {
											"type": "array",
											"description": "| Code | Description |\n|---|---|\n| 0031     | ABN AMRO              |\n| 0761     | ASN Bank              |\n| 4371     | bunq                  |\n| 1235     | Handelsbanken         |\n| 0721     | ING                   |\n| 0801     | Knab                  |\n| 0021     | Rabobank              |\n| 0771     | Regio Bank            |\n| 1099     | Revolut               |\n| 0751     | SNS Bank              |\n| 0511     | Triodos Bank          |\n| 0161     | Van Lanschot Bankiers |\n",
											"items": {
												"type": "object",
												"properties": {
													"code": {
														"description": "The unique identifier of the issuer (see table above).",
														"type": "string"
													},
													"description": {
														"description": "The name of the issuer (see table above).",
														"type": "string"
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Invalid iDEAL issuer ID",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"description": "False",
											"type": "boolean",
											"example": "false"
										},
										"data": {
											"description": "Information about the error.",
											"type": "object",
											"example": []
										},
										"error_code": {
											"description": "The error code.",
											"type": "integer",
											"example": 1000
										},
										"error_info": {
											"description": "An explanation of the error.",
											"type": "string",
											"example": null
										}
									}
								}
							}
						}
					}
				},
				"summary": "List iDEAL issuers",
				"tags": [
					"Payments"
				]
			}
		},
		"/recurring/{your_customer_reference}": {
			"get": {
				"description": "List all of a customer's [tokens](https://docs.multisafepay.com/features/recurring-payments/). \n\nTo paginate the response, use the `limit` and `offset` query parameters. \n",
				"operationId": "listTokens",
				"parameters": [
					{
						"name": "your_customer_reference",
						"in": "path",
						"description": "Your unique identifier of the customer.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The number of tokens you want to list.\n\nIf empty, the default is 10.\n",
						"required": false,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "offset",
						"in": "query",
						"description": "The number of the token to start the list from.\n\nIf empty, the default is 0, i.e. the first token.\n",
						"required": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request successful",
						"content": {
							"application/json": {
								"example": {
									"success": true,
									"data": {
										"tokens": [
											{
												"token": "QZTCh7jdk8",
												"code": "MASTERCARD",
												"display": "1234 5678 9101 2345",
												"bin": 555555,
												"name_holder": "Test-person-nl",
												"expiry_date": 1234,
												"expired": 0,
												"last4": 1111,
												"recurring_model": "cardOnFile"
											},
											{
												"token": "GVXjq3432o4",
												"code": "VISA",
												"display": "1234 5678 9101 2345",
												"bin": 411111,
												"name_holder": "WebcashierE2E",
												"expiry_date": 1234,
												"expired": 0,
												"last4": 2222,
												"recurring_model": "unscheduled"
											}
										]
									}
								},
								"schema": {
									"properties": {
										"success": {
											"description": "Indicates whether the request was successful.",
											"type": "boolean",
											"example": true
										},
										"data": {
											"type": "object",
											"description": "The payload of the response.",
											"properties": {
												"tokens": {
													"type": "array",
													"description": "The customer's tokens.",
													"items": {
														"description": "Information about the token.",
														"type": "object",
														"properties": {
															"token": {
																"description": "The unique identifier of the token.",
																"type": "string",
																"example": "azbkvsE0up4"
															},
															"code": {
																"description": "The unique identifier of the payment gateway.",
																"type": "string",
																"enum": [
																	"AMEX",
																	"CREDITCARD",
																	"DIRDEB",
																	"DIRECTBANK",
																	"IDEAL",
																	"MAESTRO",
																	"MASTERCARD",
																	"MISTERCASH",
																	"VISA"
																],
																"example": "MASTERCARD"
															},
															"display": {
																"description": "How the card number is displayed.",
																"type": "string",
																"example": "Card xxxx xxxx xxxx 4444"
															},
															"name_holder": {
																"description": "The cardholder’s name.",
																"type": "string",
																"example": "Testperson-nl"
															},
															"expiry_date": {
																"description": "The card expiry date.",
																"type": "integer",
																"format": "MMYY",
																"example": 1225
															},
															"expired": {
																"description": "Whether the card has expired. If `1`, the card has expired. If `0`, the card is valid.",
																"type": "integer",
																"example": 0
															},
															"last4": {
																"description": "The last 4 digits of the card number.",
																"type": "integer",
																"example": 4444
															},
															"model": {
																"description": "For initial and subsequent [Recurring payments](https://docs.multisafepay.com/features/recurring-payments/) (**required**), sets the recurring model:\n\n- Card on file (COF): The cardholder has authorized you to store their card details.\n- Subscription: An agreement or services that are billed at the end of your billing cycle, e.g. weekly, monthly.\n- Unscheduled: Event-triggered, e.g. mobile top-up when no credit left on the phone.\n",
																"type": "string",
																"enum": [
																	"cardonfile",
																	"subscription",
																	"unscheduled"
																],
																"example": "cardonfile"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"410": {
						"description": "Error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"description": "`false`\n",
											"type": "boolean",
											"example": false
										},
										"data": {
											"description": "Empty",
											"type": "object",
											"example": ""
										},
										"error_code": {
											"description": "1000",
											"type": "integer",
											"example": 1000
										},
										"error_info": {
											"description": "Not found. Check you provided the correct identifier.",
											"type": "string",
											"example": "Not found"
										}
									}
								}
							}
						}
					}
				},
				"summary": "List tokens",
				"tags": [
					"Tokens"
				]
			}
		},
		"/recurring/{your_customer_reference}/token/{your_token}": {
			"get": {
				"description": "Get information about a customer's [token](https://docs.multisafepay.com/features/recurring-payments/).",
				"operationId": "getToken",
				"parameters": [
					{
						"name": "your_customer_reference",
						"in": "path",
						"description": "Your unique identifier of the customer.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "your_token",
						"in": "path",
						"description": "The unique identifier of the token.",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request successful",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"description": "Indicates whether the request was successful.",
											"type": "boolean",
											"example": true
										},
										"data": {
											"description": "Information about the token.",
											"type": "object",
											"properties": {
												"token": {
													"description": "The unique identifier of the token.",
													"type": "string",
													"example": "azbkvsE0up4"
												},
												"code": {
													"description": "The unique identifier of the payment gateway.",
													"type": "string",
													"enum": [
														"AMEX",
														"CREDITCARD",
														"DIRDEB",
														"DIRECTBANK",
														"IDEAL",
														"MAESTRO",
														"MASTERCARD",
														"MISTERCASH",
														"VISA"
													],
													"example": "MASTERCARD"
												},
												"display": {
													"description": "How the card number is displayed.",
													"type": "string",
													"example": "Card xxxx xxxx xxxx 4444"
												},
												"name_holder": {
													"description": "The cardholder’s name.",
													"type": "string",
													"example": "Testperson-nl"
												},
												"expiry_date": {
													"description": "The card expiry date.",
													"type": "integer",
													"format": "MMYY",
													"example": 1225
												},
												"expired": {
													"description": "Whether the card has expired. If `1`, the card has expired. If `0`, the card is valid.",
													"type": "integer",
													"example": 0
												},
												"last4": {
													"description": "The last 4 digits of the card number.",
													"type": "integer",
													"example": 4444
												},
												"model": {
													"description": "For initial and subsequent [Recurring payments](https://docs.multisafepay.com/features/recurring-payments/) (**required**), sets the recurring model:\n\n- Card on file (COF): The cardholder has authorized you to store their card details.\n- Subscription: An agreement or services that are billed at the end of your billing cycle, e.g. weekly, monthly.\n- Unscheduled: Event-triggered, e.g. mobile top-up when no credit left on the phone.\n",
													"type": "string",
													"enum": [
														"cardonfile",
														"subscription",
														"unscheduled"
													],
													"example": "cardonfile"
												}
											}
										}
									}
								}
							}
						}
					},
					"410": {
						"description": "Token not found",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean",
											"example": "false"
										},
										"data": {
											"description": "Empty",
											"type": "object",
											"example": ""
										},
										"error_code": {
											"description": "1000",
											"type": "integer",
											"example": 1000
										},
										"error_info": {
											"description": "Token not found.",
											"type": "string",
											"example": "Token not found"
										}
									}
								}
							}
						}
					}
				},
				"summary": "Get token",
				"tags": [
					"Tokens"
				]
			}
		},
		"/recurring/{your_customer_reference}/remove/{your_token}": {
			"delete": {
				"description": "Delete a customer's [token](https://docs.multisafepay.com/features/recurring-payments/).",
				"operationId": "deleteToken",
				"parameters": [
					{
						"name": "your_customer_reference",
						"in": "path",
						"description": "Your unique identifier of the customer.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "your_token",
						"in": "path",
						"description": "The unique identifier of the token.",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"description": "Indicates whether the request was successful.",
											"type": "boolean",
											"example": true
										},
										"data": {
											"description": "Whether the token was successfully deleted.",
											"properties": {
												"removed": {
													"description": "Whether the token was successfully deleted.",
													"type": "boolean",
													"example": true
												}
											}
										}
									}
								}
							}
						}
					},
					"410": {
						"description": "Token not found",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean",
											"example": "false"
										},
										"data": {
											"description": "Empty",
											"type": "object",
											"example": ""
										},
										"error_code": {
											"description": "1000",
											"type": "integer",
											"example": 1000
										},
										"error_info": {
											"description": "Token not found. The token was not removed.",
											"type": "string",
											"example": "Token not found"
										}
									}
								}
							}
						}
					}
				},
				"summary": "Delete token",
				"tags": [
					"Tokens"
				]
			}
		},
		"/recurring/{your_customer_reference}/update/{your_token}": {
			"patch": {
				"description": "Update the card expiry date in a customer's token.",
				"operationId": "updateCardExpiryDate",
				"parameters": [
					{
						"name": "your_customer_reference",
						"description": "Your unique identifier of the customer.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "your_token",
						"description": "The unique identifier of the token.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"expiry_date": {
										"description": "The card expiry date.",
										"type": "integer",
										"format": "MMYY",
										"example": 1225
									}
								},
								"required": [
									"expiry_date"
								]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Request successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"description": "Indicates whether the request was successful.",
											"type": "boolean",
											"example": true
										},
										"data": {
											"description": "Information about the update.",
											"properties": {
												"updated": {
													"description": "Whether the card expiry date was successfully updated.",
													"type": "boolean",
													"example": true
												}
											}
										}
									}
								}
							}
						}
					},
					"410": {
						"description": "Token not updated",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean",
											"example": false
										},
										"data": {
											"description": "Empty",
											"type": "object",
											"example": ""
										},
										"error_code": {
											"description": "1000",
											"type": "integer",
											"example": 1000
										},
										"error_info": {
											"description": "Token not updated.",
											"type": "string",
											"example": "Token not updated"
										}
									}
								}
							}
						}
					}
				},
				"summary": "Update token",
				"tags": [
					"Tokens"
				]
			}
		}
	},
	"security": [
		{
			"BearerAuth": [],
			"ApiKeyQuery": [
				"c2e8507e3bb11df070f6c45d36ea2a366eaecea2"
			]
		}
	],
	"servers": [
		{
			"url": "https://testapi.multisafepay.com/v1/json",
			"description": "Test environment"
		},
		{
			"url": "https://api.multisafepay.com/v1/json",
			"description": "Production environment"
		}
	],
	"tags": [
		{
			"name": "Payments",
			"description": "Create and manage payments."
		},
		{
			"name": "Tokens",
			"description": "Manage tokens."
		},
		{
			"name": "Pay After Delivery (BETA)",
			"description": "Request customer credit scores, and track collecting statuses."
		},
		{
			"name": "Refunds and chargebacks",
			"description": "Process refunds and challenge chargebacks."
		},
		{
			"name": "Onboard affiliates",
			"description": "Onboard affiliated merchant accounts."
		},
		{
			"name": "Manage affiliates",
			"description": "Manage the accounts of affiliated merchants."
		},
		{
			"name": "Customers",
			"description": "Create and manage customer profiles."
		},
		{
			"name": "Reconciliation",
			"description": "List transactions for your reconciliation processes."
		}
	]
}
